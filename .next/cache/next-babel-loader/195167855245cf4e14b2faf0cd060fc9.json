{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Popover, OverlayTrigger } from 'react-bootstrap';\nimport stringToHTML from 'html-react-parser'; //Questa funzione mi ha ammazzato\n\nexport var getGlossaryPopover = function getGlossaryPopover(textRaw, targetsRaw) {\n  var text = textRaw;\n  var targets = targetsRaw.map(function (el) {\n    return el.name;\n  });\n\n  var textFragmented = _toConsumableArray(text);\n\n  var analyzing = [];\n  var found = [];\n\n  for (var x = 0; x < textFragmented.length; x++) {\n    var regex = RegExp('^[a-zA-Z0-9àèéìòù]*$');\n\n    if (regex.test(textFragmented[x])) {\n      analyzing.push(textFragmented[x]);\n    } else {\n      if (targets.map(function (el) {\n        return el.toLowerCase();\n      }).includes(analyzing.join('').toLowerCase())) {\n        found.push({\n          start: Number(x - analyzing.length),\n          end: x,\n          value: targetsRaw.find(function (word) {\n            return word.name === analyzing.join('').toLowerCase();\n          }).name,\n          meaning: targetsRaw.find(function (word) {\n            return word.name === analyzing.join('').toLowerCase();\n          }).meaning,\n          reference: targetsRaw.find(function (word) {\n            return word.name === analyzing.join('').toLowerCase();\n          }).reference\n        });\n      }\n\n      analyzing = [];\n    }\n  }\n\n  var result = [];\n  var prevTarget = 0;\n  found.forEach(function (el, i) {\n    var formattedStr = textRaw.slice(prevTarget, el.start).trim();\n    result.push(formattedStr, \" \");\n\n    var popover = __jsx(Popover, {\n      id: \"glossary-popover\"\n    }, __jsx(Popover.Title, {\n      as: \"h3\",\n      id: \"glossary-popover-title\"\n    }, el.value), __jsx(Popover.Content, {\n      id: \"glossary-popover-content\"\n    }, el.meaning), __jsx(Popover.Title, {\n      id: \"glossary-popover-footer\"\n    }, el.reference));\n\n    var segment = __jsx(OverlayTrigger, {\n      trigger: [\"click\", \"hover\", \"focus\"],\n      placement: \"auto\",\n      overlay: popover,\n      key: i,\n      id: \"glossary-word-container\"\n    }, __jsx(\"span\", {\n      id: \"glossary-word\"\n    }, textRaw.slice(el.start, el.end)));\n\n    result.push(segment, \" \");\n    prevTarget = el.end;\n\n    if (found.length === i + 1 && textRaw.slice(prevTarget).trim().length > 0) {\n      //Se abbiamo markato già tutte le keywords e c'è ancora del testo da stampare.\n      var _formattedStr = textRaw.slice(prevTarget).trim();\n\n      result.push(_formattedStr, \" \");\n    }\n  });\n  if (found.length === 0) result = stringToHTML(textRaw.trim());\n  var finalResult = [];\n\n  for (var _x = 0; _x < result.length; _x++) {\n    if (typeof result[_x] === \"string\") {\n      //Caso della stringa contenente html\n      finalResult.push(stringToHTML(result[_x]));\n    } else {\n      //Caso del component\n      finalResult.push(result[_x]);\n    }\n  }\n\n  return finalResult;\n};","map":null,"metadata":{},"sourceType":"module"}