{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../styles/Home.module.css';\nimport { useState } from 'react';\nimport { useLanguage } from '../context/siteLanguageContext'; //context\n\nimport { Row, Col, Card, Button } from 'react-bootstrap';\nimport { Header } from '../components/layout/Header';\nimport { Navigation } from '../components/layout/Navbar';\nimport { Footer } from '../components/layout/Footer';\n\nfunction formazione(props) {\n  var siteLanguage = useLanguage(); //context\n\n  return __jsx(\"div\", {\n    className: styles.container\n  }, __jsx(Header, {\n    title: siteLanguage === \"ita\" ? \"Consulenza\" : \"Privacy Advice\"\n  }), __jsx(Navigation, null), __jsx(\"main\", {\n    className: styles.main\n  }, __jsx(Card, {\n    className: \"p-2 responsive-width-card\"\n  }, __jsx(Card.Img, {\n    className: \"black-border\",\n    variant: \"top\",\n    src: \"consulenza.png\"\n  }), __jsx(Card.Body, null, \"Formazione: la struttura sar\\xE0 molto simile a Consulenza.\"), __jsx(Card.Footer, {\n    className: \"text-center\"\n  }))), __jsx(Footer, null));\n}\n\nformazione.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              props: {\n                lessons: []\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default formazione;\n/* //Rimozione di getServerSideProps per deployare su Firebase\nexport async function getServerSideProps(context) {\n  //const apiUrl = \"http://\" + context.req.headers.host + \"/api/learning\"\n  //const resLessons = await fetch(apiUrl)\n  //const lessons = await resLessons.json()\n  //return { lessons: lessons.data }\n  return { props: { lessons: [] } }\n}\n*/","map":null,"metadata":{},"sourceType":"module"}