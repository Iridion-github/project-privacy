{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/iridion/Desktop/Repos/Freelancer/project-privacy/components/areaTest/Answers.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Row, Col, Button } from 'react-bootstrap';\nexport var Answers = function Answers(props) {\n  var _this = this;\n\n  var selectAnswer = function selectAnswer(answerIndex) {\n    var resultingAnswer = props.selectedAnswersList.map(function (elem, i) {\n      return i === answerIndex ? _objectSpread(_objectSpread({}, elem), {}, {\n        selected: true\n      }) : _objectSpread(_objectSpread({}, elem), {}, {\n        selected: false\n      });\n    });\n    var resultingAllAnswers = props.allUserAnswers.map(function (elem, i) {\n      return i === props.questionIndex ? _objectSpread(_objectSpread({}, elem), {}, {\n        answers: resultingAnswer\n      }) : elem;\n    });\n    props.setSelectedAnswersList(resultingAllAnswers);\n  };\n\n  var printAnswer = function printAnswer(answerNumber, text) {\n    var selected = props.selectedAnswersList[answerNumber - 1].selected;\n    var letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    return __jsx(Button, {\n      key: answerNumber,\n      type: \"radio\",\n      size: \"lg\",\n      variant: selected ? \"info\" : \"outline-info\",\n      block: true,\n      onClick: function onClick() {\n        return selectAnswer(answerNumber - 1);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }, letters[answerNumber - 1] + \") \", text);\n  };\n\n  return __jsx(Row, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, __jsx(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, props.answers.map(function (elem, i) {\n    return printAnswer(i + 1, elem.text);\n  })));\n};\n_c = Answers;\n\nvar _c;\n\n$RefreshReg$(_c, \"Answers\");","map":{"version":3,"sources":["/home/iridion/Desktop/Repos/Freelancer/project-privacy/components/areaTest/Answers.js"],"names":["Row","Col","Button","Answers","props","selectAnswer","answerIndex","resultingAnswer","selectedAnswersList","map","elem","i","selected","resultingAllAnswers","allUserAnswers","questionIndex","answers","setSelectedAnswersList","printAnswer","answerNumber","text","letters"],"mappings":";;;;;;;;;AAAA,SACEA,GADF,EAEEC,GAFF,EAGEC,MAHF,QAIO,iBAJP;AAMA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAUC,KAAV,EAAiB;AAAA;;AAEtC,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,WAAD,EAAiB;AACpC,QAAMC,eAAe,GAAGH,KAAK,CAACI,mBAAN,CAA0BC,GAA1B,CAA8B,UAACC,IAAD,EAAOC,CAAP;AAAA,aAAaA,CAAC,KAAKL,WAAN,mCAA0BI,IAA1B;AAAgCE,QAAAA,QAAQ,EAAE;AAA1C,2CAA0DF,IAA1D;AAAgEE,QAAAA,QAAQ,EAAE;AAA1E,QAAb;AAAA,KAA9B,CAAxB;AACA,QAAMC,mBAAmB,GAAGT,KAAK,CAACU,cAAN,CAAqBL,GAArB,CAAyB,UAACC,IAAD,EAAOC,CAAP;AAAA,aAAaA,CAAC,KAAKP,KAAK,CAACW,aAAZ,mCAAkCL,IAAlC;AAAwCM,QAAAA,OAAO,EAAET;AAAjD,WAAsEG,IAAnF;AAAA,KAAzB,CAA5B;AACAN,IAAAA,KAAK,CAACa,sBAAN,CAA6BJ,mBAA7B;AACD,GAJD;;AAMA,MAAMK,WAAW,GAAG,SAAdA,WAAc,CAACC,YAAD,EAAeC,IAAf,EAAwB;AAC1C,QAAMR,QAAQ,GAAGR,KAAK,CAACI,mBAAN,CAA0BW,YAAY,GAAG,CAAzC,EAA4CP,QAA7D;AACA,QAAMS,OAAO,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,EAAuE,GAAvE,EAA4E,GAA5E,EAAiF,GAAjF,EAAsF,GAAtF,EAA2F,GAA3F,EAAgG,GAAhG,EAAqG,GAArG,EAA0G,GAA1G,EAA+G,GAA/G,EAAoH,GAApH,EAAyH,GAAzH,EAA8H,GAA9H,CAAhB;AACA,WAAQ,MAAE,MAAF;AACN,MAAA,GAAG,EAAEF,YADC;AAEN,MAAA,IAAI,EAAC,OAFC;AAGN,MAAA,IAAI,EAAC,IAHC;AAIN,MAAA,OAAO,EAAEP,QAAQ,GAAG,MAAH,GAAY,cAJvB;AAKN,MAAA,KAAK,MALC;AAMN,MAAA,OAAO,EAAE;AAAA,eAAMP,YAAY,CAACc,YAAY,GAAG,CAAhB,CAAlB;AAAA,OANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQJE,OAAO,CAACF,YAAY,GAAG,CAAhB,CAAP,GAA4B,IARxB,EASJC,IATI,CAAR;AAYD,GAfD;;AAiBA,SACE,MAAC,GAAD;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGhB,KAAK,CAACY,OAAN,CAAcP,GAAd,CAAkB,UAACC,IAAD,EAAOC,CAAP;AAAA,WAAaO,WAAW,CAACP,CAAC,GAAG,CAAL,EAAQD,IAAI,CAACU,IAAb,CAAxB;AAAA,GAAlB,CADH,CADF,CADF;AAOD,CAhCM;KAAMjB,O","sourcesContent":["import {\n  Row,\n  Col,\n  Button\n} from 'react-bootstrap'\n\nexport const Answers = function (props) {\n\n  const selectAnswer = (answerIndex) => {\n    const resultingAnswer = props.selectedAnswersList.map((elem, i) => i === answerIndex ? ({ ...elem, selected: true }) : ({ ...elem, selected: false }))\n    const resultingAllAnswers = props.allUserAnswers.map((elem, i) => i === props.questionIndex ? ({ ...elem, answers: resultingAnswer }) : elem)\n    props.setSelectedAnswersList(resultingAllAnswers)\n  }\n\n  const printAnswer = (answerNumber, text) => {\n    const selected = props.selectedAnswersList[answerNumber - 1].selected\n    const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    return (< Button\n      key={answerNumber}\n      type=\"radio\"\n      size=\"lg\"\n      variant={selected ? \"info\" : \"outline-info\"}\n      block\n      onClick={() => selectAnswer(answerNumber - 1)}\n    >\n      { letters[answerNumber - 1] + \") \"\n      }{text}\n    </Button >\n    )\n  }\n\n  return (\n    <Row className=\"mb-4\">\n      <Col>\n        {props.answers.map((elem, i) => printAnswer(i + 1, elem.text))}\n      </Col>\n    </Row>\n  )\n}"]},"metadata":{},"sourceType":"module"}