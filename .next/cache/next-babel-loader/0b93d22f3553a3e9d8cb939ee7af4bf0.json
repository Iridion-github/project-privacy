{"ast":null,"code":"var _jsxFileName = \"/home/iridion/Desktop/Repos/Freelancer/project-privacy/components/archive/ui/MultiSelect.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Form, Row, Col, Badge, Button } from 'react-bootstrap';\nexport var MultiSelect = function MultiSelect(props) {\n  var _this = this;\n\n  var _props$formGroupClass = props.formGroupClass,\n      formGroupClass = _props$formGroupClass === void 0 ? \"\" : _props$formGroupClass,\n      _props$formLabelClass = props.formLabelClass,\n      formLabelClass = _props$formLabelClass === void 0 ? \"\" : _props$formLabelClass,\n      _props$validationFunc = props.validationFunc,\n      validationFunc = _props$validationFunc === void 0 ? function () {\n    return true;\n  } : _props$validationFunc,\n      _props$label = props.label,\n      label = _props$label === void 0 ? \"\" : _props$label,\n      _props$textmuted = props.textmuted,\n      textmuted = _props$textmuted === void 0 ? false : _props$textmuted,\n      _props$onChange = props.onChange,\n      onChange = _props$onChange === void 0 ? function (val) {\n    return val;\n  } : _props$onChange,\n      onRemove = props.onRemove,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n      _props$selectableOpti = props.selectableOptions,\n      selectableOptions = _props$selectableOpti === void 0 ? [] : _props$selectableOpti,\n      placeholder = props.placeholder,\n      _props$getOptionValue = props.getOptionValue,\n      getOptionValue = _props$getOptionValue === void 0 ? function (el) {\n    if ((el === null || el === void 0 ? void 0 : el.label) && (el === null || el === void 0 ? void 0 : el.value)) {\n      return el.value;\n    } else {\n      return el && el !== \"\" ? el : null;\n    }\n  } : _props$getOptionValue,\n      _props$getOptionStyle = props.getOptionStyle,\n      getOptionStyle = _props$getOptionStyle === void 0 ? function () {\n    return {};\n  } : _props$getOptionStyle,\n      _props$selectedItems = props.selectedItems,\n      selectedItems = _props$selectedItems === void 0 ? [] : _props$selectedItems,\n      _props$onRemoveAll = props.onRemoveAll,\n      onRemoveAll = _props$onRemoveAll === void 0 ? null : _props$onRemoveAll,\n      _props$firstColSpan = props.firstColSpan,\n      firstColSpan = _props$firstColSpan === void 0 ? 6 : _props$firstColSpan,\n      _props$secondColSpan = props.secondColSpan,\n      secondColSpan = _props$secondColSpan === void 0 ? 6 : _props$secondColSpan;\n\n  var handleChange = function handleChange(val) {\n    if (validationFunc(val)) {\n      onChange(val);\n      return;\n    }\n  };\n\n  return __jsx(Form.Group, {\n    className: formGroupClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(Form.Label, {\n    className: formLabelClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, label), __jsx(Row, {\n    className: \"w-100 ml-0 mr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    md: firstColSpan,\n    className: \"pl-1 pr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Control, {\n    as: \"select\",\n    defaultValue: \"\",\n    onChange: function onChange(event) {\n      return handleChange(event.target.value);\n    },\n    disabled: isDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, __jsx(\"option\", {\n    style: {\n      display: \"none !important\"\n    },\n    key: \"empty-value-key\",\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, placeholder), selectableOptions.filter(function (el) {\n    return !(el === null || el === void 0 ? void 0 : el.selected);\n  }).map(function (el) {\n    return __jsx(\"option\", {\n      style: getOptionStyle(el),\n      key: (el === null || el === void 0 ? void 0 : el.value) ? el === null || el === void 0 ? void 0 : el.value : el,\n      value: getOptionValue(el),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 70\n      }\n    }, (el === null || el === void 0 ? void 0 : el.label) ? el === null || el === void 0 ? void 0 : el.label : el);\n  }))), __jsx(Col, {\n    md: secondColSpan,\n    className: \"pl-1 pr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, selectedItems && selectedItems.length > 0 && __jsx(Row, {\n    className: \"w-100 ml-0 mr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, __jsx(Col, {\n    md: 10,\n    className: \"pl-0 pr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }, console.log(\"selectedItems:\", selectedItems), selectedItems.map(function (opt) {\n    return __jsx(Badge, {\n      variant: \"info\",\n      className: \"mr-1\",\n      key: opt.value ? opt.value : opt,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 19\n      }\n    }, opt.label ? opt.label : opt, __jsx(Button, {\n      size: \"sm\",\n      variant: \"danger\",\n      className: \"ml-1 p-0\",\n      style: {\n        lineHeight: \"1\",\n        height: \"16px\",\n        width: \"16px\"\n      },\n      onClick: function onClick() {\n        return onRemove((opt === null || opt === void 0 ? void 0 : opt.value) ? opt.value : opt);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, __jsx(\"i\", {\n      className: \"fas fa-times p-0\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 23\n      }\n    })));\n  })), __jsx(Col, {\n    md: 2,\n    className: \"pl-0 pr-0 text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    variant: \"danger\",\n    size: \"sm\",\n    onClick: onRemoveAll,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, __jsx(\"i\", {\n    className: \"fas fa-trash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 19\n    }\n  })))))), textmuted && __jsx(Form.Text, {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }, textmuted));\n};\n/*\n------------------------------[STATE]------------------------------\n\nconst [multiSelectVal, setMultiSelectVal] = useState(\"\")\n  const [optionsList, setOptionsList] = useState([\n    { value: \"blue\", label: \"Blue\", selected: false },\n    { value: \"red\", label: \"Red\", selected: false },\n    { value: \"green\", label: \"Green\", selected: false },\n    { value: \"cyan\", label: \"Cyan\", selected: false },\n  ])\n\n  const handleChangeMultiSelectVal = (val) => {\n    if (multiSelectVal === \"\") {\n      console.log(\"handleChangeSelectVal - empty string case - val: \", val)\n      const valObject = optionsList.find(opt => opt.value === val)\n      setMultiSelectVal([valObject])\n    } else {\n      console.log(\"handleChangeSelectVal - array case - val: \", val)\n      const valObject = optionsList.find(opt => opt.value === val)\n      setMultiSelectVal([valObject])\n      setMultiSelectVal([...multiSelectVal, valObject])\n    }\n    //setto selected a true\n    setOptionsList([...optionsList].map(opt => {\n      if (opt.value === val) {\n        opt.selected = !opt.selected\n      }\n      return opt\n    }))\n  }\n\n  const handleRemoveMultiSelectVal = (val) => {\n    console.log(\"handleRemoveMultiSelectVal - val:\", val)\n    const updatedMultiSelectVal = [...multiSelectVal].filter(el => el.value !== val)\n    setMultiSelectVal(updatedMultiSelectVal)\n    //setto selected a false\n    setOptionsList([...optionsList].map(opt => {\n      if (opt.value === val) {\n        opt.selected = !opt.selected\n      }\n      return opt\n    }))\n  }\n\n------------------------------[RETURN]------------------------------\n\n <MultiSelect\n  //formGroupClass={\"mt-5\"}\n  //formLabelClass={\"mt-5\"}\n  validationFunc={() => true}\n  label={\"label\"}\n  textmuted={\"text muted\"}\n  onChange={handleChangeMultiSelectVal}\n  onRemove={handleRemoveMultiSelectVal}\n  isDisabled={false}\n  selectableOptions={optionsList}\n  placeholder={\"-\"}\n  //getOptionValue={col => col}\n  //getOptionStyle={col => ({ color: `${col} !important` })}\n  selectedItems={multiSelectVal}\n/>\n*/\n\n_c = MultiSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelect\");","map":{"version":3,"sources":["/home/iridion/Desktop/Repos/Freelancer/project-privacy/components/archive/ui/MultiSelect.js"],"names":["Form","Row","Col","Badge","Button","MultiSelect","props","formGroupClass","formLabelClass","validationFunc","label","textmuted","onChange","val","onRemove","isDisabled","selectableOptions","placeholder","getOptionValue","el","value","getOptionStyle","selectedItems","onRemoveAll","firstColSpan","secondColSpan","handleChange","event","target","display","filter","selected","map","length","console","log","opt","lineHeight","height","width"],"mappings":";;;AAAA,SACEA,IADF,EAEEC,GAFF,EAGEC,GAHF,EAIEC,KAJF,EAKEC,MALF,QAMO,iBANP;AASA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAUC,KAAV,EAAiB;AAAA;;AAAA,8BAyBtCA,KAzBsC,CAGxCC,cAHwC;AAAA,MAGxCA,cAHwC,sCAGvB,EAHuB;AAAA,8BAyBtCD,KAzBsC,CAIxCE,cAJwC;AAAA,MAIxCA,cAJwC,sCAIvB,EAJuB;AAAA,8BAyBtCF,KAzBsC,CAKxCG,cALwC;AAAA,MAKxCA,cALwC,sCAKvB;AAAA,WAAM,IAAN;AAAA,GALuB;AAAA,qBAyBtCH,KAzBsC,CAMxCI,KANwC;AAAA,MAMxCA,KANwC,6BAMhC,EANgC;AAAA,yBAyBtCJ,KAzBsC,CAOxCK,SAPwC;AAAA,MAOxCA,SAPwC,iCAO5B,KAP4B;AAAA,wBAyBtCL,KAzBsC,CAQxCM,QARwC;AAAA,MAQxCA,QARwC,gCAQ7B,UAAAC,GAAG;AAAA,WAAIA,GAAJ;AAAA,GAR0B;AAAA,MASxCC,QATwC,GAyBtCR,KAzBsC,CASxCQ,QATwC;AAAA,0BAyBtCR,KAzBsC,CAUxCS,UAVwC;AAAA,MAUxCA,UAVwC,kCAU3B,KAV2B;AAAA,8BAyBtCT,KAzBsC,CAWxCU,iBAXwC;AAAA,MAWxCA,iBAXwC,sCAWpB,EAXoB;AAAA,MAYxCC,WAZwC,GAyBtCX,KAzBsC,CAYxCW,WAZwC;AAAA,8BAyBtCX,KAzBsC,CAaxCY,cAbwC;AAAA,MAaxCA,cAbwC,sCAavB,UAAAC,EAAE,EAAI;AACrB,QAAI,CAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE,CAAET,KAAJ,MAAaS,EAAb,aAAaA,EAAb,uBAAaA,EAAE,CAAEC,KAAjB,CAAJ,EAA4B;AAC1B,aAAOD,EAAE,CAACC,KAAV;AACD,KAFD,MAEO;AACL,aAAQD,EAAE,IAAIA,EAAE,KAAK,EAAd,GAAoBA,EAApB,GAAyB,IAAhC;AACD;AACF,GAnBuC;AAAA,8BAyBtCb,KAzBsC,CAoBxCe,cApBwC;AAAA,MAoBxCA,cApBwC,sCAoBvB;AAAA,WAAO,EAAP;AAAA,GApBuB;AAAA,6BAyBtCf,KAzBsC,CAqBxCgB,aArBwC;AAAA,MAqBxCA,aArBwC,qCAqBxB,EArBwB;AAAA,2BAyBtChB,KAzBsC,CAsBxCiB,WAtBwC;AAAA,MAsBxCA,WAtBwC,mCAsB1B,IAtB0B;AAAA,4BAyBtCjB,KAzBsC,CAuBxCkB,YAvBwC;AAAA,MAuBxCA,YAvBwC,oCAuBzB,CAvByB;AAAA,6BAyBtClB,KAzBsC,CAwBxCmB,aAxBwC;AAAA,MAwBxCA,aAxBwC,qCAwBxB,CAxBwB;;AA2B1C,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACb,GAAD,EAAS;AAC5B,QAAIJ,cAAc,CAACI,GAAD,CAAlB,EAAyB;AACvBD,MAAAA,QAAQ,CAACC,GAAD,CAAR;AACA;AACD;AACF,GALD;;AAOA,SACE,MAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAEN,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAEC,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwCE,KAAxC,CADF,EAEE,MAAC,GAAD;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAEc,YAAT;AAAuB,IAAA,SAAS,EAAC,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD,CAAM,OAAN;AACE,IAAA,EAAE,EAAC,QADL;AAEE,IAAA,YAAY,EAAC,EAFf;AAGE,IAAA,QAAQ,EAAE,kBAACG,KAAD;AAAA,aAAWD,YAAY,CAACC,KAAK,CAACC,MAAN,CAAaR,KAAd,CAAvB;AAAA,KAHZ;AAIE,IAAA,QAAQ,EAAEL,UAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME;AACE,IAAA,KAAK,EAAE;AAAEc,MAAAA,OAAO,EAAE;AAAX,KADT;AAEE,IAAA,GAAG,EAAE,iBAFP;AAGE,IAAA,KAAK,EAAE,EAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGZ,WALH,CANF,EAaGD,iBAAiB,CAACc,MAAlB,CAAyB,UAAAX,EAAE;AAAA,WAAI,EAACA,EAAD,aAACA,EAAD,uBAACA,EAAE,CAAEY,QAAL,CAAJ;AAAA,GAA3B,EAA8CC,GAA9C,CAAkD,UAAAb,EAAE;AAAA,WAAI;AACvD,MAAA,KAAK,EAAEE,cAAc,CAACF,EAAD,CADkC;AAEvD,MAAA,GAAG,EAAE,CAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE,CAAEC,KAAJ,IAAYD,EAAZ,aAAYA,EAAZ,uBAAYA,EAAE,CAAEC,KAAhB,GAAwBD,EAF0B;AAGvD,MAAA,KAAK,EAAED,cAAc,CAACC,EAAD,CAHkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKtD,CAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE,CAAET,KAAJ,IAAYS,EAAZ,aAAYA,EAAZ,uBAAYA,EAAE,CAAET,KAAhB,GAAwBS,EAL8B,CAAJ;AAAA,GAApD,CAbH,CADF,CADF,EAyBE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAEM,aAAT;AAAwB,IAAA,SAAS,EAAC,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIH,aAAa,IAAIA,aAAa,CAACW,MAAd,GAAuB,CAAzC,IACC,MAAC,GAAD;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAa,IAAA,SAAS,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Bb,aAA9B,CADH,EAEGA,aAAa,CAACU,GAAd,CAAkB,UAAAI,GAAG;AAAA,WACpB,MAAC,KAAD;AACE,MAAA,OAAO,EAAC,MADV;AAEE,MAAA,SAAS,EAAC,MAFZ;AAGE,MAAA,GAAG,EAAEA,GAAG,CAAChB,KAAJ,GAAYgB,GAAG,CAAChB,KAAhB,GAAwBgB,GAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGA,GAAG,CAAC1B,KAAJ,GAAY0B,GAAG,CAAC1B,KAAhB,GAAwB0B,GAL3B,EAME,MAAC,MAAD;AACE,MAAA,IAAI,EAAC,IADP;AAEE,MAAA,OAAO,EAAC,QAFV;AAGE,MAAA,SAAS,EAAC,UAHZ;AAIE,MAAA,KAAK,EAAE;AACLC,QAAAA,UAAU,EAAE,GADP;AAELC,QAAAA,MAAM,EAAE,MAFH;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAJT;AASE,MAAA,OAAO,EAAE;AAAA,eAAMzB,QAAQ,CAAC,CAAAsB,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEhB,KAAL,IAAagB,GAAG,CAAChB,KAAjB,GAAyBgB,GAA1B,CAAd;AAAA,OATX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWE;AACE,MAAA,SAAS,EAAC,kBADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CANF,CADoB;AAAA,GAArB,CAFH,CADF,EA4BE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAY,IAAA,SAAS,EAAC,sBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,OAAO,EAAC,QADV;AAEE,IAAA,IAAI,EAAC,IAFP;AAGE,IAAA,OAAO,EAAEb,WAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AAAG,IAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,CA5BF,CAFJ,CAzBF,CAFF,EAsEGZ,SAAS,IAAI,MAAC,IAAD,CAAM,IAAN;AAAW,IAAA,SAAS,EAAC,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACXA,SADW,CAtEhB,CADF;AA4ED,CA9GM;AAgHP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;KA7KaN,W","sourcesContent":["import {\n  Form,\n  Row,\n  Col,\n  Badge,\n  Button\n} from 'react-bootstrap'\n\n\nexport const MultiSelect = function (props) {\n\n  const {\n    formGroupClass = \"\",\n    formLabelClass = \"\",\n    validationFunc = () => true,\n    label = \"\",\n    textmuted = false,\n    onChange = val => val,\n    onRemove,\n    isDisabled = false,\n    selectableOptions = [],\n    placeholder,\n    getOptionValue = el => {\n      if (el?.label && el?.value) {\n        return el.value\n      } else {\n        return (el && el !== \"\") ? el : null\n      }\n    },\n    getOptionStyle = () => ({}),\n    selectedItems = [],\n    onRemoveAll = null,\n    firstColSpan = 6,\n    secondColSpan = 6\n  } = props\n\n  const handleChange = (val) => {\n    if (validationFunc(val)) {\n      onChange(val)\n      return\n    }\n  }\n\n  return (\n    <Form.Group className={formGroupClass}>\n      <Form.Label className={formLabelClass}>{label}</Form.Label>\n      <Row className=\"w-100 ml-0 mr-0\">\n        <Col md={firstColSpan} className=\"pl-1 pr-1\">\n          <Form.Control\n            as=\"select\"\n            defaultValue=\"\"\n            onChange={(event) => handleChange(event.target.value)}\n            disabled={isDisabled}\n          >\n            <option\n              style={{ display: \"none !important\" }}\n              key={\"empty-value-key\"}\n              value={\"\"}\n            >\n              {placeholder}\n            </option>\n            {selectableOptions.filter(el => !el?.selected).map(el => <option\n              style={getOptionStyle(el)}\n              key={el?.value ? el?.value : el}\n              value={getOptionValue(el)}\n            >\n              {el?.label ? el?.label : el}\n            </option>\n            )}\n          </Form.Control>\n        </Col>\n        <Col md={secondColSpan} className=\"pl-1 pr-1\">\n          {(selectedItems && selectedItems.length > 0) &&\n            <Row className=\"w-100 ml-0 mr-0\">\n              <Col md={10} className=\"pl-0 pr-0\">\n                {console.log(\"selectedItems:\", selectedItems)}\n                {selectedItems.map(opt => (\n                  <Badge\n                    variant=\"info\"\n                    className=\"mr-1\"\n                    key={opt.value ? opt.value : opt}\n                  >\n                    {opt.label ? opt.label : opt}\n                    <Button\n                      size=\"sm\"\n                      variant=\"danger\"\n                      className=\"ml-1 p-0\"\n                      style={{\n                        lineHeight: \"1\",\n                        height: \"16px\",\n                        width: \"16px\",\n                      }}\n                      onClick={() => onRemove(opt?.value ? opt.value : opt)}\n                    >\n                      <i\n                        className=\"fas fa-times p-0\"\n                      ></i>\n                    </Button>\n                  </Badge>\n                ))}\n              </Col>\n              <Col md={2} className=\"pl-0 pr-0 text-right\">\n                <Button\n                  variant=\"danger\"\n                  size=\"sm\"\n                  onClick={onRemoveAll}\n                >\n                  <i className=\"fas fa-trash\"></i>\n                </Button>\n              </Col>\n            </Row>\n          }\n        </Col>\n      </Row>\n      {textmuted && <Form.Text className=\"text-muted\">\n        {textmuted}\n      </Form.Text>}\n    </Form.Group>\n  )\n}\n\n/*\n------------------------------[STATE]------------------------------\n\nconst [multiSelectVal, setMultiSelectVal] = useState(\"\")\n  const [optionsList, setOptionsList] = useState([\n    { value: \"blue\", label: \"Blue\", selected: false },\n    { value: \"red\", label: \"Red\", selected: false },\n    { value: \"green\", label: \"Green\", selected: false },\n    { value: \"cyan\", label: \"Cyan\", selected: false },\n  ])\n\n  const handleChangeMultiSelectVal = (val) => {\n    if (multiSelectVal === \"\") {\n      console.log(\"handleChangeSelectVal - empty string case - val: \", val)\n      const valObject = optionsList.find(opt => opt.value === val)\n      setMultiSelectVal([valObject])\n    } else {\n      console.log(\"handleChangeSelectVal - array case - val: \", val)\n      const valObject = optionsList.find(opt => opt.value === val)\n      setMultiSelectVal([valObject])\n      setMultiSelectVal([...multiSelectVal, valObject])\n    }\n    //setto selected a true\n    setOptionsList([...optionsList].map(opt => {\n      if (opt.value === val) {\n        opt.selected = !opt.selected\n      }\n      return opt\n    }))\n  }\n\n  const handleRemoveMultiSelectVal = (val) => {\n    console.log(\"handleRemoveMultiSelectVal - val:\", val)\n    const updatedMultiSelectVal = [...multiSelectVal].filter(el => el.value !== val)\n    setMultiSelectVal(updatedMultiSelectVal)\n    //setto selected a false\n    setOptionsList([...optionsList].map(opt => {\n      if (opt.value === val) {\n        opt.selected = !opt.selected\n      }\n      return opt\n    }))\n  }\n\n------------------------------[RETURN]------------------------------\n\n <MultiSelect\n  //formGroupClass={\"mt-5\"}\n  //formLabelClass={\"mt-5\"}\n  validationFunc={() => true}\n  label={\"label\"}\n  textmuted={\"text muted\"}\n  onChange={handleChangeMultiSelectVal}\n  onRemove={handleRemoveMultiSelectVal}\n  isDisabled={false}\n  selectableOptions={optionsList}\n  placeholder={\"-\"}\n  //getOptionValue={col => col}\n  //getOptionStyle={col => ({ color: `${col} !important` })}\n  selectedItems={multiSelectVal}\n/>\n*/"]},"metadata":{},"sourceType":"module"}