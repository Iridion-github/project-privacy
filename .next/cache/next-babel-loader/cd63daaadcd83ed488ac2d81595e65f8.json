{"ast":null,"code":"var _jsxFileName = \"/home/iridion/Desktop/Repos/Freelancer/project-privacy/pages/recensioniBibliografiche/[reviewId].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../../styles/Home.module.css';\nimport { useLanguage } from '../../context/siteLanguageContext'; //context\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { Row, Col } from 'react-bootstrap';\nimport { Header } from '../../components/layout/Header';\nimport { Navigation } from '../../components/layout/Navbar';\nimport { Breadcrumbs } from '../../components/layout/Breadcrumbs';\nimport { Footer } from '../../components/layout/Footer';\nimport { ReviewRead } from \"../../components/reviews/ReviewRead\";\nimport { ReviewReadRightPanel } from \"../../components/reviews/ReviewReadRightPanel\";\nimport { getBreadcrumbsForReviews } from '../../utils/reviews';\nimport { getBreadcrumbsForErrors } from '../../utils/errors';\nimport { ErrorComponent } from '../../components/layout/ErrorComponent';\n\nfunction recensione({\n  glossarywords,\n  DBreviews\n}) {\n  const siteLanguage = useLanguage(); //context\n\n  const router = useRouter();\n  const {\n    reviewId\n  } = router.query;\n  const {\n    0: reviews,\n    1: setReviews\n  } = useState(DBreviews);\n  const {\n    0: openedReview,\n    1: setOpenedReview\n  } = useState(reviewId);\n\n  const handleOpenedReview = id => {\n    const fullRoute = id !== null ? '/recensioniBibliografiche/' + id : '/recensioniBibliografiche/';\n    router.push(fullRoute);\n    setOpenedReview(id);\n  };\n\n  useEffect(() => {\n    if (reviews.length === 0) {\n      console.log(\"useEffect - reviews is empty!\");\n\n      if (DBreviews.map(el => el.id).includes(reviewId)) {\n        setOpenedReview(reviewId);\n      }\n    }\n  });\n  return __jsx(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, __jsx(Header, {\n    title: siteLanguage === \"ita\" ? \"Recensioni\" : \"Reviews\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }), __jsx(Navigation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), openedReview && reviews.length > 0 && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForReviews(openedReview, reviews.find(art => art.id === openedReview)[siteLanguage].title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), reviews.length === 0 && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForErrors({\n      ita: \"Recensione inesistente\",\n      eng: \"No such review\"\n    }, \"/recensioniBibliografiche\", siteLanguage),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), __jsx(\"main\", {\n    className: styles.main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, !openedReview && __jsx(ErrorComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }), __jsx(Row, {\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    md: 3,\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }), openedReview && reviews.length > 0 && __jsx(React.Fragment, null, __jsx(Col, {\n    md: 6,\n    className: \"justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  }, __jsx(ReviewRead, {\n    review: reviews.find(art => art.id === openedReview),\n    allReviews: reviews,\n    setOpenedReview: handleOpenedReview,\n    glossarywords: glossarywords,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  })), __jsx(Col, {\n    md: 3,\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }, __jsx(ReviewReadRightPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }))))), __jsx(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }));\n}\n\nrecensione.getInitialProps = async context => {\n  const getReviewId = async rawStr => {\n    let reviewId = rawStr.split('/recensioniBibliografiche/')[1];\n\n    if (reviewId.includes('/')) {\n      reviewId = reviewId.split('/')[1].split('/')[1];\n    }\n\n    return reviewId;\n  };\n\n  let propsObj = {\n    DBreviews: [],\n    glossarywords: []\n  };\n\n  if (!context.req) {\n    const reviewId = await getReviewId(context.asPath);\n\n    if (location.href.includes(\"recensioniBibliografiche/\")) {\n      location.replace(reviewId);\n    } else {\n      location.replace(\"recensioniBibliografiche/\" + reviewId);\n    }\n  } else {\n    const apiUrlGlossary = \"http://\" + context.req.headers.host + \"/api/glossaryword\";\n    const resGlossaryword = await fetch(apiUrlGlossary);\n    const glossarywords = await resGlossaryword.json();\n    const apiUrlReview = \"http://\" + context.req.headers.host + \"/api/review\";\n    const resReview = await fetch(apiUrlReview);\n    const DBreviews = await resReview.json();\n    propsObj = {\n      DBreviews: DBreviews.data,\n      glossarywords: glossarywords.data\n    };\n  }\n\n  return propsObj;\n};\n\nexport default recensione;\n/* //Rimozione di getServerSideProps per deployare su Firebase\nexport async function getServerSideProps(context) {\n  const apiUrlGlossary = \"http://\" + context.req.headers.host + \"/api/glossaryword\"\n  const resGlossaryword = await fetch(apiUrlGlossary)\n  const glossarywords = await resGlossaryword.json()\n  const apiUrlReview = \"http://\" + context.req.headers.host + \"/api/review\"\n  const resReview = await fetch(apiUrlReview)\n  const DBreviews = await resReview.json()\n  return { props: { DBreviews: DBreviews.data, glossarywords: glossarywords.data } }\n}\n*/","map":{"version":3,"sources":["/home/iridion/Desktop/Repos/Freelancer/project-privacy/pages/recensioniBibliografiche/[reviewId].js"],"names":["styles","useLanguage","useState","useEffect","useRouter","Row","Col","Header","Navigation","Breadcrumbs","Footer","ReviewRead","ReviewReadRightPanel","getBreadcrumbsForReviews","getBreadcrumbsForErrors","ErrorComponent","recensione","glossarywords","DBreviews","siteLanguage","router","reviewId","query","reviews","setReviews","openedReview","setOpenedReview","handleOpenedReview","id","fullRoute","push","length","console","log","map","el","includes","container","find","art","title","ita","eng","main","getInitialProps","context","getReviewId","rawStr","split","propsObj","req","asPath","location","href","replace","apiUrlGlossary","headers","host","resGlossaryword","fetch","json","apiUrlReview","resReview","data"],"mappings":"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","sourcesContent":["import styles from '../../styles/Home.module.css'\nimport { useLanguage } from '../../context/siteLanguageContext' //context\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport {\n  Row,\n  Col\n} from 'react-bootstrap'\nimport { Header } from '../../components/layout/Header'\nimport { Navigation } from '../../components/layout/Navbar'\nimport { Breadcrumbs } from '../../components/layout/Breadcrumbs'\nimport { Footer } from '../../components/layout/Footer'\nimport { ReviewRead } from \"../../components/reviews/ReviewRead\"\nimport { ReviewReadRightPanel } from \"../../components/reviews/ReviewReadRightPanel\"\nimport { getBreadcrumbsForReviews } from '../../utils/reviews'\nimport { getBreadcrumbsForErrors } from '../../utils/errors'\nimport { ErrorComponent } from '../../components/layout/ErrorComponent'\n\nfunction recensione({ glossarywords, DBreviews }) {\n  const siteLanguage = useLanguage() //context\n  const router = useRouter()\n  const { reviewId } = router.query\n  const [reviews, setReviews] = useState(DBreviews)\n  const [openedReview, setOpenedReview] = useState(reviewId)\n\n  const handleOpenedReview = (id) => {\n    const fullRoute = id !== null ? '/recensioniBibliografiche/' + id : '/recensioniBibliografiche/'\n    router.push(fullRoute)\n    setOpenedReview(id)\n  }\n\n  useEffect(() => {\n    if (reviews.length === 0) {\n      console.log(\"useEffect - reviews is empty!\")\n      if (DBreviews.map(el => el.id).includes(reviewId)) {\n        setOpenedReview(reviewId)\n      }\n    }\n  })\n\n  return (\n    <div className={styles.container}>\n      <Header\n        title={siteLanguage === \"ita\" ? \"Recensioni\" : \"Reviews\"}\n      />\n      {/* Navbar */}\n      <Navigation />\n      {(openedReview && reviews.length > 0) &&\n        <Breadcrumbs\n          breadcrumbsList={getBreadcrumbsForReviews(openedReview, reviews.find(art => art.id === openedReview)[siteLanguage].title)}\n        />\n      }\n      {reviews.length === 0 &&\n        <Breadcrumbs\n          breadcrumbsList={getBreadcrumbsForErrors({ ita: \"Recensione inesistente\", eng: \"No such review\" }, \"/recensioniBibliografiche\", siteLanguage)}\n        />\n      }\n      {/* Page Content */}\n      <main className={styles.main}>\n        {!openedReview &&\n          <ErrorComponent />\n        }\n        <Row className=\"w-100\">\n          <Col md={3} className=\"\">\n          </Col>\n          {(openedReview && reviews.length > 0) &&\n            <>\n              <Col md={6} className=\"justify-content-center\">\n                <ReviewRead\n                  review={reviews.find(art => art.id === openedReview)}\n                  allReviews={reviews}\n                  setOpenedReview={handleOpenedReview}\n                  glossarywords={glossarywords}\n                />\n              </Col>\n              <Col md={3} className=\"\">\n                <ReviewReadRightPanel />\n              </Col>\n            </>\n          }\n        </Row>\n      </main>\n      {/* Footer */}\n      <Footer />\n    </div>\n  )\n}\n\nrecensione.getInitialProps = async (context) => {\n\n  const getReviewId = async (rawStr) => {\n    let reviewId = rawStr.split('/recensioniBibliografiche/')[1]\n    if (reviewId.includes('/')) {\n      reviewId = reviewId.split('/')[1].split('/')[1]\n    }\n    return reviewId\n  }\n\n  let propsObj = { DBreviews: [], glossarywords: [] }\n  if (!context.req) {\n    const reviewId = await getReviewId(context.asPath)\n    if (location.href.includes(\"recensioniBibliografiche/\")) {\n      location.replace(reviewId)\n    } else {\n      location.replace(\"recensioniBibliografiche/\" + reviewId)\n    }\n  } else {\n    const apiUrlGlossary = \"http://\" + context.req.headers.host + \"/api/glossaryword\"\n    const resGlossaryword = await fetch(apiUrlGlossary)\n    const glossarywords = await resGlossaryword.json()\n    const apiUrlReview = \"http://\" + context.req.headers.host + \"/api/review\"\n    const resReview = await fetch(apiUrlReview)\n    const DBreviews = await resReview.json()\n    propsObj = { DBreviews: DBreviews.data, glossarywords: glossarywords.data }\n  }\n  return propsObj\n}\n\nexport default recensione\n\n/* //Rimozione di getServerSideProps per deployare su Firebase\nexport async function getServerSideProps(context) {\n  const apiUrlGlossary = \"http://\" + context.req.headers.host + \"/api/glossaryword\"\n  const resGlossaryword = await fetch(apiUrlGlossary)\n  const glossarywords = await resGlossaryword.json()\n  const apiUrlReview = \"http://\" + context.req.headers.host + \"/api/review\"\n  const resReview = await fetch(apiUrlReview)\n  const DBreviews = await resReview.json()\n  return { props: { DBreviews: DBreviews.data, glossarywords: glossarywords.data } }\n}\n*/"]},"metadata":{},"sourceType":"module"}