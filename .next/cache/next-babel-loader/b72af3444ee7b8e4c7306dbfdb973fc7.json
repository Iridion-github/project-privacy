{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/home/iridion/Desktop/Repos/Freelancer/project-privacy/components/archive/ui/CustomAutoSuggest.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Row, Col, Form, ButtonGroup, Button, Badge } from 'react-bootstrap';\nimport { useEffect, useState } from 'react';\nexport var CustomAutoSuggest = function CustomAutoSuggest(props) {\n  _s();\n\n  var _this = this;\n\n  var _props$formGroupClass = props.formGroupClass,\n      formGroupClass = _props$formGroupClass === void 0 ? \"\" : _props$formGroupClass,\n      _props$formGroupLabel = props.formGroupLabel,\n      formGroupLabel = _props$formGroupLabel === void 0 ? \"\" : _props$formGroupLabel,\n      _props$formLabelClass = props.formLabelClass,\n      formLabelClass = _props$formLabelClass === void 0 ? \"\" : _props$formLabelClass,\n      _props$formGroupId = props.formGroupId,\n      formGroupId = _props$formGroupId === void 0 ? \"\" : _props$formGroupId,\n      _props$formGroupStyle = props.formGroupStyle,\n      formGroupStyle = _props$formGroupStyle === void 0 ? {} : _props$formGroupStyle,\n      _props$validationFunc = props.validationFunc,\n      validationFunc = _props$validationFunc === void 0 ? function () {\n    return true;\n  } : _props$validationFunc,\n      _props$type = props.type,\n      type = _props$type === void 0 ? \"\" : _props$type,\n      _props$label = props.label,\n      label = _props$label === void 0 ? \"\" : _props$label,\n      _props$textmuted = props.textmuted,\n      textmuted = _props$textmuted === void 0 ? false : _props$textmuted,\n      _props$suggestions = props.suggestions,\n      suggestions = _props$suggestions === void 0 ? [] : _props$suggestions,\n      _props$shownSuggestio = props.shownSuggestions,\n      shownSuggestions = _props$shownSuggestio === void 0 ? [] : _props$shownSuggestio,\n      _props$renderSuggesti = props.renderSuggestion,\n      renderSuggestion = _props$renderSuggesti === void 0 ? function (item) {\n    return item.value ? item.value : item;\n  } : _props$renderSuggesti,\n      _props$onSuggestionCl = props.onSuggestionClick,\n      onSuggestionClick = _props$onSuggestionCl === void 0 ? function () {} : _props$onSuggestionCl,\n      _props$getSuggestionV = props.getSuggestionValue,\n      getSuggestionValue = _props$getSuggestionV === void 0 ? null : _props$getSuggestionV,\n      _props$onChange = props.onChange,\n      onChange = _props$onChange === void 0 ? function (val) {\n    return val;\n  } : _props$onChange,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n      _props$selectableOpti = props.selectableOptions,\n      selectableOptions = _props$selectableOpti === void 0 ? [] : _props$selectableOpti,\n      _props$value = props.value,\n      value = _props$value === void 0 ? \"\" : _props$value,\n      placeholder = props.placeholder,\n      _props$getOptionValue = props.getOptionValue,\n      getOptionValue = _props$getOptionValue === void 0 ? function (el) {\n    return el && el !== \"\" ? el : null;\n  } : _props$getOptionValue,\n      _props$getOptionStyle = props.getOptionStyle,\n      getOptionStyle = _props$getOptionStyle === void 0 ? function () {\n    return {};\n  } : _props$getOptionStyle,\n      _props$autoSuggestIte = props.autoSuggestItems,\n      autoSuggestItems = _props$autoSuggestIte === void 0 ? [] : _props$autoSuggestIte,\n      _props$onRevealSugges = props.onRevealSuggestions,\n      onRevealSuggestions = _props$onRevealSugges === void 0 ? null : _props$onRevealSugges,\n      _props$onRemove = props.onRemove,\n      onRemove = _props$onRemove === void 0 ? null : _props$onRemove,\n      _props$onRemoveAll = props.onRemoveAll,\n      onRemoveAll = _props$onRemoveAll === void 0 ? null : _props$onRemoveAll,\n      _props$isTriggeredOnF = props.isTriggeredOnFocus,\n      isTriggeredOnFocus = _props$isTriggeredOnF === void 0 ? true : _props$isTriggeredOnF;\n\n  var _useState = useState(false),\n      isFocused = _useState[0],\n      setIsFocused = _useState[1];\n\n  var _useState2 = useState(false),\n      isListOpen = _useState2[0],\n      setIsListOpen = _useState2[1];\n\n  var basicStyle = {};\n\n  var handleAutosuggestChange = function handleAutosuggestChange(event) {\n    if (validationFunc(event.target.value)) {\n      onRevealSuggestions(event.target.value);\n\n      if (event.target.value.length >= 3) {\n        setIsListOpen(true);\n      } else {\n        setIsListOpen(false);\n      }\n\n      onChange(event.target.value);\n    } else {\n      return;\n    }\n  };\n\n  var handleAutosuggestClick = function handleAutosuggestClick(item) {\n    onSuggestionClick(getSuggestionValue ? getSuggestionValue(item) : item);\n    disableFocus();\n  };\n\n  var enableFocus = function enableFocus() {\n    setIsFocused(true);\n  };\n\n  var disableFocus = function disableFocus() {\n    setIsFocused(false);\n  };\n\n  useEffect(function () {//console.log(\"AutoSuggest state has changed - props: \", props)\n  });\n  return __jsx(Form.Group, {\n    controlId: \"customAutosuggest_\" + formGroupId,\n    className: formGroupClass + \" form-with-on-blur\",\n    style: formGroupStyle ? _objectSpread(_objectSpread({}, basicStyle), formGroupStyle) : basicStyle,\n    onBlur: disableFocus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, __jsx(Form.Label, {\n    className: formLabelClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, formGroupLabel), __jsx(Row, {\n    className: \"w-100 ml-0 mr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    md: 6,\n    className: \"pl-1 pr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    className: \"w-100 ml-0 mr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    md: 12,\n    className: \"pl-1 pr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, __jsx(Form.Control, {\n    type: type,\n    placeholder: placeholder,\n    onChange: function onChange(event) {\n      return handleAutosuggestChange(event);\n    },\n    value: value,\n    onMouseDown: enableFocus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  })))), __jsx(Col, {\n    md: 6,\n    className: \"pl-1 pr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, autoSuggestItems && autoSuggestItems.length > 0 && __jsx(Row, {\n    className: \"w-100 ml-0 mr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, __jsx(Col, {\n    md: 10,\n    className: \"pl-0 pr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  }, autoSuggestItems.map(function (item) {\n    return __jsx(Badge, {\n      variant: \"info\",\n      className: \"mr-1\",\n      key: item.value ? item.value : item[Object.keys(item)[0]],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 19\n      }\n    }, item.label ? item.label : item[Object.keys(item)[0]], __jsx(Button, {\n      size: \"sm\",\n      variant: \"danger\",\n      className: \"ml-1 p-0\",\n      style: {\n        lineHeight: \"1\",\n        height: \"16px\",\n        width: \"16px\"\n      },\n      onMouseDown: function onMouseDown() {\n        return onRemove((item === null || item === void 0 ? void 0 : item.value) ? item.value : item);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, __jsx(\"i\", {\n      className: \"fas fa-times p-0\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 23\n      }\n    })));\n  })), __jsx(Col, {\n    md: 2,\n    className: \"pl-0 pr-0 text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    variant: \"danger\",\n    size: \"sm\",\n    onClick: onRemoveAll,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, __jsx(\"i\", {\n    className: \"fas fa-trash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 19\n    }\n  })))))), __jsx(Row, {\n    className: \"auto-suggest-list-container w-100 text-center ml-0 mr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, isListOpen && shownSuggestions.length > 0 && isFocused && props.shownSuggestions.map(function (sugg, i) {\n    return __jsx(Row, {\n      className: \"w-100 pl-0 pr-0 ml-0 mr-0\",\n      key: i,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, __jsx(Col, {\n      md: 12,\n      className: \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 15\n      }\n    }, __jsx(Button, {\n      block: true,\n      size: \"sm\",\n      variant: \"outline-info\",\n      onMouseDown: function onMouseDown() {\n        return handleAutosuggestClick(sugg);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }, props.renderSuggestion(sugg))));\n  })), textmuted && __jsx(Form.Text, {\n    className: \"text-muted pl-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }, textmuted));\n};\n/*\n------------------------------[STATE]------------------------------\nconst suggestionsFromDb = [\n    {\n      id: 0,\n      nome: \"alfredo\",\n      cognome: \"mantovani\",\n      telefono: \"000000001\"\n    },\n    {\n      id: 1,\n      nome: \"mario\",\n      cognome: \"rossi\",\n      telefono: \"000000002\"\n    },\n    {\n      id: 2,\n      nome: \"giovanni\",\n      cognome: \"storti\",\n      telefono: \"000000002\"\n    },\n    {\n      id: 3,\n      nome: \"giacomo\",\n      cognome: \"poretti\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 5,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 6,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 7,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 8,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 9,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 10,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    }\n  ]\n\n  const filterFunction = (option, inputVal) => {\n    if (\n      option.cognome.toLowerCase().includes(inputVal.toLowerCase())\n      || option.nome.toLowerCase().includes(inputVal.toLowerCase())\n    ) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  const [suggestions, setSuggestions] = useState(suggestionsFromDb)\n\n  const [shownSuggestions, setShownSuggestions] = useState([])\n\n\n  const [autoSuggestValue, setAutoSuggestValue] = useState(\"\")\n  const [autoSuggestItems, setAutoSuggestItems] = useState([])\n\n  const onChangeAutosuggestValue = (val) => {\n    setAutoSuggestValue(val)\n  }\n\n  const AutosuggestItemsInsert = (val) => {\n    setAutoSuggestItems([...autoSuggestItems, val])\n  }\n\n  const handleFilterOptions = (suggestions, inputVal) => {\n    const filteredSuggestions = [...suggestions].filter(opt => filterFunction(opt, inputVal))\n    return filteredSuggestions\n  }\n\n  const handleRevealSuggestions = (inputVal) => {\n    const filteredSuggestions = handleFilterOptions(suggestions, inputVal)\n    setShownSuggestions(filteredSuggestions)\n  }\n\n  const AutosuggestItemsRemove = (val) => {\n    const filteredArr = [...autoSuggestItems].filter(items => items.id !== val.id)\n    setAutoSuggestItems(filteredArr)\n  }\n\n  const AutosuggestItemsRemoveAll = () => {\n    setAutoSuggestItems([])\n  }\n\n\n------------------------------[RETURN]------------------------------\n<CustomAutoSuggest\n            formGroupId=\"formGroupId\"\n            formGroupLabel=\"Prova Label\"\n            formGroupClassName=\"prova-class-name\"\n            type=\"text\"\n            placeholder=\"Prova placeholder\"\n            onChange={onChangeAutosuggestValue}\n            value={autoSuggestValue}\n            renderSuggestion={item => `${item.nome} | ${item.cognome}`}\n            suggestions={suggestions}\n            shownSuggestions={shownSuggestions}\n            onSuggestionClick={AutosuggestItemsInsert}\n            onRevealSuggestions={handleRevealSuggestions}\n            onRemove={AutosuggestItemsRemove}\n            onRemoveAll={AutosuggestItemsRemoveAll}\n            onSuggestionsClear={() => { }}\n            //getSuggestionValue={item => item.nome}\n            autoSuggestItems={autoSuggestItems}\n            //isTriggeredOnFocus={false}\n            textmuted={\"this is text muted\"}\n          />\n*/\n\n_s(CustomAutoSuggest, \"PiHaDtN02QnhqkLPjITJYyMqfMk=\");\n\n_c = CustomAutoSuggest;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomAutoSuggest\");","map":{"version":3,"sources":["/home/iridion/Desktop/Repos/Freelancer/project-privacy/components/archive/ui/CustomAutoSuggest.js"],"names":["Row","Col","Form","ButtonGroup","Button","Badge","useEffect","useState","CustomAutoSuggest","props","formGroupClass","formGroupLabel","formLabelClass","formGroupId","formGroupStyle","validationFunc","type","label","textmuted","suggestions","shownSuggestions","renderSuggestion","item","value","onSuggestionClick","getSuggestionValue","onChange","val","isDisabled","selectableOptions","placeholder","getOptionValue","el","getOptionStyle","autoSuggestItems","onRevealSuggestions","onRemove","onRemoveAll","isTriggeredOnFocus","isFocused","setIsFocused","isListOpen","setIsListOpen","basicStyle","handleAutosuggestChange","event","target","length","handleAutosuggestClick","disableFocus","enableFocus","map","Object","keys","lineHeight","height","width","sugg","i"],"mappings":"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AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,SAAS,EAAC,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAC,IAFP;AAGE,MAAA,OAAO,EAAC,cAHV;AAIE,MAAA,WAAW,EAAE;AAAA,eAAMV,sBAAsB,CAACS,IAAD,CAA5B;AAAA,OAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGhD,KAAK,CAACY,gBAAN,CAAuBoC,IAAvB,CANH,CADF,CADF,CADqF;AAAA,GAA3B,CAFhE,CA9DF,EAgFGvC,SAAS,IAAI,MAAC,IAAD,CAAM,IAAN;AAAW,IAAA,SAAS,EAAC,iBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACXA,SADW,CAhFhB,CADF;AAsFD,CAxJM;AA0JP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAhSaV,iB;;KAAAA,iB","sourcesContent":["import {\n  Row,\n  Col,\n  Form,\n  ButtonGroup,\n  Button,\n  Badge\n} from 'react-bootstrap'\nimport { useEffect, useState } from 'react'\n\n\nexport const CustomAutoSuggest = function (props) {\n\n  const {\n    formGroupClass = \"\",\n    formGroupLabel = \"\",\n    formLabelClass = \"\",\n    formGroupId = \"\",\n    formGroupStyle = {},\n    validationFunc = () => true,\n    type = \"\",\n    label = \"\",\n    textmuted = false,\n    suggestions = [],\n    shownSuggestions = [],\n    renderSuggestion = item => item.value ? item.value : item,\n    onSuggestionClick = () => { },\n    getSuggestionValue = null,\n    onChange = val => val,\n    isDisabled = false,\n    selectableOptions = [],\n    value = \"\",\n    placeholder,\n    getOptionValue = el => (el && el !== \"\") ? el : null,\n    getOptionStyle = () => ({}),\n    autoSuggestItems = [],\n    onRevealSuggestions = null,\n    onRemove = null,\n    onRemoveAll = null,\n    isTriggeredOnFocus = true,\n  } = props\n\n  const [isFocused, setIsFocused] = useState(false)\n  const [isListOpen, setIsListOpen] = useState(false)\n  const basicStyle = {}\n\n  const handleAutosuggestChange = (event) => {\n    if (validationFunc(event.target.value)) {\n      onRevealSuggestions(event.target.value)\n      if (event.target.value.length >= 3) {\n        setIsListOpen(true)\n      } else {\n        setIsListOpen(false)\n      }\n      onChange(event.target.value)\n    } else {\n      return\n    }\n  }\n\n  const handleAutosuggestClick = (item) => {\n    onSuggestionClick(getSuggestionValue ? getSuggestionValue(item) : item)\n    disableFocus()\n  }\n\n  const enableFocus = () => {\n    setIsFocused(true)\n  }\n\n  const disableFocus = () => {\n    setIsFocused(false)\n  }\n\n  useEffect(() => {\n    //console.log(\"AutoSuggest state has changed - props: \", props)\n  })\n\n  return (\n    <Form.Group\n      controlId={\"customAutosuggest_\" + formGroupId}\n      className={formGroupClass + \" form-with-on-blur\"}\n      style={formGroupStyle ? { ...basicStyle, ...formGroupStyle } : basicStyle}\n      onBlur={disableFocus}\n    >\n      <Form.Label className={formLabelClass}>{formGroupLabel}</Form.Label>\n      <Row className=\"w-100 ml-0 mr-0\">\n        <Col md={6} className=\"pl-1 pr-1\">\n          <Row className=\"w-100 ml-0 mr-0\">\n            <Col md={12} className=\"pl-1 pr-1\">\n              <Form.Control\n                type={type}\n                placeholder={placeholder}\n                onChange={(event) => handleAutosuggestChange(event)}\n                value={value}\n                onMouseDown={enableFocus}\n              />\n            </Col>\n          </Row>\n        </Col>\n        <Col md={6} className=\"pl-1 pr-1\">\n          {(autoSuggestItems && autoSuggestItems.length > 0) &&\n            <Row className=\"w-100 ml-0 mr-0\">\n              <Col md={10} className=\"pl-0 pr-0\">\n                {autoSuggestItems.map(item => (\n                  <Badge\n                    variant=\"info\"\n                    className=\"mr-1\"\n                    key={item.value ? item.value : item[Object.keys(item)[0]]}\n                  >\n                    {item.label ? item.label : item[Object.keys(item)[0]]}\n                    <Button\n                      size=\"sm\"\n                      variant=\"danger\"\n                      className=\"ml-1 p-0\"\n                      style={{\n                        lineHeight: \"1\",\n                        height: \"16px\",\n                        width: \"16px\",\n                      }}\n                      onMouseDown={() => onRemove(item?.value ? item.value : item)}\n                    >\n                      <i\n                        className=\"fas fa-times p-0\"\n                      ></i>\n                    </Button>\n                  </Badge>\n                ))}\n              </Col>\n              <Col md={2} className=\"pl-0 pr-0 text-right\">\n                <Button\n                  variant=\"danger\"\n                  size=\"sm\"\n                  onClick={onRemoveAll}\n                >\n                  <i className=\"fas fa-trash\"></i>\n                </Button>\n              </Col>\n            </Row>}\n        </Col>\n      </Row>\n      <Row className=\"auto-suggest-list-container w-100 text-center ml-0 mr-0\">\n        {\n          (isListOpen && shownSuggestions.length > 0 && isFocused) && props.shownSuggestions.map((sugg, i) => (\n            <Row className=\"w-100 pl-0 pr-0 ml-0 mr-0\" key={i}>\n              <Col md={12} className=\"\">\n                <Button\n                  block\n                  size=\"sm\"\n                  variant=\"outline-info\"\n                  onMouseDown={() => handleAutosuggestClick(sugg)}\n                >\n                  {props.renderSuggestion(sugg)}\n                </Button>\n              </Col>\n            </Row>\n          ))\n        }\n      </Row>\n      {textmuted && <Form.Text className=\"text-muted pl-5\">\n        {textmuted}\n      </Form.Text>}\n    </Form.Group>\n  )\n}\n\n/*\n------------------------------[STATE]------------------------------\nconst suggestionsFromDb = [\n    {\n      id: 0,\n      nome: \"alfredo\",\n      cognome: \"mantovani\",\n      telefono: \"000000001\"\n    },\n    {\n      id: 1,\n      nome: \"mario\",\n      cognome: \"rossi\",\n      telefono: \"000000002\"\n    },\n    {\n      id: 2,\n      nome: \"giovanni\",\n      cognome: \"storti\",\n      telefono: \"000000002\"\n    },\n    {\n      id: 3,\n      nome: \"giacomo\",\n      cognome: \"poretti\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 5,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 6,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 7,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 8,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 9,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 10,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    }\n  ]\n\n  const filterFunction = (option, inputVal) => {\n    if (\n      option.cognome.toLowerCase().includes(inputVal.toLowerCase())\n      || option.nome.toLowerCase().includes(inputVal.toLowerCase())\n    ) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  const [suggestions, setSuggestions] = useState(suggestionsFromDb)\n\n  const [shownSuggestions, setShownSuggestions] = useState([])\n\n\n  const [autoSuggestValue, setAutoSuggestValue] = useState(\"\")\n  const [autoSuggestItems, setAutoSuggestItems] = useState([])\n\n  const onChangeAutosuggestValue = (val) => {\n    setAutoSuggestValue(val)\n  }\n\n  const AutosuggestItemsInsert = (val) => {\n    setAutoSuggestItems([...autoSuggestItems, val])\n  }\n\n  const handleFilterOptions = (suggestions, inputVal) => {\n    const filteredSuggestions = [...suggestions].filter(opt => filterFunction(opt, inputVal))\n    return filteredSuggestions\n  }\n\n  const handleRevealSuggestions = (inputVal) => {\n    const filteredSuggestions = handleFilterOptions(suggestions, inputVal)\n    setShownSuggestions(filteredSuggestions)\n  }\n\n  const AutosuggestItemsRemove = (val) => {\n    const filteredArr = [...autoSuggestItems].filter(items => items.id !== val.id)\n    setAutoSuggestItems(filteredArr)\n  }\n\n  const AutosuggestItemsRemoveAll = () => {\n    setAutoSuggestItems([])\n  }\n\n\n------------------------------[RETURN]------------------------------\n<CustomAutoSuggest\n            formGroupId=\"formGroupId\"\n            formGroupLabel=\"Prova Label\"\n            formGroupClassName=\"prova-class-name\"\n            type=\"text\"\n            placeholder=\"Prova placeholder\"\n            onChange={onChangeAutosuggestValue}\n            value={autoSuggestValue}\n            renderSuggestion={item => `${item.nome} | ${item.cognome}`}\n            suggestions={suggestions}\n            shownSuggestions={shownSuggestions}\n            onSuggestionClick={AutosuggestItemsInsert}\n            onRevealSuggestions={handleRevealSuggestions}\n            onRemove={AutosuggestItemsRemove}\n            onRemoveAll={AutosuggestItemsRemoveAll}\n            onSuggestionsClear={() => { }}\n            //getSuggestionValue={item => item.nome}\n            autoSuggestItems={autoSuggestItems}\n            //isTriggeredOnFocus={false}\n            textmuted={\"this is text muted\"}\n          />\n*/"]},"metadata":{},"sourceType":"module"}