{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../../styles/Home.module.css';\nimport { useLanguage } from '../../context/siteLanguageContext'; //context\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { Row, Col } from 'react-bootstrap';\nimport { Header } from '../../components/layout/Header';\nimport { Navigation } from '../../components/layout/Navbar';\nimport { Breadcrumbs } from '../../components/layout/Breadcrumbs';\nimport { Footer } from '../../components/layout/Footer';\nimport { ReviewRead } from \"../../components/reviews/ReviewRead\";\nimport { ReviewReadRightPanel } from \"../../components/reviews/ReviewReadRightPanel\";\nimport { getBreadcrumbsForReviews } from '../../utils/reviews';\nimport { getBreadcrumbsForErrors } from '../../utils/errors';\nimport { ErrorComponent } from '../../components/layout/ErrorComponent';\n\nfunction recensione(_ref) {\n  var glossarywords = _ref.glossarywords,\n      DBreviews = _ref.DBreviews;\n  var siteLanguage = useLanguage(); //context\n\n  var router = useRouter();\n  var reviewId = router.query.reviewId;\n\n  var _useState = useState(DBreviews),\n      reviews = _useState[0],\n      setReviews = _useState[1];\n\n  var _useState2 = useState(reviewId),\n      openedReview = _useState2[0],\n      setOpenedReview = _useState2[1];\n\n  var handleOpenedReview = function handleOpenedReview(id) {\n    var fullRoute = id !== null ? '/recensioniBibliografiche/' + id : '/recensioniBibliografiche/';\n    router.push(fullRoute);\n    setOpenedReview(id);\n  };\n\n  useEffect(function () {\n    if (reviews.length === 0) {\n      if (DBreviews.map(function (el) {\n        return el.id;\n      }).includes(reviewId)) {\n        setOpenedReview(reviewId);\n      }\n    }\n  });\n  return __jsx(\"div\", {\n    className: styles.container\n  }, __jsx(Header, {\n    title: siteLanguage === \"ita\" ? \"Recensioni\" : \"Reviews\"\n  }), __jsx(Navigation, null), openedReview && reviews.length > 0 && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForReviews(openedReview, reviews.find(function (art) {\n      return art.id === openedReview;\n    })[siteLanguage].title)\n  }), reviews.length === 0 && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForErrors({\n      ita: \"Recensione inesistente\",\n      eng: \"No such review\"\n    }, \"/recensioniBibliografiche\", siteLanguage)\n  }), __jsx(\"main\", {\n    className: styles.main\n  }, !openedReview && __jsx(ErrorComponent, null), __jsx(Row, {\n    className: \"w-100\"\n  }, __jsx(Col, {\n    md: 3,\n    className: \"\"\n  }), openedReview && reviews.length > 0 && __jsx(React.Fragment, null, __jsx(Col, {\n    md: 6,\n    className: \"justify-content-center\"\n  }, __jsx(ReviewRead, {\n    review: reviews.find(function (art) {\n      return art.id === openedReview;\n    }),\n    allReviews: reviews,\n    setOpenedReview: handleOpenedReview,\n    glossarywords: glossarywords\n  })), __jsx(Col, {\n    md: 3,\n    className: \"\"\n  }, __jsx(ReviewReadRightPanel, null))))), __jsx(Footer, null));\n}\n\nrecensione.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(context) {\n    var getReviewId, propsObj, reviewId, apiUrlGlossary, resGlossaryword, glossarywords, apiUrlReview, resReview, DBreviews;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            getReviewId = /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(rawStr) {\n                var reviewId;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        reviewId = rawStr.split('/recensioniBibliografiche/')[1];\n\n                        if (reviewId.includes('/')) {\n                          reviewId = reviewId.split('/')[1].split('/')[1];\n                        }\n\n                        return _context.abrupt(\"return\", reviewId);\n\n                      case 3:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function getReviewId(_x2) {\n                return _ref3.apply(this, arguments);\n              };\n            }();\n\n            propsObj = {\n              DBreviews: [],\n              glossarywords: []\n            };\n\n            if (context.req) {\n              _context2.next = 9;\n              break;\n            }\n\n            _context2.next = 5;\n            return getReviewId(context.asPath);\n\n          case 5:\n            reviewId = _context2.sent;\n\n            if (location.href.includes(\"recensioniBibliografiche/\")) {\n              location.replace(reviewId);\n            } else {\n              location.replace(\"recensioniBibliografiche/\" + reviewId);\n            }\n\n            _context2.next = 24;\n            break;\n\n          case 9:\n            apiUrlGlossary = \"http://\" + context.req.headers.host + \"/api/glossaryword\";\n            _context2.next = 12;\n            return fetch(apiUrlGlossary);\n\n          case 12:\n            resGlossaryword = _context2.sent;\n            _context2.next = 15;\n            return resGlossaryword.json();\n\n          case 15:\n            glossarywords = _context2.sent;\n            apiUrlReview = \"http://\" + context.req.headers.host + \"/api/review\";\n            _context2.next = 19;\n            return fetch(apiUrlReview);\n\n          case 19:\n            resReview = _context2.sent;\n            _context2.next = 22;\n            return resReview.json();\n\n          case 22:\n            DBreviews = _context2.sent;\n            propsObj = {\n              DBreviews: DBreviews.data,\n              glossarywords: glossarywords.data\n            };\n\n          case 24:\n            return _context2.abrupt(\"return\", propsObj);\n\n          case 25:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default recensione;\n/* //Rimozione di getServerSideProps per deployare su Firebase\nexport async function getServerSideProps(context) {\n  const apiUrlGlossary = \"http://\" + context.req.headers.host + \"/api/glossaryword\"\n  const resGlossaryword = await fetch(apiUrlGlossary)\n  const glossarywords = await resGlossaryword.json()\n  const apiUrlReview = \"http://\" + context.req.headers.host + \"/api/review\"\n  const resReview = await fetch(apiUrlReview)\n  const DBreviews = await resReview.json()\n  return { props: { DBreviews: DBreviews.data, glossarywords: glossarywords.data } }\n}\n*/","map":null,"metadata":{},"sourceType":"module"}