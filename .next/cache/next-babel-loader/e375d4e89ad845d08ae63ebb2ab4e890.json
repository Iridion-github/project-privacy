{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/iridion/Desktop/Repos/Freelancer/project-privacy/pages/recensioniBibliografiche/[reviewId].js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../../styles/Home.module.css';\nimport { useLanguage } from '../../context/siteLanguageContext'; //context\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { Row, Col } from 'react-bootstrap';\nimport { Header } from '../../components/layout/Header';\nimport { Navigation } from '../../components/layout/Navbar';\nimport { Breadcrumbs } from '../../components/layout/Breadcrumbs';\nimport { Footer } from '../../components/layout/Footer';\nimport { ReviewRead } from \"../../components/reviews/ReviewRead\";\nimport { ReviewReadRightPanel } from \"../../components/reviews/ReviewReadRightPanel\";\nimport { getBreadcrumbsForReviews } from '../../utils/reviews';\nimport { getBreadcrumbsForErrors } from '../../utils/errors';\nimport { ErrorComponent } from '../../components/layout/ErrorComponent';\n\nfunction recensione(_ref) {\n  _s();\n\n  var glossarywords = _ref.glossarywords,\n      DBreviews = _ref.DBreviews;\n  var siteLanguage = useLanguage(); //context\n\n  var router = useRouter();\n  var reviewId = router.query.reviewId;\n\n  var _useState = useState(DBreviews),\n      reviews = _useState[0],\n      setReviews = _useState[1];\n\n  var _useState2 = useState(reviewId),\n      openedReview = _useState2[0],\n      setOpenedReview = _useState2[1];\n\n  var handleOpenedReview = function handleOpenedReview(id) {\n    var fullRoute = id !== null ? '/recensioniBibliografiche/' + id : '/recensioniBibliografiche/';\n    router.push(fullRoute);\n    setOpenedReview(id);\n  };\n\n  useEffect(function () {\n    if (reviews.length === 0) {\n      console.log(\"useEffect - reviews is empty!\");\n\n      if (DBreviews.map(function (el) {\n        return el.id;\n      }).includes(reviewId)) {\n        setOpenedReview(reviewId);\n      }\n    }\n  });\n  return __jsx(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, __jsx(Header, {\n    title: siteLanguage === \"ita\" ? \"Recensioni\" : \"Reviews\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }), __jsx(Navigation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), openedReview && reviews.length > 0 && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForReviews(openedReview, reviews.find(function (art) {\n      return art.id === openedReview;\n    })[siteLanguage].title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), reviews.length === 0 && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForErrors({\n      ita: \"Recensione inesistente\",\n      eng: \"No such review\"\n    }, \"/recensioniBibliografiche\", siteLanguage),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), __jsx(\"main\", {\n    className: styles.main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, !openedReview && __jsx(ErrorComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }), __jsx(Row, {\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    md: 3,\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }), openedReview && reviews.length > 0 && __jsx(React.Fragment, null, __jsx(Col, {\n    md: 6,\n    className: \"justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  }, __jsx(ReviewRead, {\n    review: reviews.find(function (art) {\n      return art.id === openedReview;\n    }),\n    allReviews: reviews,\n    setOpenedReview: handleOpenedReview,\n    glossarywords: glossarywords,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  })), __jsx(Col, {\n    md: 3,\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }, __jsx(ReviewReadRightPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }))))), __jsx(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(recensione, \"bWTmTHHJtOT9a44HoV6x96vOXeQ=\", false, function () {\n  return [useLanguage, useRouter];\n});\n\nrecensione.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(context) {\n    var getReviewId, propsObj, reviewId, apiUrlGlossary, resGlossaryword, glossarywords, apiUrlReview, resReview, DBreviews;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            getReviewId = /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(rawStr) {\n                var reviewId;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        reviewId = rawStr.split('/recensioniBibliografiche/')[1];\n\n                        if (reviewId.includes('/')) {\n                          reviewId = reviewId.split('/')[1].split('/')[1];\n                        }\n\n                        return _context.abrupt(\"return\", reviewId);\n\n                      case 3:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function getReviewId(_x2) {\n                return _ref3.apply(this, arguments);\n              };\n            }();\n\n            propsObj = {\n              DBreviews: [],\n              glossarywords: []\n            };\n\n            if (context.req) {\n              _context2.next = 9;\n              break;\n            }\n\n            _context2.next = 5;\n            return getReviewId(context.asPath);\n\n          case 5:\n            reviewId = _context2.sent;\n\n            if (location.href.includes(\"recensioniBibliografiche/\")) {\n              location.replace(reviewId);\n            } else {\n              location.replace(\"recensioniBibliografiche/\" + reviewId);\n            }\n\n            _context2.next = 24;\n            break;\n\n          case 9:\n            apiUrlGlossary = \"http://\" + context.req.headers.host + \"/api/glossaryword\";\n            _context2.next = 12;\n            return fetch(apiUrlGlossary);\n\n          case 12:\n            resGlossaryword = _context2.sent;\n            _context2.next = 15;\n            return resGlossaryword.json();\n\n          case 15:\n            glossarywords = _context2.sent;\n            apiUrlReview = \"http://\" + context.req.headers.host + \"/api/review\";\n            _context2.next = 19;\n            return fetch(apiUrlReview);\n\n          case 19:\n            resReview = _context2.sent;\n            _context2.next = 22;\n            return resReview.json();\n\n          case 22:\n            DBreviews = _context2.sent;\n            propsObj = {\n              DBreviews: DBreviews.data,\n              glossarywords: glossarywords.data\n            };\n\n          case 24:\n            return _context2.abrupt(\"return\", propsObj);\n\n          case 25:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default recensione;\n/* //Rimozione di getServerSideProps per deployare su Firebase\nexport async function getServerSideProps(context) {\n  const apiUrlGlossary = \"http://\" + context.req.headers.host + \"/api/glossaryword\"\n  const resGlossaryword = await fetch(apiUrlGlossary)\n  const glossarywords = await resGlossaryword.json()\n  const apiUrlReview = \"http://\" + context.req.headers.host + \"/api/review\"\n  const resReview = await fetch(apiUrlReview)\n  const DBreviews = await resReview.json()\n  return { props: { DBreviews: DBreviews.data, glossarywords: glossarywords.data } }\n}\n*/","map":{"version":3,"sources":["/home/iridion/Desktop/Repos/Freelancer/project-privacy/pages/recensioniBibliografiche/[reviewId].js"],"names":["styles","useLanguage","useState","useEffect","useRouter","Row","Col","Header","Navigation","Breadcrumbs","Footer","ReviewRead","ReviewReadRightPanel","getBreadcrumbsForReviews","getBreadcrumbsForErrors","ErrorComponent","recensione","glossarywords","DBreviews","siteLanguage","router","reviewId","query","reviews","setReviews","openedReview","setOpenedReview","handleOpenedReview","id","fullRoute","push","length","console","log","map","el","includes","container","find","art","title","ita","eng","main","getInitialProps","context","getReviewId","rawStr","split","propsObj","req","asPath","location","href","replace","apiUrlGlossary","headers","host","fetch","resGlossaryword","json","apiUrlReview","resReview","data"],"mappings":"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","sourcesContent":["import styles from '../../styles/Home.module.css'\nimport { useLanguage } from '../../context/siteLanguageContext' //context\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport {\n  Row,\n  Col\n} from 'react-bootstrap'\nimport { Header } from '../../components/layout/Header'\nimport { Navigation } from '../../components/layout/Navbar'\nimport { Breadcrumbs } from '../../components/layout/Breadcrumbs'\nimport { Footer } from '../../components/layout/Footer'\nimport { ReviewRead } from \"../../components/reviews/ReviewRead\"\nimport { ReviewReadRightPanel } from \"../../components/reviews/ReviewReadRightPanel\"\nimport { getBreadcrumbsForReviews } from '../../utils/reviews'\nimport { getBreadcrumbsForErrors } from '../../utils/errors'\nimport { ErrorComponent } from '../../components/layout/ErrorComponent'\n\nfunction recensione({ glossarywords, DBreviews }) {\n  const siteLanguage = useLanguage() //context\n  const router = useRouter()\n  const { reviewId } = router.query\n  const [reviews, setReviews] = useState(DBreviews)\n  const [openedReview, setOpenedReview] = useState(reviewId)\n\n  const handleOpenedReview = (id) => {\n    const fullRoute = id !== null ? '/recensioniBibliografiche/' + id : '/recensioniBibliografiche/'\n    router.push(fullRoute)\n    setOpenedReview(id)\n  }\n\n  useEffect(() => {\n    if (reviews.length === 0) {\n      console.log(\"useEffect - reviews is empty!\")\n      if (DBreviews.map(el => el.id).includes(reviewId)) {\n        setOpenedReview(reviewId)\n      }\n    }\n  })\n\n  return (\n    <div className={styles.container}>\n      <Header\n        title={siteLanguage === \"ita\" ? \"Recensioni\" : \"Reviews\"}\n      />\n      {/* Navbar */}\n      <Navigation />\n      {(openedReview && reviews.length > 0) &&\n        <Breadcrumbs\n          breadcrumbsList={getBreadcrumbsForReviews(openedReview, reviews.find(art => art.id === openedReview)[siteLanguage].title)}\n        />\n      }\n      {reviews.length === 0 &&\n        <Breadcrumbs\n          breadcrumbsList={getBreadcrumbsForErrors({ ita: \"Recensione inesistente\", eng: \"No such review\" }, \"/recensioniBibliografiche\", siteLanguage)}\n        />\n      }\n      {/* Page Content */}\n      <main className={styles.main}>\n        {!openedReview &&\n          <ErrorComponent />\n        }\n        <Row className=\"w-100\">\n          <Col md={3} className=\"\">\n          </Col>\n          {(openedReview && reviews.length > 0) &&\n            <>\n              <Col md={6} className=\"justify-content-center\">\n                <ReviewRead\n                  review={reviews.find(art => art.id === openedReview)}\n                  allReviews={reviews}\n                  setOpenedReview={handleOpenedReview}\n                  glossarywords={glossarywords}\n                />\n              </Col>\n              <Col md={3} className=\"\">\n                <ReviewReadRightPanel />\n              </Col>\n            </>\n          }\n        </Row>\n      </main>\n      {/* Footer */}\n      <Footer />\n    </div>\n  )\n}\n\nrecensione.getInitialProps = async (context) => {\n\n  const getReviewId = async (rawStr) => {\n    let reviewId = rawStr.split('/recensioniBibliografiche/')[1]\n    if (reviewId.includes('/')) {\n      reviewId = reviewId.split('/')[1].split('/')[1]\n    }\n    return reviewId\n  }\n\n  let propsObj = { DBreviews: [], glossarywords: [] }\n  if (!context.req) {\n    const reviewId = await getReviewId(context.asPath)\n    if (location.href.includes(\"recensioniBibliografiche/\")) {\n      location.replace(reviewId)\n    } else {\n      location.replace(\"recensioniBibliografiche/\" + reviewId)\n    }\n  } else {\n    const apiUrlGlossary = \"http://\" + context.req.headers.host + \"/api/glossaryword\"\n    const resGlossaryword = await fetch(apiUrlGlossary)\n    const glossarywords = await resGlossaryword.json()\n    const apiUrlReview = \"http://\" + context.req.headers.host + \"/api/review\"\n    const resReview = await fetch(apiUrlReview)\n    const DBreviews = await resReview.json()\n    propsObj = { DBreviews: DBreviews.data, glossarywords: glossarywords.data }\n  }\n  return propsObj\n}\n\nexport default recensione\n\n/* //Rimozione di getServerSideProps per deployare su Firebase\nexport async function getServerSideProps(context) {\n  const apiUrlGlossary = \"http://\" + context.req.headers.host + \"/api/glossaryword\"\n  const resGlossaryword = await fetch(apiUrlGlossary)\n  const glossarywords = await resGlossaryword.json()\n  const apiUrlReview = \"http://\" + context.req.headers.host + \"/api/review\"\n  const resReview = await fetch(apiUrlReview)\n  const DBreviews = await resReview.json()\n  return { props: { DBreviews: DBreviews.data, glossarywords: glossarywords.data } }\n}\n*/"]},"metadata":{},"sourceType":"module"}