{"ast":null,"code":"var _jsxFileName = \"/home/iridion/Desktop/Repos/Freelancer/project-privacy/pages/articoli/[articleId].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../../styles/Home.module.css';\nimport { useLanguage } from '../../context/siteLanguageContext'; //context\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { Row, Col } from 'react-bootstrap';\nimport { Header } from '../../components/layout/Header';\nimport { Navigation } from '../../components/layout/Navbar';\nimport { Breadcrumbs } from '../../components/layout/Breadcrumbs';\nimport { Footer } from '../../components/layout/Footer';\nimport { ArticleRead } from \"../../components/articles/ArticleRead\";\nimport { RelatedArticles } from \"../../components/articles/RelatedArticles\";\nimport { getRelatedArticles, getBreadcrumbsForArticles } from '../../utils/articles';\nimport { getBreadcrumbsForErrors } from '../../utils/errors';\nimport { ErrorComponent } from '../../components/layout/ErrorComponent';\n\nfunction articoli({\n  glossarywords,\n  DBarticles\n}) {\n  const siteLanguage = useLanguage(); //context\n\n  const router = useRouter();\n  const {\n    articleId\n  } = router.query;\n  const {\n    0: articles,\n    1: setArticles\n  } = useState(DBarticles);\n  const {\n    0: openedArticle,\n    1: setOpenedArticle\n  } = useState(null);\n  const {\n    0: shouldRenderComponent,\n    1: setShouldRenderComponent\n  } = useState(null);\n\n  const handleOpenedArticle = id => {\n    const fullRoute = id !== null ? '/articoli/' + id : '/articoli/';\n    router.push(fullRoute);\n    setOpenedArticle(id);\n  };\n\n  let relatedArticles = shouldRenderComponent ? getRelatedArticles(articleId, articles, siteLanguage) : [];\n  useEffect(() => {\n    if (!openedArticle) {\n      if (DBarticles.map(el => el.id).includes(articleId)) {\n        setOpenedArticle(articleId);\n      } else {\n        setShouldRenderComponent(false);\n      }\n    }\n\n    if (!shouldRenderComponent) setShouldRenderComponent(DBarticles.map(el => el.id).includes(articleId));\n  });\n  return __jsx(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(Header, {\n    title: siteLanguage === \"ita\" ? \"Articoli\" : \"Articles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }), __jsx(Navigation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), openedArticle && shouldRenderComponent && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForArticles(openedArticle, articles.find(art => art.id === openedArticle)[siteLanguage].title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), shouldRenderComponent === false && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForErrors({\n      ita: \"Articolo inesistente\",\n      eng: \"No such article\"\n    }, \"/articoli\", siteLanguage),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), __jsx(\"main\", {\n    className: styles.main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, shouldRenderComponent === false && __jsx(ErrorComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }), __jsx(Row, {\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    md: 3,\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }), openedArticle && shouldRenderComponent && __jsx(React.Fragment, null, __jsx(Col, {\n    md: 6,\n    className: \"justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, __jsx(ArticleRead, {\n    article: articles.find(art => art.id === openedArticle),\n    allArticles: articles,\n    setOpenedArticle: handleOpenedArticle,\n    glossarywords: glossarywords,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  })), __jsx(Col, {\n    md: 3,\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, __jsx(RelatedArticles, {\n    relatedArticles: relatedArticles,\n    setOpenedArticle: handleOpenedArticle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }))))), __jsx(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }));\n}\n\narticoli.getInitialProps = async ({\n  req\n}) => {\n  console.log(\"articoli.getInitialProps - req:\", req); //api of glossary\n\n  const apiUrlGlossary = \"http://\" + req.headers.host + \"/api/glossaryword\";\n  const resGlossaryword = await fetch(apiUrlGlossary);\n  const glossarywords = await resGlossaryword.json(); //api of all articles (for the related articles)\n\n  const apiUrlArticle = \"http://\" + req.headers.host + \"/api/article\";\n  const resArticle = await fetch(apiUrlArticle);\n  const DBarticles = await resArticle.json();\n  return {\n    DBarticles: DBarticles.data,\n    glossarywords: glossarywords.data\n  };\n};\n\nexport default articoli;\n/* //Rimozione di getServerSideProps per deployare su Firebase\nexport async function getServerSideProps({ req }) {\n  //api of glossary\n  const apiUrlGlossary = \"http://\" + req.headers.host + \"/api/glossaryword\"\n  const resGlossaryword = await fetch(apiUrlGlossary)\n  const glossarywords = await resGlossaryword.json()\n  //api of all articles (for the related articles)\n  const apiUrlArticle = \"http://\" + req.headers.host + \"/api/article\"\n  const resArticle = await fetch(apiUrlArticle)\n  const DBarticles = await resArticle.json()\n  return { props: { DBarticles: DBarticles.data, glossarywords: glossarywords.data } }\n}\n*/","map":{"version":3,"sources":["/home/iridion/Desktop/Repos/Freelancer/project-privacy/pages/articoli/[articleId].js"],"names":["styles","useLanguage","useState","useEffect","useRouter","Row","Col","Header","Navigation","Breadcrumbs","Footer","ArticleRead","RelatedArticles","getRelatedArticles","getBreadcrumbsForArticles","getBreadcrumbsForErrors","ErrorComponent","articoli","glossarywords","DBarticles","siteLanguage","router","articleId","query","articles","setArticles","openedArticle","setOpenedArticle","shouldRenderComponent","setShouldRenderComponent","handleOpenedArticle","id","fullRoute","push","relatedArticles","map","el","includes","container","find","art","title","ita","eng","main","getInitialProps","req","console","log","apiUrlGlossary","headers","host","resGlossaryword","fetch","json","apiUrlArticle","resArticle","data"],"mappings":"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","sourcesContent":["import styles from '../../styles/Home.module.css'\nimport { useLanguage } from '../../context/siteLanguageContext' //context\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport {\n  Row,\n  Col\n} from 'react-bootstrap'\nimport { Header } from '../../components/layout/Header'\nimport { Navigation } from '../../components/layout/Navbar'\nimport { Breadcrumbs } from '../../components/layout/Breadcrumbs'\nimport { Footer } from '../../components/layout/Footer'\nimport { ArticleRead } from \"../../components/articles/ArticleRead\"\nimport { RelatedArticles } from \"../../components/articles/RelatedArticles\"\nimport { getRelatedArticles, getBreadcrumbsForArticles } from '../../utils/articles'\nimport { getBreadcrumbsForErrors } from '../../utils/errors'\nimport { ErrorComponent } from '../../components/layout/ErrorComponent'\n\nfunction articoli({ glossarywords, DBarticles }) {\n  const siteLanguage = useLanguage() //context\n  const router = useRouter()\n  const { articleId } = router.query\n  const [articles, setArticles] = useState(DBarticles)\n  const [openedArticle, setOpenedArticle] = useState(null)\n  const [shouldRenderComponent, setShouldRenderComponent] = useState(null)\n\n  const handleOpenedArticle = (id) => {\n    const fullRoute = id !== null ? '/articoli/' + id : '/articoli/'\n    router.push(fullRoute)\n    setOpenedArticle(id)\n  }\n\n  let relatedArticles = shouldRenderComponent ? getRelatedArticles(articleId, articles, siteLanguage) : []\n\n  useEffect(() => {\n    if (!openedArticle) {\n      if (DBarticles.map(el => el.id).includes(articleId)) {\n        setOpenedArticle(articleId)\n      } else {\n        setShouldRenderComponent(false)\n      }\n    }\n    if (!shouldRenderComponent) setShouldRenderComponent(DBarticles.map(el => el.id).includes(articleId))\n  })\n\n  return (\n    <div className={styles.container}>\n      <Header\n        title={siteLanguage === \"ita\" ? \"Articoli\" : \"Articles\"}\n      />\n      {/* Navbar */}\n      <Navigation />\n      {(openedArticle && shouldRenderComponent) &&\n        <Breadcrumbs\n          breadcrumbsList={getBreadcrumbsForArticles(openedArticle, articles.find(art => art.id === openedArticle)[siteLanguage].title)}\n        />\n      }\n      {shouldRenderComponent === false &&\n        <Breadcrumbs\n          breadcrumbsList={getBreadcrumbsForErrors({ ita: \"Articolo inesistente\", eng: \"No such article\" }, \"/articoli\", siteLanguage)}\n        />\n      }\n      {/* Page Content */}\n      <main className={styles.main}>\n        {shouldRenderComponent === false &&\n          <ErrorComponent />\n        }\n        <Row className=\"w-100\">\n          <Col md={3} className=\"\">\n          </Col>\n          {(openedArticle && shouldRenderComponent) &&\n            <>\n              <Col md={6} className=\"justify-content-center\">\n                <ArticleRead\n                  article={articles.find(art => art.id === openedArticle)}\n                  allArticles={articles}\n                  setOpenedArticle={handleOpenedArticle}\n                  glossarywords={glossarywords}\n                />\n              </Col>\n              <Col md={3} className=\"\">\n                <RelatedArticles\n                  relatedArticles={relatedArticles}\n                  setOpenedArticle={handleOpenedArticle}\n                />\n              </Col>\n            </>\n          }\n        </Row>\n      </main>\n      {/* Footer */}\n      <Footer />\n    </div>\n  )\n}\n\narticoli.getInitialProps = async ({ req }) => {\n  console.log(\"articoli.getInitialProps - req:\", req)\n  //api of glossary\n  const apiUrlGlossary = \"http://\" + req.headers.host + \"/api/glossaryword\"\n  const resGlossaryword = await fetch(apiUrlGlossary)\n  const glossarywords = await resGlossaryword.json()\n  //api of all articles (for the related articles)\n  const apiUrlArticle = \"http://\" + req.headers.host + \"/api/article\"\n  const resArticle = await fetch(apiUrlArticle)\n  const DBarticles = await resArticle.json()\n  return { DBarticles: DBarticles.data, glossarywords: glossarywords.data }\n}\n\nexport default articoli\n\n/* //Rimozione di getServerSideProps per deployare su Firebase\nexport async function getServerSideProps({ req }) {\n  //api of glossary\n  const apiUrlGlossary = \"http://\" + req.headers.host + \"/api/glossaryword\"\n  const resGlossaryword = await fetch(apiUrlGlossary)\n  const glossarywords = await resGlossaryword.json()\n  //api of all articles (for the related articles)\n  const apiUrlArticle = \"http://\" + req.headers.host + \"/api/article\"\n  const resArticle = await fetch(apiUrlArticle)\n  const DBarticles = await resArticle.json()\n  return { props: { DBarticles: DBarticles.data, glossarywords: glossarywords.data } }\n}\n*/"]},"metadata":{},"sourceType":"module"}