{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Form, Row, Col, Badge, Button } from 'react-bootstrap';\nexport var MultiSelect = function MultiSelect(props) {\n  var _props$formGroupClass = props.formGroupClass,\n      formGroupClass = _props$formGroupClass === void 0 ? \"\" : _props$formGroupClass,\n      _props$formLabelClass = props.formLabelClass,\n      formLabelClass = _props$formLabelClass === void 0 ? \"\" : _props$formLabelClass,\n      _props$validationFunc = props.validationFunc,\n      validationFunc = _props$validationFunc === void 0 ? function () {\n    return true;\n  } : _props$validationFunc,\n      _props$label = props.label,\n      label = _props$label === void 0 ? \"\" : _props$label,\n      _props$textmuted = props.textmuted,\n      textmuted = _props$textmuted === void 0 ? false : _props$textmuted,\n      _props$onChange = props.onChange,\n      onChange = _props$onChange === void 0 ? function (val) {\n    return val;\n  } : _props$onChange,\n      onRemove = props.onRemove,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n      _props$selectableOpti = props.selectableOptions,\n      selectableOptions = _props$selectableOpti === void 0 ? [] : _props$selectableOpti,\n      placeholder = props.placeholder,\n      _props$getOptionValue = props.getOptionValue,\n      getOptionValue = _props$getOptionValue === void 0 ? function (el) {\n    if ((el === null || el === void 0 ? void 0 : el.label) && (el === null || el === void 0 ? void 0 : el.value)) {\n      return el.value;\n    } else {\n      return el && el !== \"\" ? el : null;\n    }\n  } : _props$getOptionValue,\n      _props$getOptionStyle = props.getOptionStyle,\n      getOptionStyle = _props$getOptionStyle === void 0 ? function () {\n    return {};\n  } : _props$getOptionStyle,\n      _props$selectedItems = props.selectedItems,\n      selectedItems = _props$selectedItems === void 0 ? [] : _props$selectedItems,\n      _props$onRemoveAll = props.onRemoveAll,\n      onRemoveAll = _props$onRemoveAll === void 0 ? null : _props$onRemoveAll,\n      _props$firstColSpan = props.firstColSpan,\n      firstColSpan = _props$firstColSpan === void 0 ? 6 : _props$firstColSpan,\n      _props$secondColSpan = props.secondColSpan,\n      secondColSpan = _props$secondColSpan === void 0 ? 6 : _props$secondColSpan;\n\n  var handleChange = function handleChange(val) {\n    if (validationFunc(val)) {\n      onChange(val);\n      return;\n    }\n  };\n\n  return __jsx(Form.Group, {\n    className: formGroupClass\n  }, __jsx(Form.Label, {\n    className: formLabelClass\n  }, label), __jsx(Row, {\n    className: \"w-100 ml-0 mr-0\"\n  }, __jsx(Col, {\n    md: firstColSpan,\n    className: \"pl-1 pr-1\"\n  }, __jsx(Form.Control, {\n    as: \"select\",\n    defaultValue: \"\",\n    onChange: function onChange(event) {\n      return handleChange(event.target.value);\n    },\n    disabled: isDisabled\n  }, __jsx(\"option\", {\n    style: {\n      display: \"none !important\"\n    },\n    key: \"empty-value-key\",\n    value: \"\"\n  }, placeholder), selectableOptions.filter(function (el) {\n    return !(el === null || el === void 0 ? void 0 : el.selected);\n  }).map(function (el) {\n    return __jsx(\"option\", {\n      style: getOptionStyle(el),\n      key: (el === null || el === void 0 ? void 0 : el.value) ? el === null || el === void 0 ? void 0 : el.value : el,\n      value: getOptionValue(el)\n    }, (el === null || el === void 0 ? void 0 : el.label) ? el === null || el === void 0 ? void 0 : el.label : el);\n  }))), __jsx(Col, {\n    md: secondColSpan,\n    className: \"pl-1 pr-1\"\n  }, selectedItems && selectedItems.length > 0 && __jsx(Row, {\n    className: \"w-100 ml-0 mr-0\"\n  }, __jsx(Col, {\n    md: 10,\n    className: \"pl-0 pr-0\"\n  }, selectedItems.map(function (opt) {\n    return __jsx(Badge, {\n      variant: \"info\",\n      className: \"mr-1\",\n      key: opt.value ? opt.value : opt\n    }, opt.label ? opt.label : opt, __jsx(Button, {\n      size: \"sm\",\n      variant: \"danger\",\n      className: \"ml-1 p-0\",\n      style: {\n        lineHeight: \"1\",\n        height: \"16px\",\n        width: \"16px\"\n      },\n      onClick: function onClick() {\n        return onRemove((opt === null || opt === void 0 ? void 0 : opt.value) ? opt.value : opt);\n      }\n    }, __jsx(\"i\", {\n      className: \"fas fa-times p-0\"\n    })));\n  })), __jsx(Col, {\n    md: 2,\n    className: \"pl-0 pr-0 text-right\"\n  }, __jsx(Button, {\n    variant: \"danger\",\n    size: \"sm\",\n    onClick: onRemoveAll\n  }, __jsx(\"i\", {\n    className: \"fas fa-trash\"\n  })))))), textmuted && __jsx(Form.Text, {\n    className: \"text-muted\"\n  }, textmuted));\n};\n/*\n------------------------------[STATE]------------------------------\n\nconst [multiSelectVal, setMultiSelectVal] = useState(\"\")\n  const [optionsList, setOptionsList] = useState([\n    { value: \"blue\", label: \"Blue\", selected: false },\n    { value: \"red\", label: \"Red\", selected: false },\n    { value: \"green\", label: \"Green\", selected: false },\n    { value: \"cyan\", label: \"Cyan\", selected: false },\n  ])\n\n  const handleChangeMultiSelectVal = (val) => {\n    if (multiSelectVal === \"\") {\n      console.log(\"handleChangeSelectVal - empty string case - val: \", val)\n      const valObject = optionsList.find(opt => opt.value === val)\n      setMultiSelectVal([valObject])\n    } else {\n      console.log(\"handleChangeSelectVal - array case - val: \", val)\n      const valObject = optionsList.find(opt => opt.value === val)\n      setMultiSelectVal([valObject])\n      setMultiSelectVal([...multiSelectVal, valObject])\n    }\n    //setto selected a true\n    setOptionsList([...optionsList].map(opt => {\n      if (opt.value === val) {\n        opt.selected = !opt.selected\n      }\n      return opt\n    }))\n  }\n\n  const handleRemoveMultiSelectVal = (val) => {\n    console.log(\"handleRemoveMultiSelectVal - val:\", val)\n    const updatedMultiSelectVal = [...multiSelectVal].filter(el => el.value !== val)\n    setMultiSelectVal(updatedMultiSelectVal)\n    //setto selected a false\n    setOptionsList([...optionsList].map(opt => {\n      if (opt.value === val) {\n        opt.selected = !opt.selected\n      }\n      return opt\n    }))\n  }\n\n------------------------------[RETURN]------------------------------\n\n <MultiSelect\n  //formGroupClass={\"mt-5\"}\n  //formLabelClass={\"mt-5\"}\n  validationFunc={() => true}\n  label={\"label\"}\n  textmuted={\"text muted\"}\n  onChange={handleChangeMultiSelectVal}\n  onRemove={handleRemoveMultiSelectVal}\n  isDisabled={false}\n  selectableOptions={optionsList}\n  placeholder={\"-\"}\n  //getOptionValue={col => col}\n  //getOptionStyle={col => ({ color: `${col} !important` })}\n  selectedItems={multiSelectVal}\n/>\n*/","map":null,"metadata":{},"sourceType":"module"}