{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../styles/Home.module.css';\nimport { useState } from 'react';\nimport { useLanguage } from '../context/siteLanguageContext'; //context\n\nimport { Row } from 'react-bootstrap';\nimport { Header } from '../components/layout/Header';\nimport { Navigation } from '../components/layout/Navbar';\nimport { TopicChoice } from '../components/areaTest/TopicChoice';\nimport { Quiz } from '../components/areaTest/Quiz';\nimport { Results } from '../components/areaTest/Results';\nimport { Footer } from '../components/layout/Footer';\n\nfunction areaTest(_ref) {\n  var tests = _ref.tests;\n\n  var _useState = useState(null),\n      selectedTopic = _useState[0],\n      setSelectedTopic = _useState[1];\n\n  var _useState2 = useState(null),\n      selectedTest = _useState2[0],\n      setSelectedTest = _useState2[1];\n\n  var _useState3 = useState(false),\n      showResults = _useState3[0],\n      setShowResults = _useState3[1];\n\n  var _useState4 = useState([]),\n      results = _useState4[0],\n      setResults = _useState4[1];\n\n  var siteLanguage = useLanguage(); //context\n\n  return __jsx(\"div\", {\n    className: styles.container\n  }, __jsx(Header, {\n    title: siteLanguage === \"ita\" ? \"Area Test\" : \"Test Area\"\n  }), __jsx(Navigation, null), __jsx(\"main\", {\n    className: styles.main\n  }, __jsx(Row, {\n    className: \"w-100 m-auto\"\n  }, selectedTopic === null && showResults === false && __jsx(TopicChoice, {\n    setSelectedTopic: setSelectedTopic,\n    setSelectedTest: setSelectedTest\n  }), selectedTopic && __jsx(Quiz, {\n    selectedTopic: selectedTopic,\n    selectedTest: tests[selectedTest],\n    setSelectedTopic: setSelectedTopic,\n    setShowResults: setShowResults,\n    setResults: setResults\n  }), showResults && __jsx(Results, {\n    selectedTopic: selectedTopic,\n    selectedTest: tests[selectedTest],\n    setShowResults: setShowResults,\n    results: results\n  }))), __jsx(Footer, null));\n}\n\nareaTest.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var apiUrl, res, _yield$res$json, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            apiUrl = \"http://\" + context.req.headers.host + \"/api/test\";\n            _context.next = 3;\n            return fetch(apiUrl);\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n\n          case 6:\n            _yield$res$json = _context.sent;\n            data = _yield$res$json.data;\n            return _context.abrupt(\"return\", {\n              tests: data\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default areaTest;\n/* //Rimozione di getServerSideProps per deployare su Firebase\nexport async function getServerSideProps(context) {\n  const apiUrl = \"http://\" + context.req.headers.host + \"/api/test\"\n  const res = await fetch(apiUrl)\n  const { data } = await res.json()\n  return { props: { tests: data } }\n}\n*/","map":null,"metadata":{},"sourceType":"module"}