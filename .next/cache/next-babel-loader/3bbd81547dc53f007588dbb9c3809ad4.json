{"ast":null,"code":"import path from 'path';\nimport slash from 'slash';\nimport { PdfReader } from \"pdfreader\"; //pacchetto usato per leggere i pdf \n\nimport fs from 'fs'; //pacchetto usato per leggere docx files\n\nimport mammoth from 'mammoth'; //pacchetto usato per convertire i docx in html\n\nimport WordExtractor from \"word-extractor\"; //pacchetto usato per leggere i doc files\n\nimport libre from 'libreoffice-convert-win'; //pacchetto usato per convertire i docx files in pdf\n// ----------------------------- [Responds with an Object for every document in Archive] -----------------------------    \n\nexport default (async (req, res) => {\n  let conversionFinished = true;\n  let isArchiveMapped; //variabile bool che ci dirà se c'è una versione di oggi dell'archivio mappato\n\n  let mappedArchive; //variabile array dei dati dell'archivio mappato\n\n  const searchterms = req.query.searchterms && req.query.searchterms.length > 0 ? req.query.searchterms : null;\n  const activeFilters = JSON.parse(req.query.activeFilters);\n  const filesToAnalyze = [];\n  const dataToFilter = [];\n  const todayDate = new Date();\n  const todayUTC = todayDate.toUTCString();\n  const readFileName = todayUTC.slice(0, 16);\n\n  try {\n    const mappedArchiveRaw = await fs.readFileSync(\"mappedArchive\\\\\" + readFileName + \".json\");\n    mappedArchive = JSON.parse(mappedArchiveRaw);\n    isArchiveMapped = true;\n    dataToFilter.push(...mappedArchive);\n  } catch (mappedArchiveMissing) {\n    console.log(mappedArchiveMissing);\n    isArchiveMapped = false;\n  }\n\n  if (!isArchiveMapped) {\n    //funzione che estrae i path precisi di ogni file all'interno della dir archive\n    function* getFiles(dir) {\n      const dirents = fs.readdirSync(dir, {\n        withFileTypes: true\n      });\n\n      for (const dirent of dirents) {\n        const fullpath = path.resolve(dir, dirent.name);\n\n        if (dirent.isDirectory()) {\n          yield* getFiles(fullpath);\n        } else {\n          yield {\n            fullpath: fullpath,\n            linuxfullpath: slash(fullpath),\n            relativepath: fullpath.split(\"public\\\\\")[1],\n            linuxpath: slash(fullpath.split(\"public\\\\\")[1]),\n            filename: dirent.name\n          };\n        }\n      }\n    }\n\n    (() => {\n      for (const f of getFiles('public/archive')) {\n        filesToAnalyze.push(f);\n      }\n    })(); //containerResult Promise starts pending\n\n\n    const containerResult = await new Promise((resolveContainer, rejectContainer) => {\n      try {\n        const analyzedFiles = [];\n        filesToAnalyze.forEach(async (fileObj, fileIndex) => {\n          const pdf = fileObj.fullpath.toLowerCase().includes(\".pdf\");\n          const docx = fileObj.fullpath.toLowerCase().includes(\".docx\");\n          const doc = fileObj.fullpath.toLowerCase().includes(\".doc\"); //singleResult Promise starts pending\n\n          const singleResult = await new Promise((resolveSingle, rejectSingle) => {\n            if (pdf) {\n              //[Pdf procedure] (PdfReader + manual array push)\n              if (!activeFilters.includePdf) resolveSingle({});\n              const pdfBuffer = fs.readFileSync(fileObj.fullpath);\n\n              const getPdfContent = async () => {\n                const pdfContentArray = [];\n                await new PdfReader().parseFileItems(fileObj.fullpath, async (err, item) => {\n                  if (err) return rejectSingle(err); //rejecting singleResult Promise\n\n                  if (!item) {\n                    //Condizione d'uscita da parseFileItems()\n                    return resolveSingle({\n                      //resolving singleResult Promise\n                      fullpath: fileObj.fullpath,\n                      linuxfullpath: fileObj.linuxfullpath,\n                      filename: fileObj.filename,\n                      relativepath: fileObj.relativepath,\n                      linuxpath: fileObj.linuxpath,\n                      content: pdfContentArray.join(\" \")\n                    });\n                  }\n\n                  if (item.text) {\n                    //Per ogni frammento del pdf, pusho in pdfContentArray.\n                    pdfContentArray.push(item.text);\n                    return true;\n                  }\n                });\n              };\n\n              getPdfContent();\n            } else if (docx) {\n              if (!activeFilters.includeDocx) resolveSingle({}); //[Docx procedure] (mammoth)\n\n              const options = {};\n              mammoth.convertToHtml({\n                path: 'public\\\\' + fileObj.relativepath\n              }, options).then(mammothResult => {\n                if (mammothResult.messages.length > 0) {\n                  for (let x; x < mammothResult.messages.length; x++) {\n                    console.log(\"\\n\\n Errors:\", mammothResult.messages[x], '\\n\\n');\n                  }\n                }\n\n                return resolveSingle({\n                  //resolving singleResult Promise\n                  fullpath: fileObj.fullpath,\n                  linuxfullpath: fileObj.linuxfullpath,\n                  filename: fileObj.filename,\n                  relativepath: fileObj.relativepath,\n                  linuxpath: fileObj.linuxpath,\n                  content: mammothResult.value\n                });\n              });\n            } else if (doc) {\n              if (!activeFilters.includeDoc) resolveSingle({}); //[Doc procedure] (WordExtractor)\n\n              const getDocContent = async fileObj => {\n                const docExtractor = new WordExtractor();\n                const extractedContent = await docExtractor.extract('public\\\\' + fileObj.relativepath).then(function (doc) {\n                  resolveSingle({\n                    //resolving singleResult Promise\n                    fullpath: fileObj.fullpath,\n                    linuxfullpath: fileObj.linuxfullpath,\n                    filename: fileObj.filename,\n                    relativepath: fileObj.relativepath,\n                    linuxpath: fileObj.linuxpath,\n                    content: JSON.stringify(doc.getBody())\n                  });\n                });\n              };\n\n              getDocContent(fileObj);\n            } else {\n              rejectSingle(\"File is not pdf, docx or doc!\"); //rejecting singleResult Promise\n            }\n          }).then(singleResult => {\n            return singleResult;\n          }); //singleResult Promise resolved/rejected\n\n          await analyzedFiles.push({\n            fullpath: fileObj.fullpath,\n            filename: fileObj.filename,\n            relativepath: fileObj.relativepath,\n            linuxpath: fileObj.linuxpath,\n            content: singleResult && singleResult.content ? singleResult.content : \"\"\n          });\n\n          if (analyzedFiles.length === filesToAnalyze.length) {\n            //Qui dovrebbe salvare il json di containerResult\n            const mappedArchiveStr = JSON.stringify([...analyzedFiles]);\n            console.log(\"|||||||||||||||||||||||| started writing a json file representing the archive\");\n            const todayDate = new Date();\n            const todayUTC = todayDate.toUTCString();\n            const writeFileName = todayUTC.slice(0, 16);\n            await fs.writeFileSync(\"mappedArchive\\\\\" + writeFileName + \".json\", mappedArchiveStr);\n            console.log(\"|||||||||||||||||||||||| finished writing json file\");\n            resolveContainer(analyzedFiles); //resolving containerResult Promise\n          } else {\n            console.log(\"(analyzedFiles.length !== filesToAnalyze.length) fileIndex attuale:\", fileIndex);\n          }\n        });\n      } catch (errContainer) {\n        console.log(\"rejectContainer with error:\", errContainer);\n        rejectContainer(errContainer); //rejecting containerResult Promise\n      }\n    }).then(containerResult => {\n      return containerResult;\n    }); //containerResult Promise resolved/rejected\n  }\n\n  const filteredDocs = dataToFilter.filter(d => {\n    if (d.content) {\n      if (!activeFilters.includePdf && d.filename.includes(\".pdf\")) return false;\n      if (!activeFilters.includeDocx && d.filename.includes(\".docx\")) return false;\n      if (!activeFilters.includeDoc && d.filename.includes(\".doc\") && d.filename.split(\".doc\")[1].length === 0) return false; //Eventuali affinamenti del filtro andranno qui \n\n      const cleanContent = d.content.replace(/[^\\w\\s]/gi, '').toLowerCase();\n      let result = null;\n\n      if (activeFilters.indCorteCost) {\n        let target = \".ind corte\".replace(/[^\\w\\s]/gi, '');\n        result = cleanContent.includes(target);\n      } else {\n        result = cleanContent.includes(searchterms.replace(/[^\\w\\s]/gi, '').toLowerCase());\n      }\n\n      return result;\n    } else {\n      return false;\n    }\n  });\n\n  const checkIfConversionNeeded = fileObjArr => {\n    const names = fileObjArr.map(el => el.filename);\n    return names.some(name => name.includes(\".docx\") || name.includes(\".doc\"));\n  };\n\n  if (checkIfConversionNeeded(filteredDocs)) {\n    let convertedDocs = [];\n    conversionFinished = false;\n\n    for (let x = 0; x < filteredDocs.length; x++) {\n      const d = filteredDocs[x];\n      const libreResult = await new Promise((resolveLibre, rejectLibre) => {\n        if (d && d.filename) {\n          const extend = '.pdf';\n          const enterPath = d.fullpath;\n          const outputPath = d.filename.includes(\".docx\") ? d.fullpath.split('.docx')[0] + extend : d.fullpath.split('.doc')[0] + extend;\n          const file = fs.readFileSync(enterPath);\n          libre.convert(file, extend, undefined, async (err, done) => {\n            if (err) {\n              console.log(`\\n\\n Error converting file: ${err} \\n\\n`);\n              rejectLibre(err);\n            } else {\n              // writeFileSync funziona, crea veramente il pdf, ma sarebbe troppo pesante farlo ogni volta per tutti i file, quindi mi limito a sfruttare il buffer: done.\n              //await fs.writeFileSync(outputPath, done)\n              resolveLibre(done);\n            }\n          });\n        } else {\n          console.log(\"Error - Caso inaspettato con questo file: \", filteredDocs[x]);\n        }\n      }).then(libreResult => {\n        return libreResult;\n      });\n      let mapResult = {};\n\n      if (libreResult && libreResult.byteLength) {\n        mapResult = {\n          fullpath: d.fullpath,\n          filename: d.filename,\n          relativepath: d.relativepath,\n          linuxpath: d.linuxpath,\n          content: d.filename.includes(\".docx\") ? d.content : \"\",\n          buffer: libreResult\n        };\n      } else {\n        mapResult = {\n          fullpath: d.fullpath,\n          filename: d.filename,\n          relativepath: d.relativepath,\n          linuxpath: d.linuxpath,\n          content: d.filename.includes(\".docx\") ? d.content : \"\"\n        };\n      }\n\n      const updateConvertedDocs = (convertedArr, originalArr) => {\n        const resultArr = [...convertedArr, mapResult];\n\n        if (resultArr.length === originalArr.length) {\n          conversionFinished = true;\n        }\n\n        return resultArr;\n      };\n\n      convertedDocs = await updateConvertedDocs(convertedDocs, filteredDocs);\n    }\n\n    (function forceWait() {\n      if (!conversionFinished) {\n        setTimeout(forceWait, 1000);\n      } else {\n        return res.status(200).json({\n          //Success - Trovato qualcosa per i searchterms immessi, e nessun errore.\n          success: true,\n          data: {\n            filteredDocs: convertedDocs\n          }\n        });\n      }\n    })();\n  } else {\n    return res.status(200).json({\n      //Success - Trovato qualcosa per i searchterms immessi, e nessun errore.\n      success: true,\n      data: {\n        filteredDocs: filteredDocs\n      }\n    });\n  }\n});","map":{"version":3,"sources":["/home/iridion/Desktop/Repos/Freelancer/project-privacy/pages/api/archive/advancedSearch.js"],"names":["path","slash","PdfReader","fs","mammoth","WordExtractor","libre","req","res","conversionFinished","isArchiveMapped","mappedArchive","searchterms","query","length","activeFilters","JSON","parse","filesToAnalyze","dataToFilter","todayDate","Date","todayUTC","toUTCString","readFileName","slice","mappedArchiveRaw","readFileSync","push","mappedArchiveMissing","console","log","getFiles","dir","dirents","readdirSync","withFileTypes","dirent","fullpath","resolve","name","isDirectory","linuxfullpath","relativepath","split","linuxpath","filename","f","containerResult","Promise","resolveContainer","rejectContainer","analyzedFiles","forEach","fileObj","fileIndex","pdf","toLowerCase","includes","docx","doc","singleResult","resolveSingle","rejectSingle","includePdf","pdfBuffer","getPdfContent","pdfContentArray","parseFileItems","err","item","content","join","text","includeDocx","options","convertToHtml","then","mammothResult","messages","x","value","includeDoc","getDocContent","docExtractor","extractedContent","extract","stringify","getBody","mappedArchiveStr","writeFileName","writeFileSync","errContainer","filteredDocs","filter","d","cleanContent","replace","result","indCorteCost","target","checkIfConversionNeeded","fileObjArr","names","map","el","some","convertedDocs","libreResult","resolveLibre","rejectLibre","extend","enterPath","outputPath","file","convert","undefined","done","mapResult","byteLength","buffer","updateConvertedDocs","convertedArr","originalArr","resultArr","forceWait","setTimeout","status","json","success","data"],"mappings":"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","sourcesContent":["import path from 'path'\nimport slash from 'slash'\nimport { PdfReader } from \"pdfreader\"  //pacchetto usato per leggere i pdf \nimport fs from 'fs'//pacchetto usato per leggere docx files\nimport mammoth from 'mammoth' //pacchetto usato per convertire i docx in html\nimport WordExtractor from \"word-extractor\" //pacchetto usato per leggere i doc files\nimport libre from 'libreoffice-convert-win' //pacchetto usato per convertire i docx files in pdf\n\n// ----------------------------- [Responds with an Object for every document in Archive] -----------------------------    \nexport default async (req, res) => {\n  let conversionFinished = true\n  let isArchiveMapped //variabile bool che ci dirà se c'è una versione di oggi dell'archivio mappato\n  let mappedArchive //variabile array dei dati dell'archivio mappato\n  const searchterms = req.query.searchterms && req.query.searchterms.length > 0 ? req.query.searchterms : null\n  const activeFilters = JSON.parse(req.query.activeFilters)\n  const filesToAnalyze = []\n  const dataToFilter = []\n  const todayDate = new Date()\n  const todayUTC = todayDate.toUTCString()\n  const readFileName = todayUTC.slice(0, 16)\n  try {\n    const mappedArchiveRaw = await fs.readFileSync(\"mappedArchive\\\\\" + readFileName + \".json\")\n    mappedArchive = JSON.parse(mappedArchiveRaw)\n    isArchiveMapped = true\n    dataToFilter.push(...mappedArchive)\n  } catch (mappedArchiveMissing) {\n    console.log(mappedArchiveMissing)\n    isArchiveMapped = false\n  }\n\n  if (!isArchiveMapped) {\n    //funzione che estrae i path precisi di ogni file all'interno della dir archive\n    function* getFiles(dir) {\n      const dirents = fs.readdirSync(dir, { withFileTypes: true })\n      for (const dirent of dirents) {\n        const fullpath = path.resolve(dir, dirent.name)\n        if (dirent.isDirectory()) {\n          yield* getFiles(fullpath)\n        } else {\n          yield {\n            fullpath: fullpath,\n            linuxfullpath: slash(fullpath),\n            relativepath: fullpath.split(\"public\\\\\")[1],\n            linuxpath: slash(fullpath.split(\"public\\\\\")[1]),\n            filename: dirent.name\n          }\n        }\n      }\n    }\n    (() => {\n      for (const f of getFiles('public/archive')) {\n        filesToAnalyze.push(f)\n      }\n    })()\n\n    //containerResult Promise starts pending\n    const containerResult = await new Promise((resolveContainer, rejectContainer) => {\n      try {\n        const analyzedFiles = []\n        filesToAnalyze.forEach(async (fileObj, fileIndex) => {\n          const pdf = fileObj.fullpath.toLowerCase().includes(\".pdf\")\n          const docx = fileObj.fullpath.toLowerCase().includes(\".docx\")\n          const doc = fileObj.fullpath.toLowerCase().includes(\".doc\")\n\n          //singleResult Promise starts pending\n          const singleResult = await new Promise((resolveSingle, rejectSingle) => {\n            if (pdf) { //[Pdf procedure] (PdfReader + manual array push)\n              if (!activeFilters.includePdf) resolveSingle({})\n              const pdfBuffer = fs.readFileSync(fileObj.fullpath)\n              const getPdfContent = async () => {\n                const pdfContentArray = []\n                await new PdfReader().parseFileItems(fileObj.fullpath, async (err, item) => {\n                  if (err) return rejectSingle(err) //rejecting singleResult Promise\n                  if (!item) { //Condizione d'uscita da parseFileItems()\n                    return resolveSingle({ //resolving singleResult Promise\n                      fullpath: fileObj.fullpath,\n                      linuxfullpath: fileObj.linuxfullpath,\n                      filename: fileObj.filename,\n                      relativepath: fileObj.relativepath,\n                      linuxpath: fileObj.linuxpath,\n                      content: pdfContentArray.join(\" \")\n                    })\n                  }\n                  if (item.text) { //Per ogni frammento del pdf, pusho in pdfContentArray.\n                    pdfContentArray.push(item.text)\n                    return true\n                  }\n                })\n              }\n              getPdfContent()\n            } else if (docx) {\n              if (!activeFilters.includeDocx) resolveSingle({})\n              //[Docx procedure] (mammoth)\n              const options = {}\n              mammoth.convertToHtml({ path: 'public\\\\' + fileObj.relativepath }, options).then((mammothResult) => {\n                if (mammothResult.messages.length > 0) {\n                  for (let x; x < mammothResult.messages.length; x++) {\n                    console.log(\"\\n\\n Errors:\", mammothResult.messages[x], '\\n\\n')\n                  }\n                }\n                return resolveSingle({ //resolving singleResult Promise\n                  fullpath: fileObj.fullpath,\n                  linuxfullpath: fileObj.linuxfullpath,\n                  filename: fileObj.filename,\n                  relativepath: fileObj.relativepath,\n                  linuxpath: fileObj.linuxpath,\n                  content: mammothResult.value\n                })\n              })\n            } else if (doc) {\n              if (!activeFilters.includeDoc) resolveSingle({})\n              //[Doc procedure] (WordExtractor)\n              const getDocContent = async (fileObj) => {\n                const docExtractor = new WordExtractor()\n                const extractedContent = await docExtractor.extract('public\\\\' + fileObj.relativepath).then(function (doc) {\n                  resolveSingle({ //resolving singleResult Promise\n                    fullpath: fileObj.fullpath,\n                    linuxfullpath: fileObj.linuxfullpath,\n                    filename: fileObj.filename,\n                    relativepath: fileObj.relativepath,\n                    linuxpath: fileObj.linuxpath,\n                    content: JSON.stringify(doc.getBody())\n                  })\n                })\n              }\n              getDocContent(fileObj)\n            } else {\n              rejectSingle(\"File is not pdf, docx or doc!\") //rejecting singleResult Promise\n            }\n          }).then(singleResult => {\n            return singleResult\n          })\n          //singleResult Promise resolved/rejected\n\n          await analyzedFiles.push({\n            fullpath: fileObj.fullpath,\n            filename: fileObj.filename,\n            relativepath: fileObj.relativepath,\n            linuxpath: fileObj.linuxpath,\n            content: (singleResult && singleResult.content) ? singleResult.content : \"\"\n          })\n\n          if (analyzedFiles.length === filesToAnalyze.length) {\n            //Qui dovrebbe salvare il json di containerResult\n            const mappedArchiveStr = JSON.stringify([...analyzedFiles])\n            console.log(\"|||||||||||||||||||||||| started writing a json file representing the archive\")\n            const todayDate = new Date()\n            const todayUTC = todayDate.toUTCString()\n            const writeFileName = todayUTC.slice(0, 16)\n            await fs.writeFileSync(\"mappedArchive\\\\\" + writeFileName + \".json\", mappedArchiveStr)\n            console.log(\"|||||||||||||||||||||||| finished writing json file\")\n            resolveContainer(analyzedFiles) //resolving containerResult Promise\n          } else {\n            console.log(\"(analyzedFiles.length !== filesToAnalyze.length) fileIndex attuale:\", fileIndex)\n          }\n        })\n      } catch (errContainer) {\n        console.log(\"rejectContainer with error:\", errContainer)\n        rejectContainer(errContainer) //rejecting containerResult Promise\n      }\n    }).then((containerResult) => {\n      return containerResult\n    })//containerResult Promise resolved/rejected\n  }\n\n  const filteredDocs = dataToFilter.filter(d => {\n    if (d.content) {\n      if (!activeFilters.includePdf && d.filename.includes(\".pdf\")) return false\n      if (!activeFilters.includeDocx && d.filename.includes(\".docx\")) return false\n      if (!activeFilters.includeDoc && d.filename.includes(\".doc\") && d.filename.split(\".doc\")[1].length === 0) return false\n      //Eventuali affinamenti del filtro andranno qui \n      const cleanContent = d.content.replace(/[^\\w\\s]/gi, '').toLowerCase()\n      let result = null\n      if (activeFilters.indCorteCost) {\n        let target = \".ind corte\".replace(/[^\\w\\s]/gi, '')\n        result = cleanContent.includes(target)\n      } else {\n        result = cleanContent.includes(searchterms.replace(/[^\\w\\s]/gi, '').toLowerCase())\n      }\n      return result\n    } else {\n      return false\n    }\n  })\n\n  const checkIfConversionNeeded = (fileObjArr) => {\n    const names = fileObjArr.map(el => el.filename)\n    return names.some(name => (name.includes(\".docx\") || name.includes(\".doc\")))\n  }\n\n  if (checkIfConversionNeeded(filteredDocs)) {\n    let convertedDocs = []\n    conversionFinished = false\n\n    for (let x = 0; x < filteredDocs.length; x++) {\n      const d = filteredDocs[x]\n      const libreResult = await new Promise((resolveLibre, rejectLibre) => {\n        if (d && d.filename) {\n          const extend = '.pdf'\n          const enterPath = d.fullpath\n          const outputPath = d.filename.includes(\".docx\") ? d.fullpath.split('.docx')[0] + extend : d.fullpath.split('.doc')[0] + extend\n          const file = fs.readFileSync(enterPath)\n          libre.convert(file, extend, undefined, async (err, done) => {\n            if (err) {\n              console.log(`\\n\\n Error converting file: ${err} \\n\\n`)\n              rejectLibre(err)\n            } else {\n              // writeFileSync funziona, crea veramente il pdf, ma sarebbe troppo pesante farlo ogni volta per tutti i file, quindi mi limito a sfruttare il buffer: done.\n              //await fs.writeFileSync(outputPath, done)\n              resolveLibre(done)\n            }\n          })\n        } else {\n          console.log(\"Error - Caso inaspettato con questo file: \", filteredDocs[x])\n        }\n      }).then(libreResult => {\n        return libreResult\n      })\n\n      let mapResult = {}\n\n      if (libreResult && libreResult.byteLength) {\n        mapResult = {\n          fullpath: d.fullpath,\n          filename: d.filename,\n          relativepath: d.relativepath,\n          linuxpath: d.linuxpath,\n          content: d.filename.includes(\".docx\") ? d.content : \"\",\n          buffer: libreResult\n        }\n      } else {\n        mapResult = {\n          fullpath: d.fullpath,\n          filename: d.filename,\n          relativepath: d.relativepath,\n          linuxpath: d.linuxpath,\n          content: d.filename.includes(\".docx\") ? d.content : \"\"\n        }\n      }\n\n      const updateConvertedDocs = (convertedArr, originalArr) => {\n        const resultArr = [...convertedArr, mapResult]\n        if (resultArr.length === originalArr.length) {\n          conversionFinished = true\n        }\n        return resultArr\n      }\n      convertedDocs = await updateConvertedDocs(convertedDocs, filteredDocs)\n    }\n\n    (function forceWait() {\n      if (!conversionFinished) {\n        setTimeout(forceWait, 1000)\n      } else {\n        return res.status(200).json({ //Success - Trovato qualcosa per i searchterms immessi, e nessun errore.\n          success: true,\n          data: { filteredDocs: convertedDocs }\n        })\n      }\n    })()\n  } else {\n    return res.status(200).json({ //Success - Trovato qualcosa per i searchterms immessi, e nessun errore.\n      success: true,\n      data: { filteredDocs: filteredDocs }\n    })\n  }\n}"]},"metadata":{},"sourceType":"module"}