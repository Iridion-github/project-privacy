{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Row, Col, Form, ButtonGroup, Button, Badge } from 'react-bootstrap';\nimport { useEffect, useState } from 'react';\nexport const CustomAutoSuggest = function (props) {\n  const {\n    formGroupClass = \"\",\n    formGroupLabel = \"\",\n    formLabelClass = \"\",\n    formGroupId = \"\",\n    formGroupStyle = {},\n    validationFunc = () => true,\n    type = \"\",\n    label = \"\",\n    textmuted = false,\n    suggestions = [],\n    shownSuggestions = [],\n    renderSuggestion = item => item.value ? item.value : item,\n    onSuggestionClick = () => {},\n    getSuggestionValue = null,\n    onChange = val => val,\n    isDisabled = false,\n    selectableOptions = [],\n    value = \"\",\n    placeholder,\n    getOptionValue = el => el && el !== \"\" ? el : null,\n    getOptionStyle = () => ({}),\n    autoSuggestItems = [],\n    onRevealSuggestions = null,\n    onRemove = null,\n    onRemoveAll = null,\n    isTriggeredOnFocus = true\n  } = props;\n  const {\n    0: isFocused,\n    1: setIsFocused\n  } = useState(false);\n  const {\n    0: isListOpen,\n    1: setIsListOpen\n  } = useState(false);\n  const basicStyle = {};\n\n  const handleAutosuggestChange = event => {\n    if (validationFunc(event.target.value)) {\n      onRevealSuggestions(event.target.value);\n\n      if (event.target.value.length >= 3) {\n        setIsListOpen(true);\n      } else {\n        setIsListOpen(false);\n      }\n\n      onChange(event.target.value);\n    } else {\n      return;\n    }\n  };\n\n  const handleAutosuggestClick = item => {\n    onSuggestionClick(getSuggestionValue ? getSuggestionValue(item) : item);\n    disableFocus();\n  };\n\n  const enableFocus = () => {\n    setIsFocused(true);\n  };\n\n  const disableFocus = () => {\n    setIsFocused(false);\n  };\n\n  useEffect(() => {//console.log(\"AutoSuggest state has changed - props: \", props)\n  });\n  return __jsx(Form.Group, {\n    controlId: \"customAutosuggest_\" + formGroupId,\n    className: formGroupClass + \" form-with-on-blur\",\n    style: formGroupStyle ? _objectSpread(_objectSpread({}, basicStyle), formGroupStyle) : basicStyle,\n    onBlur: disableFocus\n  }, __jsx(Form.Label, {\n    className: formLabelClass\n  }, formGroupLabel), __jsx(Row, {\n    className: \"w-100 ml-0 mr-0\"\n  }, __jsx(Col, {\n    md: 6,\n    className: \"pl-1 pr-1\"\n  }, __jsx(Row, {\n    className: \"w-100 ml-0 mr-0\"\n  }, __jsx(Col, {\n    md: 12,\n    className: \"pl-1 pr-1\"\n  }, __jsx(Form.Control, {\n    type: type,\n    placeholder: placeholder,\n    onChange: event => handleAutosuggestChange(event),\n    value: value,\n    onMouseDown: enableFocus\n  })))), __jsx(Col, {\n    md: 6,\n    className: \"pl-1 pr-1\"\n  }, autoSuggestItems && autoSuggestItems.length > 0 && __jsx(Row, {\n    className: \"w-100 ml-0 mr-0\"\n  }, __jsx(Col, {\n    md: 10,\n    className: \"pl-0 pr-0\"\n  }, autoSuggestItems.map(item => __jsx(Badge, {\n    variant: \"info\",\n    className: \"mr-1\",\n    key: item.value ? item.value : item[Object.keys(item)[0]]\n  }, item.label ? item.label : item[Object.keys(item)[0]], __jsx(Button, {\n    size: \"sm\",\n    variant: \"danger\",\n    className: \"ml-1 p-0\",\n    style: {\n      lineHeight: \"1\",\n      height: \"16px\",\n      width: \"16px\"\n    },\n    onMouseDown: () => onRemove((item === null || item === void 0 ? void 0 : item.value) ? item.value : item)\n  }, __jsx(\"i\", {\n    className: \"fas fa-times p-0\"\n  }))))), __jsx(Col, {\n    md: 2,\n    className: \"pl-0 pr-0 text-right\"\n  }, __jsx(Button, {\n    variant: \"danger\",\n    size: \"sm\",\n    onClick: onRemoveAll\n  }, __jsx(\"i\", {\n    className: \"fas fa-trash\"\n  })))))), __jsx(Row, {\n    className: \"auto-suggest-list-container w-100 text-center ml-0 mr-0\"\n  }, isListOpen && shownSuggestions.length > 0 && isFocused && props.shownSuggestions.map((sugg, i) => __jsx(Row, {\n    className: \"w-100 pl-0 pr-0 ml-0 mr-0\",\n    key: i\n  }, __jsx(Col, {\n    md: 12,\n    className: \"\"\n  }, __jsx(Button, {\n    block: true,\n    size: \"sm\",\n    variant: \"outline-info\",\n    onMouseDown: () => handleAutosuggestClick(sugg)\n  }, props.renderSuggestion(sugg)))))), textmuted && __jsx(Form.Text, {\n    className: \"text-muted pl-5\"\n  }, textmuted));\n};\n/*\n------------------------------[STATE]------------------------------\nconst suggestionsFromDb = [\n    {\n      id: 0,\n      nome: \"alfredo\",\n      cognome: \"mantovani\",\n      telefono: \"000000001\"\n    },\n    {\n      id: 1,\n      nome: \"mario\",\n      cognome: \"rossi\",\n      telefono: \"000000002\"\n    },\n    {\n      id: 2,\n      nome: \"giovanni\",\n      cognome: \"storti\",\n      telefono: \"000000002\"\n    },\n    {\n      id: 3,\n      nome: \"giacomo\",\n      cognome: \"poretti\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 5,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 6,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 7,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 8,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 9,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 10,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    }\n  ]\n\n  const filterFunction = (option, inputVal) => {\n    if (\n      option.cognome.toLowerCase().includes(inputVal.toLowerCase())\n      || option.nome.toLowerCase().includes(inputVal.toLowerCase())\n    ) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  const [suggestions, setSuggestions] = useState(suggestionsFromDb)\n\n  const [shownSuggestions, setShownSuggestions] = useState([])\n\n\n  const [autoSuggestValue, setAutoSuggestValue] = useState(\"\")\n  const [autoSuggestItems, setAutoSuggestItems] = useState([])\n\n  const onChangeAutosuggestValue = (val) => {\n    setAutoSuggestValue(val)\n  }\n\n  const AutosuggestItemsInsert = (val) => {\n    setAutoSuggestItems([...autoSuggestItems, val])\n  }\n\n  const handleFilterOptions = (suggestions, inputVal) => {\n    const filteredSuggestions = [...suggestions].filter(opt => filterFunction(opt, inputVal))\n    return filteredSuggestions\n  }\n\n  const handleRevealSuggestions = (inputVal) => {\n    const filteredSuggestions = handleFilterOptions(suggestions, inputVal)\n    setShownSuggestions(filteredSuggestions)\n  }\n\n  const AutosuggestItemsRemove = (val) => {\n    const filteredArr = [...autoSuggestItems].filter(items => items.id !== val.id)\n    setAutoSuggestItems(filteredArr)\n  }\n\n  const AutosuggestItemsRemoveAll = () => {\n    setAutoSuggestItems([])\n  }\n\n\n------------------------------[RETURN]------------------------------\n<CustomAutoSuggest\n            formGroupId=\"formGroupId\"\n            formGroupLabel=\"Prova Label\"\n            formGroupClassName=\"prova-class-name\"\n            type=\"text\"\n            placeholder=\"Prova placeholder\"\n            onChange={onChangeAutosuggestValue}\n            value={autoSuggestValue}\n            renderSuggestion={item => `${item.nome} | ${item.cognome}`}\n            suggestions={suggestions}\n            shownSuggestions={shownSuggestions}\n            onSuggestionClick={AutosuggestItemsInsert}\n            onRevealSuggestions={handleRevealSuggestions}\n            onRemove={AutosuggestItemsRemove}\n            onRemoveAll={AutosuggestItemsRemoveAll}\n            onSuggestionsClear={() => { }}\n            //getSuggestionValue={item => item.nome}\n            autoSuggestItems={autoSuggestItems}\n            //isTriggeredOnFocus={false}\n            textmuted={\"this is text muted\"}\n          />\n*/","map":null,"metadata":{},"sourceType":"module"}