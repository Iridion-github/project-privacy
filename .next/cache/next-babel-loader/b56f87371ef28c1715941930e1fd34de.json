{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Form, Row, Col } from 'react-bootstrap';\nimport Select from 'react-select';\nexport const ReactSelect = function (props) {\n  const getStandardTheme = theme => {\n    //console.log(\"full theme:\", theme)\n    return _objectSpread(_objectSpread({}, theme), {}, {\n      //borderRadius: 100,\n      colors: _objectSpread(_objectSpread({}, theme.colors), {}, {\n        primary: '#17a2b8' //primary25: 'hotpink',\n        //primary: 'black',\n\n      })\n    });\n  };\n\n  const {\n    formGroupClass = \"\",\n    formLabelClass = \"\",\n    isMulti = false,\n    validationFunc = () => true,\n    label = \"\",\n    textmuted = false,\n    onChange = val => val,\n    isDisabled = false,\n    selectableOptions = [],\n    defaultValue = \"\",\n    placeholder,\n    getOptionValue = el => el && el !== \"\" ? el : null,\n    getOptionStyle = () => ({}),\n    getCustomTheme = null\n  } = props;\n\n  const handleChange = val => {\n    if (validationFunc(val)) {\n      onChange(val);\n      return;\n    }\n  };\n\n  return __jsx(Form.Group, {\n    className: formGroupClass\n  }, __jsx(Form.Label, {\n    className: formLabelClass\n  }, label), __jsx(Row, {\n    className: \"w-100 ml-0 mr-0\"\n  }, __jsx(Col, {\n    md: 12,\n    className: \"pl-1 pr-1\"\n  }, __jsx(Select, {\n    isMulti: isMulti,\n    options: selectableOptions,\n    disabled: isDisabled,\n    defaultValue: defaultValue,\n    placeholder: placeholder,\n    onChange: handleChange,\n    getOptionValue: getOptionValue,\n    theme: getCustomTheme ? getCustomTheme : getStandardTheme\n  }))), textmuted && __jsx(Form.Text, {\n    className: \"text-muted\"\n  }, textmuted));\n};","map":null,"metadata":{},"sourceType":"module"}