{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport { useLanguage } from '../../context/siteLanguageContext'; //context\n\nimport { Row, Col, Button, Form } from 'react-bootstrap';\nimport { ArticlesRow } from \"./ArticlesRow\";\nimport { MyPagination } from \"../layout/MyPagination\";\nexport const ArticlesList = function (props) {\n  const siteLanguage = useLanguage(); //context\n\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(1);\n  const {\n    0: elementsPerPage,\n    1: setElementsPerPage\n  } = useState(6);\n  const {\n    0: elementsPerRow,\n    1: setElementsPerRow\n  } = useState(2);\n  const articlesRows = !props.filtered ? props.allArticles.reduce(function (articles, acc, i) {\n    if (i % elementsPerRow) {\n      articles[articles.length - 1].push(acc);\n    } else {\n      articles.push([acc]);\n    }\n\n    return articles;\n  }, []) : props.searchFilter(props.allArticles, props.searchInput, siteLanguage).reduce(function (articles, acc, i) {\n    if (i % elementsPerRow) {\n      articles[articles.length - 1].push(acc);\n    } else {\n      articles.push([acc]);\n    }\n\n    return articles;\n  }, []);\n  const visibleRows = articlesRows.filter((elem, index) => index >= currentPage * elementsPerPage / elementsPerRow - elementsPerPage / elementsPerRow && index < currentPage * elementsPerPage / elementsPerRow);\n\n  const searchInputOnChange = value => {\n    if (value.length < 3) {\n      props.setSearchInput(value);\n      props.setFiltered(false);\n    } else {\n      props.setSearchInput(value);\n    }\n  };\n\n  return __jsx(Row, {\n    className: \"\"\n  }, __jsx(Row, {\n    className: \"w-100 m-auto\"\n  }, __jsx(Col, {\n    md: 6\n  }, __jsx(\"h1\", null, siteLanguage === \"ita\" ? \"Ultimi Articoli\" : \"Latest Articles\")), __jsx(Col, {\n    sm: 6,\n    className: \"justify-content-end mb-1 flex-row\"\n  }, __jsx(Form, {\n    inline: true,\n    className: \"justify-content-end w-100 p-0 flex-row\"\n  }, __jsx(Form.Group, {\n    className: \"w-100\",\n    controlId: \"formBasicEmail\"\n  }, __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: siteLanguage === \"ita\" ? \"Cerca\" : \"Search\",\n    onChange: event => searchInputOnChange(event.target.value),\n    className: \"w-75 inline-form-custom\"\n  }), __jsx(Button, {\n    variant: !props.filtered ? \"info\" : \"danger\",\n    disabled: props.searchInput.length < 3,\n    onClick: !props.filtered ? () => props.setFiltered(true) : () => props.setFiltered(false),\n    className: \"ml-1\"\n  }, !props.filtered ? __jsx(\"i\", {\n    className: \"fas fa-search\"\n  }) : __jsx(\"i\", {\n    className: \"fas fa-times-circle\"\n  })))))), visibleRows.length > 0 && __jsx(MyPagination, {\n    totalPages: !props.filtered ? Math.ceil(props.allArticles.length / elementsPerPage) : Math.ceil(props.searchFilter(props.allArticles, props.searchInput, siteLanguage).length / elementsPerPage),\n    currentPage: currentPage,\n    setCurrentPage: setCurrentPage,\n    elementsPerPage: elementsPerPage,\n    totalElements: !props.filtered ? props.allArticles.length : props.searchFilter(props.allArticles, props.searchInput, siteLanguage).length\n  }), __jsx(Row, {\n    className: \"w-100 mobile-compatible m-auto\"\n  }, __jsx(Col, {\n    md: 12,\n    className: visibleRows.length > 0 ? \"resulting-article-container\" : \"d-flex resulting-article-container align-items-center justify-content-center\"\n  }, visibleRows.length > 0 ? visibleRows.map((row, i) => __jsx(ArticlesRow, {\n    setOpenedArticle: props.setOpenedArticle,\n    key: i,\n    articles: row\n  })) : __jsx(Row, {\n    className: \"w-100 text-center justify-content-center\"\n  }, siteLanguage === \"ita\" ? \"Nessun risultato trovato\" : \"No result found\"))), visibleRows.length > 0 && __jsx(MyPagination, {\n    totalPages: !props.filtered ? Math.ceil(props.allArticles.length / elementsPerPage) : Math.ceil(props.searchFilter(props.allArticles, props.searchInput, siteLanguage).length / elementsPerPage),\n    currentPage: currentPage,\n    setCurrentPage: setCurrentPage,\n    elementsPerPage: elementsPerPage,\n    totalElements: !props.filtered ? props.allArticles.length : props.searchFilter(props.allArticles, props.searchInput, siteLanguage).length\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}