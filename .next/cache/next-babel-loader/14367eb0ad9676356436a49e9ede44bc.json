{"ast":null,"code":"var _jsxFileName = \"/home/iridion/Desktop/Repos/Freelancer/project-privacy/components/archive/ui/CustomAutoSuggest.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Row, Col, Form, ButtonGroup, Button, Badge } from 'react-bootstrap';\nimport { useEffect, useState } from 'react';\nexport const CustomAutoSuggest = function (props) {\n  const {\n    formGroupClass = \"\",\n    formGroupLabel = \"\",\n    formLabelClass = \"\",\n    formGroupId = \"\",\n    formGroupStyle = {},\n    validationFunc = () => true,\n    type = \"\",\n    label = \"\",\n    textmuted = false,\n    suggestions = [],\n    shownSuggestions = [],\n    renderSuggestion = item => item.value ? item.value : item,\n    onSuggestionClick = () => {},\n    getSuggestionValue = null,\n    onChange = val => val,\n    isDisabled = false,\n    selectableOptions = [],\n    value = \"\",\n    placeholder,\n    getOptionValue = el => el && el !== \"\" ? el : null,\n    getOptionStyle = () => ({}),\n    autoSuggestItems = [],\n    onRevealSuggestions = null,\n    onRemove = null,\n    onRemoveAll = null,\n    isTriggeredOnFocus = true\n  } = props;\n  const {\n    0: isFocused,\n    1: setIsFocused\n  } = useState(false);\n  const {\n    0: isListOpen,\n    1: setIsListOpen\n  } = useState(false);\n  const basicStyle = {};\n\n  const handleAutosuggestChange = event => {\n    if (validationFunc(event.target.value)) {\n      onRevealSuggestions(event.target.value);\n\n      if (event.target.value.length >= 3) {\n        setIsListOpen(true);\n      } else {\n        setIsListOpen(false);\n      }\n\n      onChange(event.target.value);\n    } else {\n      return;\n    }\n  };\n\n  const handleAutosuggestClick = item => {\n    onSuggestionClick(getSuggestionValue ? getSuggestionValue(item) : item);\n    disableFocus();\n  };\n\n  const enableFocus = () => {\n    setIsFocused(true);\n  };\n\n  const disableFocus = () => {\n    setIsFocused(false);\n  };\n\n  useEffect(() => {//console.log(\"AutoSuggest state has changed - props: \", props)\n  });\n  return __jsx(Form.Group, {\n    controlId: \"customAutosuggest_\" + formGroupId,\n    className: formGroupClass + \" form-with-on-blur\",\n    style: formGroupStyle ? _objectSpread(_objectSpread({}, basicStyle), formGroupStyle) : basicStyle,\n    onBlur: disableFocus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, __jsx(Form.Label, {\n    className: formLabelClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, formGroupLabel), __jsx(Row, {\n    className: \"w-100 ml-0 mr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    md: 6,\n    className: \"pl-1 pr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    className: \"w-100 ml-0 mr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    md: 12,\n    className: \"pl-1 pr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, __jsx(Form.Control, {\n    type: type,\n    placeholder: placeholder,\n    onChange: event => handleAutosuggestChange(event),\n    value: value,\n    onMouseDown: enableFocus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  })))), __jsx(Col, {\n    md: 6,\n    className: \"pl-1 pr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, autoSuggestItems && autoSuggestItems.length > 0 && __jsx(Row, {\n    className: \"w-100 ml-0 mr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, __jsx(Col, {\n    md: 10,\n    className: \"pl-0 pr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  }, autoSuggestItems.map(item => __jsx(Badge, {\n    variant: \"info\",\n    className: \"mr-1\",\n    key: item.value ? item.value : item[Object.keys(item)[0]],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 19\n    }\n  }, item.label ? item.label : item[Object.keys(item)[0]], __jsx(Button, {\n    size: \"sm\",\n    variant: \"danger\",\n    className: \"ml-1 p-0\",\n    style: {\n      lineHeight: \"1\",\n      height: \"16px\",\n      width: \"16px\"\n    },\n    onMouseDown: () => onRemove((item === null || item === void 0 ? void 0 : item.value) ? item.value : item),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, __jsx(\"i\", {\n    className: \"fas fa-times p-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 23\n    }\n  }))))), __jsx(Col, {\n    md: 2,\n    className: \"pl-0 pr-0 text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    variant: \"danger\",\n    size: \"sm\",\n    onClick: onRemoveAll,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, __jsx(\"i\", {\n    className: \"fas fa-trash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 19\n    }\n  })))))), __jsx(Row, {\n    className: \"auto-suggest-list-container w-100 text-center ml-0 mr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, isListOpen && shownSuggestions.length > 0 && isFocused && props.shownSuggestions.map((sugg, i) => __jsx(Row, {\n    className: \"w-100 pl-0 pr-0 ml-0 mr-0\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, __jsx(Col, {\n    md: 12,\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    block: true,\n    size: \"sm\",\n    variant: \"outline-info\",\n    onMouseDown: () => handleAutosuggestClick(sugg),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, props.renderSuggestion(sugg)))))), textmuted && __jsx(Form.Text, {\n    className: \"text-muted pl-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }, textmuted));\n};\n/*\n------------------------------[STATE]------------------------------\nconst suggestionsFromDb = [\n    {\n      id: 0,\n      nome: \"alfredo\",\n      cognome: \"mantovani\",\n      telefono: \"000000001\"\n    },\n    {\n      id: 1,\n      nome: \"mario\",\n      cognome: \"rossi\",\n      telefono: \"000000002\"\n    },\n    {\n      id: 2,\n      nome: \"giovanni\",\n      cognome: \"storti\",\n      telefono: \"000000002\"\n    },\n    {\n      id: 3,\n      nome: \"giacomo\",\n      cognome: \"poretti\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 5,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 6,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 7,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 8,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 9,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 10,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    }\n  ]\n\n  const filterFunction = (option, inputVal) => {\n    if (\n      option.cognome.toLowerCase().includes(inputVal.toLowerCase())\n      || option.nome.toLowerCase().includes(inputVal.toLowerCase())\n    ) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  const [suggestions, setSuggestions] = useState(suggestionsFromDb)\n\n  const [shownSuggestions, setShownSuggestions] = useState([])\n\n\n  const [autoSuggestValue, setAutoSuggestValue] = useState(\"\")\n  const [autoSuggestItems, setAutoSuggestItems] = useState([])\n\n  const onChangeAutosuggestValue = (val) => {\n    setAutoSuggestValue(val)\n  }\n\n  const AutosuggestItemsInsert = (val) => {\n    setAutoSuggestItems([...autoSuggestItems, val])\n  }\n\n  const handleFilterOptions = (suggestions, inputVal) => {\n    const filteredSuggestions = [...suggestions].filter(opt => filterFunction(opt, inputVal))\n    return filteredSuggestions\n  }\n\n  const handleRevealSuggestions = (inputVal) => {\n    const filteredSuggestions = handleFilterOptions(suggestions, inputVal)\n    setShownSuggestions(filteredSuggestions)\n  }\n\n  const AutosuggestItemsRemove = (val) => {\n    const filteredArr = [...autoSuggestItems].filter(items => items.id !== val.id)\n    setAutoSuggestItems(filteredArr)\n  }\n\n  const AutosuggestItemsRemoveAll = () => {\n    setAutoSuggestItems([])\n  }\n\n\n------------------------------[RETURN]------------------------------\n<CustomAutoSuggest\n            formGroupId=\"formGroupId\"\n            formGroupLabel=\"Prova Label\"\n            formGroupClassName=\"prova-class-name\"\n            type=\"text\"\n            placeholder=\"Prova placeholder\"\n            onChange={onChangeAutosuggestValue}\n            value={autoSuggestValue}\n            renderSuggestion={item => `${item.nome} | ${item.cognome}`}\n            suggestions={suggestions}\n            shownSuggestions={shownSuggestions}\n            onSuggestionClick={AutosuggestItemsInsert}\n            onRevealSuggestions={handleRevealSuggestions}\n            onRemove={AutosuggestItemsRemove}\n            onRemoveAll={AutosuggestItemsRemoveAll}\n            onSuggestionsClear={() => { }}\n            //getSuggestionValue={item => item.nome}\n            autoSuggestItems={autoSuggestItems}\n            //isTriggeredOnFocus={false}\n            textmuted={\"this is text muted\"}\n          />\n*/","map":{"version":3,"sources":["/home/iridion/Desktop/Repos/Freelancer/project-privacy/components/archive/ui/CustomAutoSuggest.js"],"names":["Row","Col","Form","ButtonGroup","Button","Badge","useEffect","useState","CustomAutoSuggest","props","formGroupClass","formGroupLabel","formLabelClass","formGroupId","formGroupStyle","validationFunc","type","label","textmuted","suggestions","shownSuggestions","renderSuggestion","item","value","onSuggestionClick","getSuggestionValue","onChange","val","isDisabled","selectableOptions","placeholder","getOptionValue","el","getOptionStyle","autoSuggestItems","onRevealSuggestions","onRemove","onRemoveAll","isTriggeredOnFocus","isFocused","setIsFocused","isListOpen","setIsListOpen","basicStyle","handleAutosuggestChange","event","target","length","handleAutosuggestClick","disableFocus","enableFocus","map","Object","keys","lineHeight","height","width","sugg","i"],"mappings":"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":["import {\n  Row,\n  Col,\n  Form,\n  ButtonGroup,\n  Button,\n  Badge\n} from 'react-bootstrap'\nimport { useEffect, useState } from 'react'\n\n\nexport const CustomAutoSuggest = function (props) {\n\n  const {\n    formGroupClass = \"\",\n    formGroupLabel = \"\",\n    formLabelClass = \"\",\n    formGroupId = \"\",\n    formGroupStyle = {},\n    validationFunc = () => true,\n    type = \"\",\n    label = \"\",\n    textmuted = false,\n    suggestions = [],\n    shownSuggestions = [],\n    renderSuggestion = item => item.value ? item.value : item,\n    onSuggestionClick = () => { },\n    getSuggestionValue = null,\n    onChange = val => val,\n    isDisabled = false,\n    selectableOptions = [],\n    value = \"\",\n    placeholder,\n    getOptionValue = el => (el && el !== \"\") ? el : null,\n    getOptionStyle = () => ({}),\n    autoSuggestItems = [],\n    onRevealSuggestions = null,\n    onRemove = null,\n    onRemoveAll = null,\n    isTriggeredOnFocus = true,\n  } = props\n\n  const [isFocused, setIsFocused] = useState(false)\n  const [isListOpen, setIsListOpen] = useState(false)\n  const basicStyle = {}\n\n  const handleAutosuggestChange = (event) => {\n    if (validationFunc(event.target.value)) {\n      onRevealSuggestions(event.target.value)\n      if (event.target.value.length >= 3) {\n        setIsListOpen(true)\n      } else {\n        setIsListOpen(false)\n      }\n      onChange(event.target.value)\n    } else {\n      return\n    }\n  }\n\n  const handleAutosuggestClick = (item) => {\n    onSuggestionClick(getSuggestionValue ? getSuggestionValue(item) : item)\n    disableFocus()\n  }\n\n  const enableFocus = () => {\n    setIsFocused(true)\n  }\n\n  const disableFocus = () => {\n    setIsFocused(false)\n  }\n\n  useEffect(() => {\n    //console.log(\"AutoSuggest state has changed - props: \", props)\n  })\n\n  return (\n    <Form.Group\n      controlId={\"customAutosuggest_\" + formGroupId}\n      className={formGroupClass + \" form-with-on-blur\"}\n      style={formGroupStyle ? { ...basicStyle, ...formGroupStyle } : basicStyle}\n      onBlur={disableFocus}\n    >\n      <Form.Label className={formLabelClass}>{formGroupLabel}</Form.Label>\n      <Row className=\"w-100 ml-0 mr-0\">\n        <Col md={6} className=\"pl-1 pr-1\">\n          <Row className=\"w-100 ml-0 mr-0\">\n            <Col md={12} className=\"pl-1 pr-1\">\n              <Form.Control\n                type={type}\n                placeholder={placeholder}\n                onChange={(event) => handleAutosuggestChange(event)}\n                value={value}\n                onMouseDown={enableFocus}\n              />\n            </Col>\n          </Row>\n        </Col>\n        <Col md={6} className=\"pl-1 pr-1\">\n          {(autoSuggestItems && autoSuggestItems.length > 0) &&\n            <Row className=\"w-100 ml-0 mr-0\">\n              <Col md={10} className=\"pl-0 pr-0\">\n                {autoSuggestItems.map(item => (\n                  <Badge\n                    variant=\"info\"\n                    className=\"mr-1\"\n                    key={item.value ? item.value : item[Object.keys(item)[0]]}\n                  >\n                    {item.label ? item.label : item[Object.keys(item)[0]]}\n                    <Button\n                      size=\"sm\"\n                      variant=\"danger\"\n                      className=\"ml-1 p-0\"\n                      style={{\n                        lineHeight: \"1\",\n                        height: \"16px\",\n                        width: \"16px\",\n                      }}\n                      onMouseDown={() => onRemove(item?.value ? item.value : item)}\n                    >\n                      <i\n                        className=\"fas fa-times p-0\"\n                      ></i>\n                    </Button>\n                  </Badge>\n                ))}\n              </Col>\n              <Col md={2} className=\"pl-0 pr-0 text-right\">\n                <Button\n                  variant=\"danger\"\n                  size=\"sm\"\n                  onClick={onRemoveAll}\n                >\n                  <i className=\"fas fa-trash\"></i>\n                </Button>\n              </Col>\n            </Row>}\n        </Col>\n      </Row>\n      <Row className=\"auto-suggest-list-container w-100 text-center ml-0 mr-0\">\n        {\n          (isListOpen && shownSuggestions.length > 0 && isFocused) && props.shownSuggestions.map((sugg, i) => (\n            <Row className=\"w-100 pl-0 pr-0 ml-0 mr-0\" key={i}>\n              <Col md={12} className=\"\">\n                <Button\n                  block\n                  size=\"sm\"\n                  variant=\"outline-info\"\n                  onMouseDown={() => handleAutosuggestClick(sugg)}\n                >\n                  {props.renderSuggestion(sugg)}\n                </Button>\n              </Col>\n            </Row>\n          ))\n        }\n      </Row>\n      {textmuted && <Form.Text className=\"text-muted pl-5\">\n        {textmuted}\n      </Form.Text>}\n    </Form.Group>\n  )\n}\n\n/*\n------------------------------[STATE]------------------------------\nconst suggestionsFromDb = [\n    {\n      id: 0,\n      nome: \"alfredo\",\n      cognome: \"mantovani\",\n      telefono: \"000000001\"\n    },\n    {\n      id: 1,\n      nome: \"mario\",\n      cognome: \"rossi\",\n      telefono: \"000000002\"\n    },\n    {\n      id: 2,\n      nome: \"giovanni\",\n      cognome: \"storti\",\n      telefono: \"000000002\"\n    },\n    {\n      id: 3,\n      nome: \"giacomo\",\n      cognome: \"poretti\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 5,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 6,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 7,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 8,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 9,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    },\n    {\n      id: 10,\n      nome: \"mauro\",\n      cognome: \"giacomoni\",\n      telefono: \"000000003\"\n    }\n  ]\n\n  const filterFunction = (option, inputVal) => {\n    if (\n      option.cognome.toLowerCase().includes(inputVal.toLowerCase())\n      || option.nome.toLowerCase().includes(inputVal.toLowerCase())\n    ) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  const [suggestions, setSuggestions] = useState(suggestionsFromDb)\n\n  const [shownSuggestions, setShownSuggestions] = useState([])\n\n\n  const [autoSuggestValue, setAutoSuggestValue] = useState(\"\")\n  const [autoSuggestItems, setAutoSuggestItems] = useState([])\n\n  const onChangeAutosuggestValue = (val) => {\n    setAutoSuggestValue(val)\n  }\n\n  const AutosuggestItemsInsert = (val) => {\n    setAutoSuggestItems([...autoSuggestItems, val])\n  }\n\n  const handleFilterOptions = (suggestions, inputVal) => {\n    const filteredSuggestions = [...suggestions].filter(opt => filterFunction(opt, inputVal))\n    return filteredSuggestions\n  }\n\n  const handleRevealSuggestions = (inputVal) => {\n    const filteredSuggestions = handleFilterOptions(suggestions, inputVal)\n    setShownSuggestions(filteredSuggestions)\n  }\n\n  const AutosuggestItemsRemove = (val) => {\n    const filteredArr = [...autoSuggestItems].filter(items => items.id !== val.id)\n    setAutoSuggestItems(filteredArr)\n  }\n\n  const AutosuggestItemsRemoveAll = () => {\n    setAutoSuggestItems([])\n  }\n\n\n------------------------------[RETURN]------------------------------\n<CustomAutoSuggest\n            formGroupId=\"formGroupId\"\n            formGroupLabel=\"Prova Label\"\n            formGroupClassName=\"prova-class-name\"\n            type=\"text\"\n            placeholder=\"Prova placeholder\"\n            onChange={onChangeAutosuggestValue}\n            value={autoSuggestValue}\n            renderSuggestion={item => `${item.nome} | ${item.cognome}`}\n            suggestions={suggestions}\n            shownSuggestions={shownSuggestions}\n            onSuggestionClick={AutosuggestItemsInsert}\n            onRevealSuggestions={handleRevealSuggestions}\n            onRemove={AutosuggestItemsRemove}\n            onRemoveAll={AutosuggestItemsRemoveAll}\n            onSuggestionsClear={() => { }}\n            //getSuggestionValue={item => item.nome}\n            autoSuggestItems={autoSuggestItems}\n            //isTriggeredOnFocus={false}\n            textmuted={\"this is text muted\"}\n          />\n*/"]},"metadata":{},"sourceType":"module"}