{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Row, Col, Button } from 'react-bootstrap';\nexport const Answers = function (props) {\n  const selectAnswer = answerIndex => {\n    const resultingAnswer = props.selectedAnswersList.map((elem, i) => i === answerIndex ? _objectSpread(_objectSpread({}, elem), {}, {\n      selected: true\n    }) : _objectSpread(_objectSpread({}, elem), {}, {\n      selected: false\n    }));\n    const resultingAllAnswers = props.allUserAnswers.map((elem, i) => i === props.questionIndex ? _objectSpread(_objectSpread({}, elem), {}, {\n      answers: resultingAnswer\n    }) : elem);\n    props.setSelectedAnswersList(resultingAllAnswers);\n  };\n\n  const printAnswer = (answerNumber, text) => {\n    const selected = props.selectedAnswersList[answerNumber - 1].selected;\n    const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    return __jsx(Button, {\n      key: answerNumber,\n      type: \"radio\",\n      size: \"lg\",\n      variant: selected ? \"info\" : \"outline-info\",\n      block: true,\n      onClick: () => selectAnswer(answerNumber - 1)\n    }, letters[answerNumber - 1] + \") \", text);\n  };\n\n  return __jsx(Row, {\n    className: \"mb-4\"\n  }, __jsx(Col, null, props.answers.map((elem, i) => printAnswer(i + 1, elem.text))));\n};","map":null,"metadata":{},"sourceType":"module"}