{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { useLanguage } from '../../../context/siteLanguageContext'; //context\n\nimport { Row, Col, Button, Modal, InputGroup, FormControl } from 'react-bootstrap';\nexport var PdfViewer = function PdfViewer(props) {\n  var siteLanguage = useLanguage(); //context\n\n  var _useState = useState(null),\n      pdf = _useState[0],\n      setPdf = _useState[1];\n\n  var _useState2 = useState(false),\n      init = _useState2[0],\n      setInit = _useState2[1];\n\n  var _useState3 = useState(null),\n      maxPageNum = _useState3[0],\n      setMaxPageNum = _useState3[1];\n\n  var _useState4 = useState(1),\n      currentPage = _useState4[0],\n      setCurrentPage = _useState4[1];\n\n  var _useState5 = useState(1),\n      zoom = _useState5[0],\n      setZoom = _useState5[1];\n\n  var _useState6 = useState(null),\n      destination = _useState6[0],\n      setDestination = _useState6[1];\n\n  var renderPdf = function renderPdf(pdf, targetPage, targetZoom) {\n    var isMobile = screen.width < 400;\n    if (!targetZoom) targetZoom = 1;\n    setDestination(null);\n    pdf.getPage(targetPage).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(page) {\n        var canvas, ctx, viewport;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                canvas = document.getElementById(\"pdf_renderer\");\n                ctx = canvas.getContext('2d');\n                viewport = page.getViewport(targetZoom); //grandezza ed altezza del contenitore della pagina\n\n                canvas.width = viewport.width; //grandezza della pagina\n\n                canvas.height = viewport.height; //altezza della pagina\n\n                page.render({\n                  canvasContext: ctx,\n                  viewport: viewport\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  };\n\n  var pdfjsLibSetup = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var view;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              view = [];\n\n              if (!props.buffer) {\n                _context3.next = 5;\n                break;\n              }\n\n              _context3.next = 4;\n              return new Uint8Array(props.buffer.data);\n\n            case 4:\n              view = _context3.sent;\n\n            case 5:\n              _context3.next = 7;\n              return pdfjsLib.getDocument(props.buffer ? view : props.path).then( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(pdfResult) {\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          if (maxPageNum) {\n                            _context2.next = 3;\n                            break;\n                          }\n\n                          _context2.next = 3;\n                          return setMaxPageNum(pdfResult._pdfInfo.numPages);\n\n                        case 3:\n                          _context2.next = 5;\n                          return setPdf(pdfResult);\n\n                        case 5:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                return function (_x2) {\n                  return _ref3.apply(this, arguments);\n                };\n              }());\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function pdfjsLibSetup() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var goPrevPage = function goPrevPage() {\n    var prevPage = Number(currentPage - 1) > 0 ? Number(currentPage - 1) : 1;\n    setCurrentPage(prevPage);\n    renderPdf(pdf, prevPage, zoom);\n  };\n\n  var goNextPage = function goNextPage() {\n    var nextPage = Number(currentPage + 1) < maxPageNum ? Number(currentPage + 1) : maxPageNum;\n    setCurrentPage(nextPage);\n    renderPdf(pdf, nextPage, zoom);\n  };\n\n  var handleSetDestination = function handleSetDestination(dest) {\n    if (dest > maxPageNum) dest = maxPageNum;\n    if (dest < 1) dest = 1;\n    setDestination(dest);\n  };\n\n  var handleGoToDestination = function handleGoToDestination() {\n    setCurrentPage(destination);\n    renderPdf(pdf, destination, zoom);\n  };\n\n  var zoomIn = function zoomIn() {\n    var newZoomLevel = Number(zoom + 0.2);\n    setZoom(newZoomLevel);\n    renderPdf(pdf, currentPage, newZoomLevel);\n  };\n\n  var zoomOut = function zoomOut() {\n    var newZoomLevel = Number(zoom - 0.2);\n    setZoom(newZoomLevel);\n    renderPdf(pdf, currentPage, newZoomLevel);\n  };\n\n  var handleClose = function handleClose() {\n    setPdf(null);\n    setCurrentPage(1);\n    setInit(false);\n    setMaxPageNum(null);\n    setZoom(1);\n    setDestination(null);\n    props.onClose();\n  };\n\n  useEffect(function () {\n    if (props.show) {\n      if (!pdf) {\n        pdfjsLibSetup();\n      }\n\n      document.title = \"Pdf viewer - page: \" + currentPage + ' / ' + maxPageNum;\n\n      if (pdf && !init) {\n        setInit(true);\n        renderPdf(pdf, 1, zoom);\n      }\n    }\n  });\n  return __jsx(Row, {\n    className: \"w-100 m-auto\"\n  }, __jsx(Modal, {\n    className: \"justify-content-center\",\n    show: props.show,\n    onHide: handleClose,\n    dialogClassName: \"w-100 pdfviewer-dialog\"\n  }, __jsx(Modal.Header, {\n    className: \"w-100\"\n  }, __jsx(Modal.Title, {\n    className: \"row w-100\"\n  }, __jsx(Col, {\n    md: {\n      span: 4\n    },\n    className: \"text-center\"\n  }, __jsx(\"div\", {\n    id: \"zoom_controls\",\n    className: \"text-left\"\n  }, __jsx(Button, {\n    size: \"lg\",\n    id: \"zoom_out\",\n    onClick: zoomOut,\n    disabled: zoom <= 1,\n    variant: \"info\",\n    className: \"mr-1\"\n  }, __jsx(\"i\", {\n    className: \"fas fa-search-minus\"\n  })), __jsx(Button, {\n    size: \"lg\",\n    id: \"zoom_in\",\n    onClick: zoomIn,\n    disabled: zoom >= 2.5,\n    variant: \"info\"\n  }, __jsx(\"i\", {\n    className: \"fas fa-search-plus\"\n  })))), __jsx(Col, {\n    md: {\n      span: 4\n    },\n    className: \"text-center\"\n  }, __jsx(\"h2\", null, props.filename)), __jsx(Col, {\n    md: {\n      span: 4\n    },\n    className: \"m-0 p-0\"\n  }, __jsx(Row, {\n    className: \"w-100\"\n  }, __jsx(Col, {\n    md: {\n      span: 6\n    },\n    className: \"m-0 p-0 text-center\"\n  }, currentPage, \" / \", maxPageNum), __jsx(Col, {\n    md: {\n      span: 6\n    },\n    className: \"m-0 p-0 text-right\"\n  }, __jsx(Button, {\n    size: \"lg\",\n    onClick: handleClose,\n    variant: \"danger\"\n  }, __jsx(\"i\", {\n    className: \"fas fa-times\"\n  }))))))), __jsx(Modal.Body, {\n    className: \"\",\n    style: {\n      padding: 0\n    }\n  }, __jsx(\"div\", {\n    id: \"my_pdf_viewer\"\n  }, __jsx(\"div\", {\n    id: \"canvas_container\",\n    className: \"justify-content-center text-center\"\n  }, __jsx(\"canvas\", {\n    id: \"pdf_renderer\"\n  })))), __jsx(Modal.Footer, {\n    className: \"justify-content-center\"\n  }, __jsx(\"div\", {\n    id: \"navigation_controls\",\n    className: \"w-100 row\"\n  }, __jsx(Col, {\n    md: {\n      span: 2\n    },\n    className: \"mb-2\"\n  }, __jsx(Button, {\n    block: true,\n    id: \"go_previous\",\n    onClick: goPrevPage,\n    disabled: currentPage === 1,\n    variant: \"info\"\n  }, __jsx(\"i\", {\n    className: \"fas fa-arrow-left mr-1\"\n  }), __jsx(\"i\", {\n    className: \"far fa-file\"\n  }))), __jsx(Col, {\n    md: {\n      span: 4,\n      offset: 2\n    },\n    className: \"p-0 mb-2\"\n  }, __jsx(InputGroup, {\n    className: \"pl-4\"\n  }, __jsx(FormControl, {\n    className: \"mr-2\",\n    id: \"current_page\",\n    value: destination !== null ? destination : currentPage,\n    onChange: function onChange(event) {\n      return handleSetDestination(Number(event.target.value));\n    }\n  }), __jsx(\"span\", {\n    style: {\n      lineHeight: 2.2\n    }\n  }, \" / \", maxPageNum), __jsx(Button, {\n    size: \"md\",\n    className: \"ml-3 mr-1\",\n    onClick: handleGoToDestination,\n    disabled: destination === null || currentPage === destination,\n    variant: \"info\"\n  }, __jsx(\"i\", {\n    className: \"far fa-arrow-alt-circle-right\"\n  })))), __jsx(Col, {\n    md: {\n      span: 2,\n      offset: 2\n    },\n    className: \"mb-2\"\n  }, __jsx(Button, {\n    block: true,\n    id: \"go_next\",\n    onClick: goNextPage,\n    disabled: currentPage >= maxPageNum,\n    variant: \"info\"\n  }, __jsx(\"i\", {\n    className: \"far fa-file\"\n  }), __jsx(\"i\", {\n    className: \"fas fa-arrow-right ml-1\"\n  })))))));\n};","map":null,"metadata":{},"sourceType":"module"}