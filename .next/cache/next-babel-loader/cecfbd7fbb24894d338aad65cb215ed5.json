{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../../styles/Home.module.css';\nimport { useLanguage } from '../../context/siteLanguageContext'; //context\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { Row, Col } from 'react-bootstrap';\nimport { Header } from '../../components/layout/Header';\nimport { Navigation } from '../../components/layout/Navbar';\nimport { Breadcrumbs } from '../../components/layout/Breadcrumbs';\nimport { Footer } from '../../components/layout/Footer';\nimport { ArticleRead } from \"../../components/articles/ArticleRead\";\nimport { RelatedArticles } from \"../../components/articles/RelatedArticles\";\nimport { getRelatedArticles, getBreadcrumbsForArticles } from '../../utils/articles';\nimport { getBreadcrumbsForErrors } from '../../utils/errors';\nimport { ErrorComponent } from '../../components/layout/ErrorComponent';\nexport var __N_SSP = true;\nexport default function articoli(_ref) {\n  var glossarywords = _ref.glossarywords,\n      DBarticles = _ref.DBarticles;\n  var siteLanguage = useLanguage(); //context\n\n  var router = useRouter();\n  var articleId = router.query.articleId;\n\n  var _useState = useState(DBarticles),\n      articles = _useState[0],\n      setArticles = _useState[1];\n\n  var _useState2 = useState(null),\n      openedArticle = _useState2[0],\n      setOpenedArticle = _useState2[1];\n\n  var _useState3 = useState(null),\n      shouldRenderComponent = _useState3[0],\n      setShouldRenderComponent = _useState3[1];\n\n  var handleOpenedArticle = function handleOpenedArticle(id) {\n    var fullRoute = id !== null ? '/articoli/' + id : '/articoli/';\n    router.push(fullRoute);\n    setOpenedArticle(id);\n  };\n\n  var relatedArticles = shouldRenderComponent ? getRelatedArticles(articleId, articles, siteLanguage) : [];\n  useEffect(function () {\n    if (!openedArticle) {\n      if (DBarticles.map(function (el) {\n        return el.id;\n      }).includes(articleId)) {\n        setOpenedArticle(articleId);\n      } else {\n        setShouldRenderComponent(false);\n      }\n    }\n\n    if (!shouldRenderComponent) setShouldRenderComponent(DBarticles.map(function (el) {\n      return el.id;\n    }).includes(articleId));\n  });\n  return __jsx(\"div\", {\n    className: styles.container\n  }, __jsx(Header, {\n    title: siteLanguage === \"ita\" ? \"Articoli\" : \"Articles\"\n  }), __jsx(Navigation, null), openedArticle && shouldRenderComponent && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForArticles(openedArticle, articles.find(function (art) {\n      return art.id === openedArticle;\n    })[siteLanguage].title)\n  }), shouldRenderComponent === false && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForErrors({\n      ita: \"Articolo inesistente\",\n      eng: \"No such article\"\n    }, \"/articoli\", siteLanguage)\n  }), __jsx(\"main\", {\n    className: styles.main\n  }, shouldRenderComponent === false && __jsx(ErrorComponent, null), __jsx(Row, {\n    className: \"w-100\"\n  }, __jsx(Col, {\n    md: 3,\n    className: \"\"\n  }), openedArticle && shouldRenderComponent && __jsx(React.Fragment, null, __jsx(Col, {\n    md: 6,\n    className: \"justify-content-center\"\n  }, __jsx(ArticleRead, {\n    article: articles.find(function (art) {\n      return art.id === openedArticle;\n    }),\n    allArticles: articles,\n    setOpenedArticle: handleOpenedArticle,\n    glossarywords: glossarywords\n  })), __jsx(Col, {\n    md: 3,\n    className: \"\"\n  }, __jsx(RelatedArticles, {\n    relatedArticles: relatedArticles,\n    setOpenedArticle: handleOpenedArticle\n  }))))), __jsx(Footer, null));\n}","map":null,"metadata":{},"sourceType":"module"}