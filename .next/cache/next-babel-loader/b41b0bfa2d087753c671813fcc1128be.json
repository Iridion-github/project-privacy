{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Popover, OverlayTrigger } from 'react-bootstrap';\nimport stringToHTML from 'html-react-parser'; //Questa funzione mi ha ammazzato\n\nexport const getGlossaryPopover = (textRaw, targetsRaw) => {\n  const text = textRaw;\n  const targets = targetsRaw.map(el => el.name);\n  const textFragmented = [...text];\n  let analyzing = [];\n  let found = [];\n\n  for (let x = 0; x < textFragmented.length; x++) {\n    const regex = RegExp('^[a-zA-Z0-9àèéìòù]*$');\n\n    if (regex.test(textFragmented[x])) {\n      analyzing.push(textFragmented[x]);\n    } else {\n      if (targets.map(el => el.toLowerCase()).includes(analyzing.join('').toLowerCase())) {\n        found.push({\n          start: Number(x - analyzing.length),\n          end: x,\n          value: targetsRaw.find(word => word.name === analyzing.join('').toLowerCase()).name,\n          meaning: targetsRaw.find(word => word.name === analyzing.join('').toLowerCase()).meaning,\n          reference: targetsRaw.find(word => word.name === analyzing.join('').toLowerCase()).reference\n        });\n      }\n\n      analyzing = [];\n    }\n  }\n\n  let result = [];\n  let prevTarget = 0;\n  found.forEach((el, i) => {\n    let formattedStr = textRaw.slice(prevTarget, el.start).trim();\n    result.push(formattedStr, \" \");\n\n    let popover = __jsx(Popover, {\n      id: \"glossary-popover\"\n    }, __jsx(Popover.Title, {\n      as: \"h3\",\n      id: \"glossary-popover-title\"\n    }, el.value), __jsx(Popover.Content, {\n      id: \"glossary-popover-content\"\n    }, el.meaning), __jsx(Popover.Title, {\n      id: \"glossary-popover-footer\"\n    }, el.reference));\n\n    let segment = __jsx(OverlayTrigger, {\n      trigger: [\"click\", \"hover\", \"focus\"],\n      placement: \"auto\",\n      overlay: popover,\n      key: i,\n      id: \"glossary-word-container\"\n    }, __jsx(\"span\", {\n      id: \"glossary-word\"\n    }, textRaw.slice(el.start, el.end)));\n\n    result.push(segment, \" \");\n    prevTarget = el.end;\n\n    if (found.length === i + 1 && textRaw.slice(prevTarget).trim().length > 0) {\n      //Se abbiamo markato già tutte le keywords e c'è ancora del testo da stampare.\n      let formattedStr = textRaw.slice(prevTarget).trim();\n      result.push(formattedStr, \" \");\n    }\n  });\n  if (found.length === 0) result = stringToHTML(textRaw.trim());\n  let finalResult = [];\n\n  for (let x = 0; x < result.length; x++) {\n    if (typeof result[x] === \"string\") {\n      //Caso della stringa contenente html\n      finalResult.push(stringToHTML(result[x]));\n    } else {\n      //Caso del component\n      finalResult.push(result[x]);\n    }\n  }\n\n  return finalResult;\n};","map":null,"metadata":{},"sourceType":"module"}