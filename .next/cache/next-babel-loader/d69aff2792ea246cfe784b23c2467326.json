{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { useLanguage } from '../../../context/siteLanguageContext'; //context\n\nimport { Row, Col, Button, Modal, InputGroup, FormControl } from 'react-bootstrap';\nexport const PdfViewer = function (props) {\n  const siteLanguage = useLanguage(); //context\n\n  const {\n    0: pdf,\n    1: setPdf\n  } = useState(null);\n  const {\n    0: init,\n    1: setInit\n  } = useState(false);\n  const {\n    0: maxPageNum,\n    1: setMaxPageNum\n  } = useState(null);\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(1);\n  const {\n    0: zoom,\n    1: setZoom\n  } = useState(1);\n  const {\n    0: destination,\n    1: setDestination\n  } = useState(null);\n\n  const renderPdf = (pdf, targetPage, targetZoom) => {\n    const isMobile = screen.width < 400;\n    if (!targetZoom) targetZoom = 1;\n    setDestination(null);\n    pdf.getPage(targetPage).then(async page => {\n      const canvas = document.getElementById(\"pdf_renderer\");\n      const ctx = canvas.getContext('2d');\n      const viewport = page.getViewport(targetZoom); //grandezza ed altezza del contenitore della pagina\n\n      canvas.width = viewport.width; //grandezza della pagina\n\n      canvas.height = viewport.height; //altezza della pagina\n\n      page.render({\n        canvasContext: ctx,\n        viewport: viewport\n      });\n    });\n  };\n\n  const pdfjsLibSetup = async () => {\n    let view = [];\n\n    if (props.buffer) {\n      view = await new Uint8Array(props.buffer.data);\n    }\n\n    await pdfjsLib.getDocument(props.buffer ? view : props.path).then(async pdfResult => {\n      if (!maxPageNum) {\n        await setMaxPageNum(pdfResult._pdfInfo.numPages);\n      }\n\n      await setPdf(pdfResult);\n    });\n  };\n\n  const goPrevPage = () => {\n    const prevPage = Number(currentPage - 1) > 0 ? Number(currentPage - 1) : 1;\n    setCurrentPage(prevPage);\n    renderPdf(pdf, prevPage, zoom);\n  };\n\n  const goNextPage = () => {\n    const nextPage = Number(currentPage + 1) < maxPageNum ? Number(currentPage + 1) : maxPageNum;\n    setCurrentPage(nextPage);\n    renderPdf(pdf, nextPage, zoom);\n  };\n\n  const handleSetDestination = dest => {\n    if (dest > maxPageNum) dest = maxPageNum;\n    if (dest < 1) dest = 1;\n    setDestination(dest);\n  };\n\n  const handleGoToDestination = () => {\n    setCurrentPage(destination);\n    renderPdf(pdf, destination, zoom);\n  };\n\n  const zoomIn = () => {\n    const newZoomLevel = Number(zoom + 0.2);\n    setZoom(newZoomLevel);\n    renderPdf(pdf, currentPage, newZoomLevel);\n  };\n\n  const zoomOut = () => {\n    const newZoomLevel = Number(zoom - 0.2);\n    setZoom(newZoomLevel);\n    renderPdf(pdf, currentPage, newZoomLevel);\n  };\n\n  const handleClose = () => {\n    setPdf(null);\n    setCurrentPage(1);\n    setInit(false);\n    setMaxPageNum(null);\n    setZoom(1);\n    setDestination(null);\n    props.onClose();\n  };\n\n  useEffect(() => {\n    if (props.show) {\n      if (!pdf) {\n        pdfjsLibSetup();\n      }\n\n      document.title = `Pdf viewer - page: ` + currentPage + ' / ' + maxPageNum;\n\n      if (pdf && !init) {\n        setInit(true);\n        renderPdf(pdf, 1, zoom);\n      }\n    }\n  });\n  return __jsx(Row, {\n    className: \"w-100 m-auto\"\n  }, __jsx(Modal, {\n    className: \"justify-content-center\",\n    show: props.show,\n    onHide: handleClose,\n    dialogClassName: \"w-100 pdfviewer-dialog\"\n  }, __jsx(Modal.Header, {\n    className: \"w-100\"\n  }, __jsx(Modal.Title, {\n    className: \"row w-100\"\n  }, __jsx(Col, {\n    md: {\n      span: 4\n    },\n    className: \"text-center\"\n  }, __jsx(\"div\", {\n    id: \"zoom_controls\",\n    className: \"text-left\"\n  }, __jsx(Button, {\n    size: \"lg\",\n    id: \"zoom_out\",\n    onClick: zoomOut,\n    disabled: zoom <= 1,\n    variant: \"info\",\n    className: \"mr-1\"\n  }, __jsx(\"i\", {\n    className: \"fas fa-search-minus\"\n  })), __jsx(Button, {\n    size: \"lg\",\n    id: \"zoom_in\",\n    onClick: zoomIn,\n    disabled: zoom >= 2.5,\n    variant: \"info\"\n  }, __jsx(\"i\", {\n    className: \"fas fa-search-plus\"\n  })))), __jsx(Col, {\n    md: {\n      span: 4\n    },\n    className: \"text-center\"\n  }, __jsx(\"h2\", null, props.filename)), __jsx(Col, {\n    md: {\n      span: 4\n    },\n    className: \"m-0 p-0\"\n  }, __jsx(Row, {\n    className: \"w-100\"\n  }, __jsx(Col, {\n    md: {\n      span: 6\n    },\n    className: \"m-0 p-0 text-center\"\n  }, currentPage, \" / \", maxPageNum), __jsx(Col, {\n    md: {\n      span: 6\n    },\n    className: \"m-0 p-0 text-right\"\n  }, __jsx(Button, {\n    size: \"lg\",\n    onClick: handleClose,\n    variant: \"danger\"\n  }, __jsx(\"i\", {\n    className: \"fas fa-times\"\n  }))))))), __jsx(Modal.Body, {\n    className: \"\",\n    style: {\n      padding: 0\n    }\n  }, __jsx(\"div\", {\n    id: \"my_pdf_viewer\"\n  }, __jsx(\"div\", {\n    id: \"canvas_container\",\n    className: \"justify-content-center text-center\"\n  }, __jsx(\"canvas\", {\n    id: \"pdf_renderer\"\n  })))), __jsx(Modal.Footer, {\n    className: \"justify-content-center\"\n  }, __jsx(\"div\", {\n    id: \"navigation_controls\",\n    className: \"w-100 row\"\n  }, __jsx(Col, {\n    md: {\n      span: 2\n    },\n    className: \"mb-2\"\n  }, __jsx(Button, {\n    block: true,\n    id: \"go_previous\",\n    onClick: goPrevPage,\n    disabled: currentPage === 1,\n    variant: \"info\"\n  }, __jsx(\"i\", {\n    className: \"fas fa-arrow-left mr-1\"\n  }), __jsx(\"i\", {\n    className: \"far fa-file\"\n  }))), __jsx(Col, {\n    md: {\n      span: 4,\n      offset: 2\n    },\n    className: \"p-0 mb-2\"\n  }, __jsx(InputGroup, {\n    className: \"pl-4\"\n  }, __jsx(FormControl, {\n    className: \"mr-2\",\n    id: \"current_page\",\n    value: destination !== null ? destination : currentPage,\n    onChange: event => handleSetDestination(Number(event.target.value))\n  }), __jsx(\"span\", {\n    style: {\n      lineHeight: 2.2\n    }\n  }, \" / \", maxPageNum), __jsx(Button, {\n    size: \"md\",\n    className: \"ml-3 mr-1\",\n    onClick: handleGoToDestination,\n    disabled: destination === null || currentPage === destination,\n    variant: \"info\"\n  }, __jsx(\"i\", {\n    className: \"far fa-arrow-alt-circle-right\"\n  })))), __jsx(Col, {\n    md: {\n      span: 2,\n      offset: 2\n    },\n    className: \"mb-2\"\n  }, __jsx(Button, {\n    block: true,\n    id: \"go_next\",\n    onClick: goNextPage,\n    disabled: currentPage >= maxPageNum,\n    variant: \"info\"\n  }, __jsx(\"i\", {\n    className: \"far fa-file\"\n  }), __jsx(\"i\", {\n    className: \"fas fa-arrow-right ml-1\"\n  })))))));\n};","map":null,"metadata":{},"sourceType":"module"}