{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../../styles/Home.module.css';\nimport { useLanguage } from '../../context/siteLanguageContext'; //context\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { Row, Col } from 'react-bootstrap';\nimport { Header } from '../../components/layout/Header';\nimport { Navigation } from '../../components/layout/Navbar';\nimport { Breadcrumbs } from '../../components/layout/Breadcrumbs';\nimport { Footer } from '../../components/layout/Footer';\nimport { ReviewRead } from \"../../components/reviews/ReviewRead\";\nimport { ReviewReadRightPanel } from \"../../components/reviews/ReviewReadRightPanel\";\nimport { getBreadcrumbsForReviews } from '../../utils/reviews';\nimport { getBreadcrumbsForErrors } from '../../utils/errors';\nimport { ErrorComponent } from '../../components/layout/ErrorComponent';\nexport default function recensione({\n  glossarywords,\n  DBreviews\n}) {\n  const siteLanguage = useLanguage(); //context\n\n  const router = useRouter();\n  const {\n    reviewId\n  } = router.query;\n  const {\n    0: reviews,\n    1: setReviews\n  } = useState(DBreviews);\n  const {\n    0: openedReview,\n    1: setOpenedReview\n  } = useState(null);\n  const {\n    0: shouldRenderComponent,\n    1: setShouldRenderComponent\n  } = useState(null);\n\n  const handleOpenedReview = id => {\n    const fullRoute = id !== null ? '/recensioniBibliografiche/' + id : '/recensioniBibliografiche/';\n    router.push(fullRoute);\n    setOpenedReview(id);\n  };\n\n  useEffect(() => {\n    if (!openedReview) {\n      if (DBreviews.map(el => el.id).includes(reviewId)) {\n        setOpenedReview(reviewId);\n      } else {\n        setShouldRenderComponent(false);\n      }\n    }\n\n    if (!shouldRenderComponent) setShouldRenderComponent(DBreviews.map(el => el.id).includes(reviewId));\n  });\n  return __jsx(\"div\", {\n    className: styles.container\n  }, __jsx(Header, {\n    title: siteLanguage === \"ita\" ? \"Articoli\" : \"Reviews\"\n  }), __jsx(Navigation, null), openedReview && shouldRenderComponent && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForReviews(openedReview, reviews.find(art => art.id === openedReview)[siteLanguage].title)\n  }), shouldRenderComponent === false && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForErrors({\n      ita: \"Recensione inesistente\",\n      eng: \"No such review\"\n    }, \"/recensioniBibliografiche\", siteLanguage)\n  }), __jsx(\"main\", {\n    className: styles.main\n  }, shouldRenderComponent === false && __jsx(ErrorComponent, null), __jsx(Row, {\n    className: \"w-100\"\n  }, __jsx(Col, {\n    md: 3,\n    className: \"\"\n  }), openedReview && shouldRenderComponent && __jsx(React.Fragment, null, __jsx(Col, {\n    md: 6,\n    className: \"justify-content-center\"\n  }, __jsx(ReviewRead, {\n    review: reviews.find(art => art.id === openedReview),\n    allReviews: reviews,\n    setOpenedReview: handleOpenedReview,\n    glossarywords: glossarywords\n  })), __jsx(Col, {\n    md: 3,\n    className: \"\"\n  }, __jsx(ReviewReadRightPanel, null))))), __jsx(Footer, null));\n}\nexport async function getServerSideProps(context) {\n  const apiUrlGlossary = \"http://\" + context.req.headers.host + \"/api/glossaryword\";\n  const resGlossaryword = await fetch(apiUrlGlossary);\n  const glossarywords = await resGlossaryword.json();\n  const apiUrlReview = \"http://\" + context.req.headers.host + \"/api/review\";\n  const resReview = await fetch(apiUrlReview);\n  const DBreviews = await resReview.json();\n  return {\n    props: {\n      DBreviews: DBreviews.data,\n      glossarywords: glossarywords.data\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}