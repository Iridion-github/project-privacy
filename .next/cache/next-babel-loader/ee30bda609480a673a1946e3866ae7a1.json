{"ast":null,"code":"var _jsxFileName = \"/home/iridion/Desktop/Repos/Freelancer/project-privacy/components/archive/ui/MultiSelect.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Form, Row, Col, Badge, Button } from 'react-bootstrap';\nexport const MultiSelect = function (props) {\n  const {\n    formGroupClass = \"\",\n    formLabelClass = \"\",\n    validationFunc = () => true,\n    label = \"\",\n    textmuted = false,\n    onChange = val => val,\n    onRemove,\n    isDisabled = false,\n    selectableOptions = [],\n    placeholder,\n    getOptionValue = el => {\n      if ((el === null || el === void 0 ? void 0 : el.label) && (el === null || el === void 0 ? void 0 : el.value)) {\n        return el.value;\n      } else {\n        return el && el !== \"\" ? el : null;\n      }\n    },\n    getOptionStyle = () => ({}),\n    selectedItems = [],\n    onRemoveAll = null,\n    firstColSpan = 6,\n    secondColSpan = 6\n  } = props;\n\n  const handleChange = val => {\n    if (validationFunc(val)) {\n      onChange(val);\n      return;\n    }\n  };\n\n  return __jsx(Form.Group, {\n    className: formGroupClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(Form.Label, {\n    className: formLabelClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, label), __jsx(Row, {\n    className: \"w-100 ml-0 mr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    md: firstColSpan,\n    className: \"pl-1 pr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Control, {\n    as: \"select\",\n    defaultValue: \"\",\n    onChange: event => handleChange(event.target.value),\n    disabled: isDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, __jsx(\"option\", {\n    style: {\n      display: \"none !important\"\n    },\n    key: \"empty-value-key\",\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, placeholder), selectableOptions.filter(el => !(el === null || el === void 0 ? void 0 : el.selected)).map(el => __jsx(\"option\", {\n    style: getOptionStyle(el),\n    key: (el === null || el === void 0 ? void 0 : el.value) ? el === null || el === void 0 ? void 0 : el.value : el,\n    value: getOptionValue(el),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 70\n    }\n  }, (el === null || el === void 0 ? void 0 : el.label) ? el === null || el === void 0 ? void 0 : el.label : el)))), __jsx(Col, {\n    md: secondColSpan,\n    className: \"pl-1 pr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, selectedItems && selectedItems.length > 0 && __jsx(Row, {\n    className: \"w-100 ml-0 mr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, __jsx(Col, {\n    md: 10,\n    className: \"pl-0 pr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }, selectedItems.map(opt => __jsx(Badge, {\n    variant: \"info\",\n    className: \"mr-1\",\n    key: opt.value ? opt.value : opt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 19\n    }\n  }, opt.label ? opt.label : opt, __jsx(Button, {\n    size: \"sm\",\n    variant: \"danger\",\n    className: \"ml-1 p-0\",\n    style: {\n      lineHeight: \"1\",\n      height: \"16px\",\n      width: \"16px\"\n    },\n    onClick: () => onRemove((opt === null || opt === void 0 ? void 0 : opt.value) ? opt.value : opt),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, __jsx(\"i\", {\n    className: \"fas fa-times p-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 23\n    }\n  }))))), __jsx(Col, {\n    md: 2,\n    className: \"pl-0 pr-0 text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    variant: \"danger\",\n    size: \"sm\",\n    onClick: onRemoveAll,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, __jsx(\"i\", {\n    className: \"fas fa-trash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 19\n    }\n  })))))), textmuted && __jsx(Form.Text, {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, textmuted));\n};\n/*\n------------------------------[STATE]------------------------------\n\nconst [multiSelectVal, setMultiSelectVal] = useState(\"\")\n  const [optionsList, setOptionsList] = useState([\n    { value: \"blue\", label: \"Blue\", selected: false },\n    { value: \"red\", label: \"Red\", selected: false },\n    { value: \"green\", label: \"Green\", selected: false },\n    { value: \"cyan\", label: \"Cyan\", selected: false },\n  ])\n\n  const handleChangeMultiSelectVal = (val) => {\n    if (multiSelectVal === \"\") {\n      console.log(\"handleChangeSelectVal - empty string case - val: \", val)\n      const valObject = optionsList.find(opt => opt.value === val)\n      setMultiSelectVal([valObject])\n    } else {\n      console.log(\"handleChangeSelectVal - array case - val: \", val)\n      const valObject = optionsList.find(opt => opt.value === val)\n      setMultiSelectVal([valObject])\n      setMultiSelectVal([...multiSelectVal, valObject])\n    }\n    //setto selected a true\n    setOptionsList([...optionsList].map(opt => {\n      if (opt.value === val) {\n        opt.selected = !opt.selected\n      }\n      return opt\n    }))\n  }\n\n  const handleRemoveMultiSelectVal = (val) => {\n    console.log(\"handleRemoveMultiSelectVal - val:\", val)\n    const updatedMultiSelectVal = [...multiSelectVal].filter(el => el.value !== val)\n    setMultiSelectVal(updatedMultiSelectVal)\n    //setto selected a false\n    setOptionsList([...optionsList].map(opt => {\n      if (opt.value === val) {\n        opt.selected = !opt.selected\n      }\n      return opt\n    }))\n  }\n\n------------------------------[RETURN]------------------------------\n\n <MultiSelect\n  //formGroupClass={\"mt-5\"}\n  //formLabelClass={\"mt-5\"}\n  validationFunc={() => true}\n  label={\"label\"}\n  textmuted={\"text muted\"}\n  onChange={handleChangeMultiSelectVal}\n  onRemove={handleRemoveMultiSelectVal}\n  isDisabled={false}\n  selectableOptions={optionsList}\n  placeholder={\"-\"}\n  //getOptionValue={col => col}\n  //getOptionStyle={col => ({ color: `${col} !important` })}\n  selectedItems={multiSelectVal}\n/>\n*/","map":{"version":3,"sources":["/home/iridion/Desktop/Repos/Freelancer/project-privacy/components/archive/ui/MultiSelect.js"],"names":["Form","Row","Col","Badge","Button","MultiSelect","props","formGroupClass","formLabelClass","validationFunc","label","textmuted","onChange","val","onRemove","isDisabled","selectableOptions","placeholder","getOptionValue","el","value","getOptionStyle","selectedItems","onRemoveAll","firstColSpan","secondColSpan","handleChange","event","target","display","filter","selected","map","length","opt","lineHeight","height","width"],"mappings":"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","sourcesContent":["import {\n  Form,\n  Row,\n  Col,\n  Badge,\n  Button\n} from 'react-bootstrap'\n\n\nexport const MultiSelect = function (props) {\n\n  const {\n    formGroupClass = \"\",\n    formLabelClass = \"\",\n    validationFunc = () => true,\n    label = \"\",\n    textmuted = false,\n    onChange = val => val,\n    onRemove,\n    isDisabled = false,\n    selectableOptions = [],\n    placeholder,\n    getOptionValue = el => {\n      if (el?.label && el?.value) {\n        return el.value\n      } else {\n        return (el && el !== \"\") ? el : null\n      }\n    },\n    getOptionStyle = () => ({}),\n    selectedItems = [],\n    onRemoveAll = null,\n    firstColSpan = 6,\n    secondColSpan = 6\n  } = props\n\n  const handleChange = (val) => {\n    if (validationFunc(val)) {\n      onChange(val)\n      return\n    }\n  }\n\n  return (\n    <Form.Group className={formGroupClass}>\n      <Form.Label className={formLabelClass}>{label}</Form.Label>\n      <Row className=\"w-100 ml-0 mr-0\">\n        <Col md={firstColSpan} className=\"pl-1 pr-1\">\n          <Form.Control\n            as=\"select\"\n            defaultValue=\"\"\n            onChange={(event) => handleChange(event.target.value)}\n            disabled={isDisabled}\n          >\n            <option\n              style={{ display: \"none !important\" }}\n              key={\"empty-value-key\"}\n              value={\"\"}\n            >\n              {placeholder}\n            </option>\n            {selectableOptions.filter(el => !el?.selected).map(el => <option\n              style={getOptionStyle(el)}\n              key={el?.value ? el?.value : el}\n              value={getOptionValue(el)}\n            >\n              {el?.label ? el?.label : el}\n            </option>\n            )}\n          </Form.Control>\n        </Col>\n        <Col md={secondColSpan} className=\"pl-1 pr-1\">\n          {(selectedItems && selectedItems.length > 0) &&\n            <Row className=\"w-100 ml-0 mr-0\">\n              <Col md={10} className=\"pl-0 pr-0\">\n                {selectedItems.map(opt => (\n                  <Badge\n                    variant=\"info\"\n                    className=\"mr-1\"\n                    key={opt.value ? opt.value : opt}\n                  >\n                    {opt.label ? opt.label : opt}\n                    <Button\n                      size=\"sm\"\n                      variant=\"danger\"\n                      className=\"ml-1 p-0\"\n                      style={{\n                        lineHeight: \"1\",\n                        height: \"16px\",\n                        width: \"16px\",\n                      }}\n                      onClick={() => onRemove(opt?.value ? opt.value : opt)}\n                    >\n                      <i\n                        className=\"fas fa-times p-0\"\n                      ></i>\n                    </Button>\n                  </Badge>\n                ))}\n              </Col>\n              <Col md={2} className=\"pl-0 pr-0 text-right\">\n                <Button\n                  variant=\"danger\"\n                  size=\"sm\"\n                  onClick={onRemoveAll}\n                >\n                  <i className=\"fas fa-trash\"></i>\n                </Button>\n              </Col>\n            </Row>\n          }\n        </Col>\n      </Row>\n      {textmuted && <Form.Text className=\"text-muted\">\n        {textmuted}\n      </Form.Text>}\n    </Form.Group>\n  )\n}\n\n/*\n------------------------------[STATE]------------------------------\n\nconst [multiSelectVal, setMultiSelectVal] = useState(\"\")\n  const [optionsList, setOptionsList] = useState([\n    { value: \"blue\", label: \"Blue\", selected: false },\n    { value: \"red\", label: \"Red\", selected: false },\n    { value: \"green\", label: \"Green\", selected: false },\n    { value: \"cyan\", label: \"Cyan\", selected: false },\n  ])\n\n  const handleChangeMultiSelectVal = (val) => {\n    if (multiSelectVal === \"\") {\n      console.log(\"handleChangeSelectVal - empty string case - val: \", val)\n      const valObject = optionsList.find(opt => opt.value === val)\n      setMultiSelectVal([valObject])\n    } else {\n      console.log(\"handleChangeSelectVal - array case - val: \", val)\n      const valObject = optionsList.find(opt => opt.value === val)\n      setMultiSelectVal([valObject])\n      setMultiSelectVal([...multiSelectVal, valObject])\n    }\n    //setto selected a true\n    setOptionsList([...optionsList].map(opt => {\n      if (opt.value === val) {\n        opt.selected = !opt.selected\n      }\n      return opt\n    }))\n  }\n\n  const handleRemoveMultiSelectVal = (val) => {\n    console.log(\"handleRemoveMultiSelectVal - val:\", val)\n    const updatedMultiSelectVal = [...multiSelectVal].filter(el => el.value !== val)\n    setMultiSelectVal(updatedMultiSelectVal)\n    //setto selected a false\n    setOptionsList([...optionsList].map(opt => {\n      if (opt.value === val) {\n        opt.selected = !opt.selected\n      }\n      return opt\n    }))\n  }\n\n------------------------------[RETURN]------------------------------\n\n <MultiSelect\n  //formGroupClass={\"mt-5\"}\n  //formLabelClass={\"mt-5\"}\n  validationFunc={() => true}\n  label={\"label\"}\n  textmuted={\"text muted\"}\n  onChange={handleChangeMultiSelectVal}\n  onRemove={handleRemoveMultiSelectVal}\n  isDisabled={false}\n  selectableOptions={optionsList}\n  placeholder={\"-\"}\n  //getOptionValue={col => col}\n  //getOptionStyle={col => ({ color: `${col} !important` })}\n  selectedItems={multiSelectVal}\n/>\n*/"]},"metadata":{},"sourceType":"module"}