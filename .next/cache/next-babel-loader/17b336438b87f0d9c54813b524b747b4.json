{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/iridion/Desktop/Repos/Freelancer/project-privacy/components/archive/ui/ReactSelect.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Form, Row, Col } from 'react-bootstrap';\nimport Select from 'react-select';\nexport var ReactSelect = function ReactSelect(props) {\n  var getStandardTheme = function getStandardTheme(theme) {\n    return _objectSpread(_objectSpread({}, theme), {}, {\n      //borderRadius: 0,\n      colors: _objectSpread(_objectSpread({}, theme.colors), {}, {\n        text: 'red' //primary25: 'hotpink',\n        //primary: 'black',\n\n      })\n    });\n  };\n\n  var _props$formGroupClass = props.formGroupClass,\n      formGroupClass = _props$formGroupClass === void 0 ? \"\" : _props$formGroupClass,\n      _props$formLabelClass = props.formLabelClass,\n      formLabelClass = _props$formLabelClass === void 0 ? \"\" : _props$formLabelClass,\n      _props$isMulti = props.isMulti,\n      isMulti = _props$isMulti === void 0 ? false : _props$isMulti,\n      _props$validationFunc = props.validationFunc,\n      validationFunc = _props$validationFunc === void 0 ? function () {\n    return true;\n  } : _props$validationFunc,\n      _props$label = props.label,\n      label = _props$label === void 0 ? \"\" : _props$label,\n      _props$textmuted = props.textmuted,\n      textmuted = _props$textmuted === void 0 ? false : _props$textmuted,\n      _props$onChange = props.onChange,\n      onChange = _props$onChange === void 0 ? function (val) {\n    return val;\n  } : _props$onChange,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n      _props$selectableOpti = props.selectableOptions,\n      selectableOptions = _props$selectableOpti === void 0 ? [] : _props$selectableOpti,\n      _props$defaultValue = props.defaultValue,\n      defaultValue = _props$defaultValue === void 0 ? \"\" : _props$defaultValue,\n      placeholder = props.placeholder,\n      _props$getOptionValue = props.getOptionValue,\n      getOptionValue = _props$getOptionValue === void 0 ? function (el) {\n    return el && el !== \"\" ? el : null;\n  } : _props$getOptionValue,\n      _props$getOptionStyle = props.getOptionStyle,\n      getOptionStyle = _props$getOptionStyle === void 0 ? function () {\n    return {};\n  } : _props$getOptionStyle,\n      _props$customTheme = props.customTheme,\n      customTheme = _props$customTheme === void 0 ? null : _props$customTheme;\n\n  var handleChange = function handleChange(val) {\n    if (validationFunc(val)) {\n      onChange(val);\n      return;\n    }\n  };\n\n  return __jsx(Form.Group, {\n    className: formGroupClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Label, {\n    className: formLabelClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, label), __jsx(Row, {\n    className: \"w-100 ml-0 mr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, __jsx(Col, {\n    md: 12,\n    className: \"pl-1 pr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, __jsx(Select, {\n    isMulti: isMulti,\n    options: selectableOptions,\n    disabled: isDisabled,\n    defaultValue: defaultValue,\n    placeholder: placeholder,\n    onChange: handleChange,\n    getOptionValue: getOptionValue,\n    theme: getCustomTheme ? getCustomTheme : getStandardTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }))), textmuted && __jsx(Form.Text, {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 27\n    }\n  }, textmuted));\n};\n_c = ReactSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactSelect\");","map":{"version":3,"sources":["/home/iridion/Desktop/Repos/Freelancer/project-privacy/components/archive/ui/ReactSelect.js"],"names":["Form","Row","Col","Select","ReactSelect","props","getStandardTheme","theme","colors","text","formGroupClass","formLabelClass","isMulti","validationFunc","label","textmuted","onChange","val","isDisabled","selectableOptions","defaultValue","placeholder","getOptionValue","el","getOptionStyle","customTheme","handleChange","getCustomTheme"],"mappings":"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","sourcesContent":["import {\n    Form,\n    Row,\n    Col\n} from 'react-bootstrap'\nimport Select from 'react-select'\n\n\nexport const ReactSelect = function (props) {\n\n    const getStandardTheme = (theme) => ({\n        ...theme,\n        //borderRadius: 0,\n        colors: {\n            ...theme.colors,\n            text: 'red',\n            //primary25: 'hotpink',\n            //primary: 'black',\n        }\n    })\n\n    const {\n        formGroupClass = \"\",\n        formLabelClass = \"\",\n        isMulti = false,\n        validationFunc = () => true,\n        label = \"\",\n        textmuted = false,\n        onChange = val => val,\n        isDisabled = false,\n        selectableOptions = [],\n        defaultValue = \"\",\n        placeholder,\n        getOptionValue = el => (el && el !== \"\") ? el : null,\n        getOptionStyle = () => ({}),\n        customTheme = null\n    } = props\n\n    const handleChange = (val) => {\n        if (validationFunc(val)) {\n            onChange(val)\n            return\n        }\n    }\n\n    return (\n        <Form.Group className={formGroupClass}>\n            <Form.Label className={formLabelClass}>{label}</Form.Label>\n            <Row className=\"w-100 ml-0 mr-0\">\n                <Col md={12} className=\"pl-1 pr-1\">\n                    <Select\n                        isMulti={isMulti}\n                        options={selectableOptions}\n                        disabled={isDisabled}\n                        defaultValue={defaultValue}\n                        placeholder={placeholder}\n                        onChange={handleChange}\n                        getOptionValue={getOptionValue}\n                        theme={getCustomTheme ? getCustomTheme : getStandardTheme}\n                    />\n                </Col>\n            </Row>\n            {textmuted && <Form.Text className=\"text-muted\">\n                {textmuted}\n            </Form.Text>}\n        </Form.Group>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}