{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../styles/Home.module.css';\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useLanguage, useLanguageUpdate } from '../context/siteLanguageContext'; //context\n\nimport { Row, Col } from 'react-bootstrap';\nimport { Header } from '../components/layout/Header';\nimport { Navigation } from '../components/layout/Navbar';\nimport { Breadcrumbs } from '../components/layout/Breadcrumbs';\nimport { Footer } from '../components/layout/Footer';\nimport { ArticlesList } from \"../components/articles/ArticlesList\";\nimport { ArticlesLeftMenu } from \"../components/articles/ArticlesLeftMenu\";\nimport { removeDuplicatesById, includesAll } from '../utils/arrays';\n\nfunction articoli({\n  DBarticles,\n  articleTopics\n}) {\n  const siteLanguage = useLanguage(); //context\n\n  const {\n    0: articles,\n    1: setArticles\n  } = useState(DBarticles);\n  const {\n    0: openedArticle,\n    1: setOpenedArticle\n  } = useState(null);\n  const router = useRouter();\n\n  const handleOpenedArticle = articleId => {\n    const fullRoute = articleId !== null ? '/articoli/' + articleId : '/articoli/';\n    setOpenedArticle(articles.find(art => art.id === articleId));\n    router.push(fullRoute);\n  };\n\n  const searchTopic = async (topic, lang) => {\n    handleOpenedArticle(null);\n    setFilteredByTopic(true);\n    const result = [];\n\n    if (topic !== \"\") {\n      DBarticles.forEach(art => {\n        if (includesAll(art[lang].topic, topic, Array.isArray(art[lang].topic)).length > 0) {\n          result.push(art);\n        }\n      });\n    }\n\n    setArticles(result);\n  };\n\n  const removeTopicFilter = () => {\n    handleOpenedArticle(null);\n    setFilteredByTopic(false);\n    setArticles(DBarticles);\n  };\n\n  const searchFilter = (articles, input, lang) => {\n    const searchTerms = input.toLowerCase().split(\" \");\n    const found = [];\n\n    if (input !== \"\") {\n      articles.forEach(art => {\n        if (includesAll(art.authors, searchTerms, Array.isArray(art.authors)).length > 0 || includesAll(art[lang].topic, searchTerms, Array.isArray(art[lang].topic)).length > 0 || includesAll(art[lang].tags, searchTerms, Array.isArray(art[lang].tags)).length > 0 || includesAll(art.ita.title, searchTerms, Array.isArray(art.ita.title)).length > 0 || includesAll(art.ita.subtitle, searchTerms, Array.isArray(art.ita.subtitle)).length > 0 || includesAll(art.ita.content, searchTerms, Array.isArray(art.ita.content)).length > 0 || includesAll(art.eng.title, searchTerms, Array.isArray(art.eng.title)).length > 0 || includesAll(art.eng.subtitle, searchTerms, Array.isArray(art.eng.subtitle)).length > 0 || includesAll(art.eng.content, searchTerms, Array.isArray(art.eng.content)).length > 0) {\n          found.push(art);\n        }\n      });\n    }\n\n    const result = removeDuplicatesById(found);\n    return result;\n  };\n\n  const {\n    0: filtered,\n    1: setFiltered\n  } = useState(false);\n  const {\n    0: filteredByTopic,\n    1: setFilteredByTopic\n  } = useState(false);\n  const {\n    0: searchInput,\n    1: setSearchInput\n  } = useState(\"\");\n  return __jsx(\"div\", {\n    className: styles.container\n  }, __jsx(Header, {\n    title: siteLanguage === \"ita\" ? \"Articoli\" : \"Articles\"\n  }), __jsx(Navigation, null), __jsx(Breadcrumbs, null), __jsx(\"main\", {\n    className: styles.main\n  }, __jsx(Row, {\n    className: \"w-100 mb-5\"\n  }, __jsx(Col, {\n    md: 3,\n    className: \"\"\n  }, __jsx(ArticlesLeftMenu, {\n    allArticles: articles,\n    allTopics: articleTopics,\n    searchTopic: searchTopic,\n    searchInput: searchInput,\n    setSearchInput: setSearchInput,\n    filteredByTopic: filteredByTopic,\n    removeTopicFilter: removeTopicFilter\n  })), __jsx(Col, {\n    md: 6,\n    className: \"justify-content-center\"\n  }, openedArticle === null && __jsx(ArticlesList, {\n    allArticles: articles,\n    setOpenedArticle: handleOpenedArticle,\n    searchFilter: searchFilter,\n    filtered: filtered,\n    setFiltered: setFiltered,\n    searchInput: searchInput,\n    setSearchInput: setSearchInput\n  })), __jsx(Col, {\n    md: 3,\n    className: \"\"\n  }))), __jsx(Footer, null));\n}\n\narticoli.getInitialProps = async context => {\n  //const environment = \"http://\" + context.req.headers.host\n  const environment = \"https://project-privacy-d803e.web.app\";\n  const apiUrlArticle = environment + \"/api/article\";\n  const resArticle = await fetch(apiUrlArticle);\n  const DBarticles = await resArticle.json();\n  const apiUrlTopics = environment + \"/api/articleTopics\";\n  const resArticleTopics = await fetch(apiUrlTopics);\n  const articleTopics = await resArticleTopics.json();\n  return {\n    DBarticles: DBarticles.data,\n    articleTopics: articleTopics.data\n  };\n};\n\nexport default articoli;\n/* //Rimozione di getServerSideProps per deployare su Firebase\nexport async function getServerSideProps(context) {\n  const apiUrlArticle = \"http://\" + context.req.headers.host + \"/api/article\"\n  const resArticle = await fetch(apiUrlArticle)\n  const DBarticles = await resArticle.json()\n  const apiUrlTopics = \"http://\" + context.req.headers.host + \"/api/articleTopics\"\n  const resArticleTopics = await fetch(apiUrlTopics)\n  const articleTopics = await resArticleTopics.json()\n  return { props: { DBarticles: DBarticles.data, articleTopics: articleTopics.data } }\n}\n*/","map":null,"metadata":{},"sourceType":"module"}