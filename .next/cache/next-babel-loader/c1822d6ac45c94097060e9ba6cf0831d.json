{"ast":null,"code":"var _jsxFileName = \"/home/iridion/Desktop/Repos/Freelancer/project-privacy/pages/articoli/[articleId].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../../styles/Home.module.css';\nimport { useLanguage } from '../../context/siteLanguageContext'; //context\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { Row, Col } from 'react-bootstrap';\nimport { Header } from '../../components/layout/Header';\nimport { Navigation } from '../../components/layout/Navbar';\nimport { Breadcrumbs } from '../../components/layout/Breadcrumbs';\nimport { Footer } from '../../components/layout/Footer';\nimport { ArticleRead } from \"../../components/articles/ArticleRead\";\nimport { RelatedArticles } from \"../../components/articles/RelatedArticles\";\nimport { getRelatedArticles, getBreadcrumbsForArticles } from '../../utils/articles';\nimport { getBreadcrumbsForErrors } from '../../utils/errors';\nimport { ErrorComponent } from '../../components/layout/ErrorComponent';\n\nfunction articoli({\n  glossarywords,\n  DBarticles\n}) {\n  console.log(\"glossarywords:\", glossarywords);\n  console.log(\"DBarticles:\", DBarticles);\n  const siteLanguage = useLanguage(); //context\n\n  const router = useRouter();\n  const {\n    articleId\n  } = router.query;\n  const {\n    0: articles,\n    1: setArticles\n  } = useState(DBarticles);\n  const {\n    0: openedArticle,\n    1: setOpenedArticle\n  } = useState(articleId);\n\n  const handleOpenedArticle = id => {\n    const fullRoute = id !== null ? '/articoli/' + id : '/articoli/';\n    router.push(fullRoute);\n    setOpenedArticle(id);\n  };\n\n  let relatedArticles = getRelatedArticles(articleId, articles, siteLanguage);\n  useEffect(() => {\n    if (articles.length === 0) {\n      console.log(\"useEffect - articles is empty!\");\n\n      if (DBarticles.map(el => el.id).includes(articleId)) {\n        setOpenedArticle(articleId);\n      }\n    }\n  });\n  return __jsx(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(Header, {\n    title: siteLanguage === \"ita\" ? \"Articoli\" : \"Articles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), __jsx(Navigation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), console.log(\"About to render breadcrumbs, articles:\", articles), openedArticle && articles.length > 0 && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForArticles(openedArticle, articles.find(art => art.id === openedArticle)[siteLanguage].title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), !openedArticle && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForErrors({\n      ita: \"Articolo inesistente\",\n      eng: \"No such article\"\n    }, \"/articoli\", siteLanguage),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), __jsx(\"main\", {\n    className: styles.main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, !openedArticle && __jsx(ErrorComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }), __jsx(Row, {\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    md: 3,\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }), openedArticle && articles.length > 0 && __jsx(React.Fragment, null, __jsx(Col, {\n    md: 6,\n    className: \"justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, __jsx(ArticleRead, {\n    article: articles.find(art => art.id === openedArticle),\n    allArticles: articles,\n    setOpenedArticle: handleOpenedArticle,\n    glossarywords: glossarywords,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  })), __jsx(Col, {\n    md: 3,\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, __jsx(RelatedArticles, {\n    relatedArticles: relatedArticles,\n    setOpenedArticle: handleOpenedArticle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }))))), __jsx(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }));\n}\n\narticoli.getInitialProps = async context => {\n  const getArticleId = async rawStr => {\n    console.log(\"rawStr\", rawStr);\n    let articleId = rawStr.split('/articoli/')[1];\n    console.log(\"1) articleId\", articleId);\n\n    if (articleId.includes('/')) {\n      console.log(\"articleId.includes('/') ! Phase 2\"); //[\"articoli/\",\"0/1\"]\n      //[\"0/1\"] -> [\"1\"]\n\n      articleId = articleId.split('/')[1].split('/')[1];\n      console.log(\"2) articleId\", articleId);\n    }\n\n    console.log(\"3) about to return this articleId:\", articleId);\n    return articleId;\n  };\n\n  let propsObj = {\n    DBarticles: [],\n    glossarywords: []\n  };\n\n  if (!context.req) {\n    const articleId = await getArticleId(context.asPath);\n    console.log(\"location.href:\", location.href);\n    location.replace(location.href + \"/\" + articleId);\n  } else {\n    //api of glossary\n    const apiUrlGlossary = \"http://\" + context.req.headers.host + \"/api/glossaryword\";\n    const resGlossaryword = await fetch(apiUrlGlossary);\n    const glossarywords = await resGlossaryword.json(); //api of all articles (for the related articles)\n\n    const apiUrlArticle = \"http://\" + context.req.headers.host + \"/api/article\";\n    const resArticle = await fetch(apiUrlArticle);\n    const DBarticles = await resArticle.json();\n    propsObj = {\n      DBarticles: DBarticles.data,\n      glossarywords: glossarywords.data\n    };\n  }\n\n  return propsObj;\n};\n\nexport default articoli;\n/* //Rimozione di getServerSideProps per deployare su Firebase\nexport async function getServerSideProps({ req }) {\n  //api of glossary\n  const apiUrlGlossary = \"http://\" + req.headers.host + \"/api/glossaryword\"\n  const resGlossaryword = await fetch(apiUrlGlossary)\n  const glossarywords = await resGlossaryword.json()\n  //api of all articles (for the related articles)\n  const apiUrlArticle = \"http://\" + req.headers.host + \"/api/article\"\n  const resArticle = await fetch(apiUrlArticle)\n  const DBarticles = await resArticle.json()\n  return { props: { DBarticles: DBarticles.data, glossarywords: glossarywords.data } }\n}\n*/","map":{"version":3,"sources":["/home/iridion/Desktop/Repos/Freelancer/project-privacy/pages/articoli/[articleId].js"],"names":["styles","useLanguage","useState","useEffect","useRouter","Row","Col","Header","Navigation","Breadcrumbs","Footer","ArticleRead","RelatedArticles","getRelatedArticles","getBreadcrumbsForArticles","getBreadcrumbsForErrors","ErrorComponent","articoli","glossarywords","DBarticles","console","log","siteLanguage","router","articleId","query","articles","setArticles","openedArticle","setOpenedArticle","handleOpenedArticle","id","fullRoute","push","relatedArticles","length","map","el","includes","container","find","art","title","ita","eng","main","getInitialProps","context","getArticleId","rawStr","split","propsObj","req","asPath","location","href","replace","apiUrlGlossary","headers","host","resGlossaryword","fetch","json","apiUrlArticle","resArticle","data"],"mappings":"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","sourcesContent":["import styles from '../../styles/Home.module.css'\nimport { useLanguage } from '../../context/siteLanguageContext' //context\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport {\n  Row,\n  Col\n} from 'react-bootstrap'\nimport { Header } from '../../components/layout/Header'\nimport { Navigation } from '../../components/layout/Navbar'\nimport { Breadcrumbs } from '../../components/layout/Breadcrumbs'\nimport { Footer } from '../../components/layout/Footer'\nimport { ArticleRead } from \"../../components/articles/ArticleRead\"\nimport { RelatedArticles } from \"../../components/articles/RelatedArticles\"\nimport { getRelatedArticles, getBreadcrumbsForArticles } from '../../utils/articles'\nimport { getBreadcrumbsForErrors } from '../../utils/errors'\nimport { ErrorComponent } from '../../components/layout/ErrorComponent'\n\nfunction articoli({ glossarywords, DBarticles }) {\n  console.log(\"glossarywords:\", glossarywords)\n  console.log(\"DBarticles:\", DBarticles)\n  const siteLanguage = useLanguage() //context\n  const router = useRouter()\n  const { articleId } = router.query\n  const [articles, setArticles] = useState(DBarticles)\n  const [openedArticle, setOpenedArticle] = useState(articleId)\n\n  const handleOpenedArticle = (id) => {\n    const fullRoute = id !== null ? '/articoli/' + id : '/articoli/'\n    router.push(fullRoute)\n    setOpenedArticle(id)\n  }\n\n  let relatedArticles = getRelatedArticles(articleId, articles, siteLanguage)\n\n  useEffect(() => {\n    if (articles.length === 0) {\n      console.log(\"useEffect - articles is empty!\")\n      if (DBarticles.map(el => el.id).includes(articleId)) {\n        setOpenedArticle(articleId)\n      }\n    }\n  })\n\n  return (\n    <div className={styles.container}>\n      <Header\n        title={siteLanguage === \"ita\" ? \"Articoli\" : \"Articles\"}\n      />\n      {/* Navbar */}\n      <Navigation />\n      {console.log(\"About to render breadcrumbs, articles:\", articles)}\n      {(openedArticle && articles.length > 0) &&\n        <Breadcrumbs\n          breadcrumbsList={getBreadcrumbsForArticles(openedArticle, articles.find(art => art.id === openedArticle)[siteLanguage].title)}\n        />\n      }\n      {!openedArticle &&\n        <Breadcrumbs\n          breadcrumbsList={getBreadcrumbsForErrors({ ita: \"Articolo inesistente\", eng: \"No such article\" }, \"/articoli\", siteLanguage)}\n        />\n      }\n      {/* Page Content */}\n      <main className={styles.main}>\n        {!openedArticle &&\n          <ErrorComponent />\n        }\n        <Row className=\"w-100\">\n          <Col md={3} className=\"\">\n          </Col>\n          {(openedArticle && articles.length > 0) &&\n            <>\n              <Col md={6} className=\"justify-content-center\">\n                <ArticleRead\n                  article={articles.find(art => art.id === openedArticle)}\n                  allArticles={articles}\n                  setOpenedArticle={handleOpenedArticle}\n                  glossarywords={glossarywords}\n                />\n              </Col>\n              <Col md={3} className=\"\">\n                <RelatedArticles\n                  relatedArticles={relatedArticles}\n                  setOpenedArticle={handleOpenedArticle}\n                />\n              </Col>\n            </>\n          }\n        </Row>\n      </main>\n      {/* Footer */}\n      <Footer />\n    </div>\n  )\n}\n\narticoli.getInitialProps = async (context) => {\n\n  const getArticleId = async (rawStr) => {\n    console.log(\"rawStr\", rawStr)\n    let articleId = rawStr.split('/articoli/')[1]\n    console.log(\"1) articleId\", articleId)\n    if (articleId.includes('/')) {\n      console.log(\"articleId.includes('/') ! Phase 2\")\n      //[\"articoli/\",\"0/1\"]\n      //[\"0/1\"] -> [\"1\"]\n      articleId = articleId.split('/')[1].split('/')[1]\n      console.log(\"2) articleId\", articleId)\n\n    }\n    console.log(\"3) about to return this articleId:\", articleId)\n\n    return articleId\n  }\n\n  let propsObj = { DBarticles: [], glossarywords: [] }\n  if (!context.req) {\n    const articleId = await getArticleId(context.asPath)\n    console.log(\"location.href:\", location.href)\n    location.replace(location.href + \"/\" + articleId)\n  } else {\n    //api of glossary\n    const apiUrlGlossary = \"http://\" + context.req.headers.host + \"/api/glossaryword\"\n    const resGlossaryword = await fetch(apiUrlGlossary)\n    const glossarywords = await resGlossaryword.json()\n    //api of all articles (for the related articles)\n    const apiUrlArticle = \"http://\" + context.req.headers.host + \"/api/article\"\n    const resArticle = await fetch(apiUrlArticle)\n    const DBarticles = await resArticle.json()\n    propsObj = { DBarticles: DBarticles.data, glossarywords: glossarywords.data }\n  }\n  return propsObj\n}\n\nexport default articoli\n\n/* //Rimozione di getServerSideProps per deployare su Firebase\nexport async function getServerSideProps({ req }) {\n  //api of glossary\n  const apiUrlGlossary = \"http://\" + req.headers.host + \"/api/glossaryword\"\n  const resGlossaryword = await fetch(apiUrlGlossary)\n  const glossarywords = await resGlossaryword.json()\n  //api of all articles (for the related articles)\n  const apiUrlArticle = \"http://\" + req.headers.host + \"/api/article\"\n  const resArticle = await fetch(apiUrlArticle)\n  const DBarticles = await resArticle.json()\n  return { props: { DBarticles: DBarticles.data, glossarywords: glossarywords.data } }\n}\n*/"]},"metadata":{},"sourceType":"module"}