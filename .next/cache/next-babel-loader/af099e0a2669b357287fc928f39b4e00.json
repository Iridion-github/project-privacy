{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../../styles/Home.module.css';\nimport { useLanguage } from '../../context/siteLanguageContext'; //context\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { Row, Col } from 'react-bootstrap';\nimport { Header } from '../../components/layout/Header';\nimport { Navigation } from '../../components/layout/Navbar';\nimport { Breadcrumbs } from '../../components/layout/Breadcrumbs';\nimport { Footer } from '../../components/layout/Footer';\nimport { ArticleRead } from \"../../components/articles/ArticleRead\";\nimport { RelatedArticles } from \"../../components/articles/RelatedArticles\";\nimport { getRelatedArticles, getBreadcrumbsForArticles } from '../../utils/articles';\nimport { getBreadcrumbsForErrors } from '../../utils/errors';\nimport { ErrorComponent } from '../../components/layout/ErrorComponent';\n\nfunction articoli({\n  glossarywords,\n  DBarticles\n}) {\n  const siteLanguage = useLanguage(); //context\n\n  const router = useRouter();\n  const {\n    articleId\n  } = router.query;\n  const {\n    0: articles,\n    1: setArticles\n  } = useState(DBarticles);\n  const {\n    0: openedArticle,\n    1: setOpenedArticle\n  } = useState(articleId);\n\n  const handleOpenedArticle = id => {\n    const fullRoute = id !== null ? '/articoli/' + id : '/articoli/';\n    router.push(fullRoute);\n    setOpenedArticle(id);\n  };\n\n  let relatedArticles = getRelatedArticles(articleId, articles, siteLanguage);\n  useEffect(() => {\n    if (articles.length === 0) {\n      if (DBarticles.map(el => el.id).includes(articleId)) {\n        setOpenedArticle(articleId);\n      }\n    }\n  });\n  return __jsx(\"div\", {\n    className: styles.container\n  }, __jsx(Header, {\n    title: siteLanguage === \"ita\" ? \"Articoli\" : \"Articles\"\n  }), __jsx(Navigation, null), openedArticle && articles.length > 0 && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForArticles(openedArticle, articles.find(art => art.id === openedArticle)[siteLanguage].title)\n  }), !openedArticle && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForErrors({\n      ita: \"Articolo inesistente\",\n      eng: \"No such article\"\n    }, \"/articoli\", siteLanguage)\n  }), __jsx(\"main\", {\n    className: styles.main\n  }, !openedArticle && __jsx(ErrorComponent, null), __jsx(Row, {\n    className: \"w-100\"\n  }, __jsx(Col, {\n    md: 3,\n    className: \"\"\n  }), openedArticle && articles.length > 0 && __jsx(React.Fragment, null, __jsx(Col, {\n    md: 6,\n    className: \"justify-content-center\"\n  }, __jsx(ArticleRead, {\n    article: articles.find(art => art.id === openedArticle),\n    allArticles: articles,\n    setOpenedArticle: handleOpenedArticle,\n    glossarywords: glossarywords\n  })), __jsx(Col, {\n    md: 3,\n    className: \"\"\n  }, __jsx(RelatedArticles, {\n    relatedArticles: relatedArticles,\n    setOpenedArticle: handleOpenedArticle\n  }))))), __jsx(Footer, null));\n}\n\narticoli.getInitialProps = async context => {\n  const getArticleId = async rawStr => {\n    let articleId = rawStr.split('/articoli/')[1];\n\n    if (articleId.includes('/')) {\n      articleId = articleId.split('/')[1].split('/')[1];\n    }\n\n    return articleId;\n  };\n\n  let propsObj = {\n    DBarticles: [],\n    glossarywords: []\n  };\n\n  if (!context.req) {\n    const articleId = await getArticleId(context.asPath);\n\n    if (location.href.includes(\"articoli/\")) {\n      location.replace(articleId);\n    } else {\n      location.replace(\"articoli/\" + articleId);\n    }\n  } else {\n    //api of glossary\n    const apiUrlGlossary = \"http://\" + context.req.headers.host + \"/api/glossaryword\";\n    const resGlossaryword = await fetch(apiUrlGlossary);\n    const glossarywords = await resGlossaryword.json(); //api of all articles (for the related articles)\n\n    const apiUrlArticle = \"http://\" + context.req.headers.host + \"/api/article\";\n    const resArticle = await fetch(apiUrlArticle);\n    const DBarticles = await resArticle.json();\n    propsObj = {\n      DBarticles: DBarticles.data,\n      glossarywords: glossarywords.data\n    };\n  }\n\n  return propsObj;\n};\n\nexport default articoli;\n/* //Rimozione di getServerSideProps per deployare su Firebase\nexport async function getServerSideProps({ req }) {\n  //api of glossary\n  const apiUrlGlossary = \"http://\" + req.headers.host + \"/api/glossaryword\"\n  const resGlossaryword = await fetch(apiUrlGlossary)\n  const glossarywords = await resGlossaryword.json()\n  //api of all articles (for the related articles)\n  const apiUrlArticle = \"http://\" + req.headers.host + \"/api/article\"\n  const resArticle = await fetch(apiUrlArticle)\n  const DBarticles = await resArticle.json()\n  return { props: { DBarticles: DBarticles.data, glossarywords: glossarywords.data } }\n}\n*/","map":null,"metadata":{},"sourceType":"module"}