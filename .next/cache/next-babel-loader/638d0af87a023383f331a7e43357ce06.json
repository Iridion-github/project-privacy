{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../../styles/Home.module.css';\nimport { useLanguage } from '../../context/siteLanguageContext'; //context\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { Row, Col } from 'react-bootstrap';\nimport { Header } from '../../components/layout/Header';\nimport { Navigation } from '../../components/layout/Navbar';\nimport { Breadcrumbs } from '../../components/layout/Breadcrumbs';\nimport { Footer } from '../../components/layout/Footer';\nimport { ArticleRead } from \"../../components/articles/ArticleRead\";\nimport { RelatedArticles } from \"../../components/articles/RelatedArticles\";\nimport { getRelatedArticles, getBreadcrumbsForArticles } from '../../utils/articles';\nimport { getBreadcrumbsForErrors } from '../../utils/errors';\nimport { ErrorComponent } from '../../components/layout/ErrorComponent';\n\nfunction articoli(_ref) {\n  var glossarywords = _ref.glossarywords,\n      DBarticles = _ref.DBarticles;\n  var siteLanguage = useLanguage(); //context\n\n  var router = useRouter();\n  var articleId = router.query.articleId;\n\n  var _useState = useState(DBarticles),\n      articles = _useState[0],\n      setArticles = _useState[1];\n\n  var _useState2 = useState(articleId),\n      openedArticle = _useState2[0],\n      setOpenedArticle = _useState2[1];\n\n  var handleOpenedArticle = function handleOpenedArticle(id) {\n    var fullRoute = id !== null ? '/articoli/' + id : '/articoli/';\n    router.push(fullRoute);\n    setOpenedArticle(id);\n  };\n\n  var relatedArticles = getRelatedArticles(articleId, articles, siteLanguage);\n  useEffect(function () {\n    if (articles.length === 0) {\n      if (DBarticles.map(function (el) {\n        return el.id;\n      }).includes(articleId)) {\n        setOpenedArticle(articleId);\n      }\n    }\n  });\n  return __jsx(\"div\", {\n    className: styles.container\n  }, __jsx(Header, {\n    title: siteLanguage === \"ita\" ? \"Articoli\" : \"Articles\"\n  }), __jsx(Navigation, null), openedArticle && articles.length > 0 && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForArticles(openedArticle, articles.find(function (art) {\n      return art.id === openedArticle;\n    })[siteLanguage].title)\n  }), !openedArticle && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForErrors({\n      ita: \"Articolo inesistente\",\n      eng: \"No such article\"\n    }, \"/articoli\", siteLanguage)\n  }), __jsx(\"main\", {\n    className: styles.main\n  }, !openedArticle && __jsx(ErrorComponent, null), __jsx(Row, {\n    className: \"w-100\"\n  }, __jsx(Col, {\n    md: 3,\n    className: \"\"\n  }), openedArticle && articles.length > 0 && __jsx(React.Fragment, null, __jsx(Col, {\n    md: 6,\n    className: \"justify-content-center\"\n  }, __jsx(ArticleRead, {\n    article: articles.find(function (art) {\n      return art.id === openedArticle;\n    }),\n    allArticles: articles,\n    setOpenedArticle: handleOpenedArticle,\n    glossarywords: glossarywords\n  })), __jsx(Col, {\n    md: 3,\n    className: \"\"\n  }, __jsx(RelatedArticles, {\n    relatedArticles: relatedArticles,\n    setOpenedArticle: handleOpenedArticle\n  }))))), __jsx(Footer, null));\n}\n\narticoli.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(context) {\n    var getArticleId, propsObj, articleId, apiUrlGlossary, resGlossaryword, glossarywords, apiUrlArticle, resArticle, DBarticles;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            getArticleId = /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(rawStr) {\n                var articleId;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        articleId = rawStr.split('/articoli/')[1];\n\n                        if (articleId.includes('/')) {\n                          articleId = articleId.split('/')[1].split('/')[1];\n                        }\n\n                        return _context.abrupt(\"return\", articleId);\n\n                      case 3:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function getArticleId(_x2) {\n                return _ref3.apply(this, arguments);\n              };\n            }();\n\n            propsObj = {\n              DBarticles: [],\n              glossarywords: []\n            };\n\n            if (context.req) {\n              _context2.next = 9;\n              break;\n            }\n\n            _context2.next = 5;\n            return getArticleId(context.asPath);\n\n          case 5:\n            articleId = _context2.sent;\n\n            if (location.href.includes(\"articoli/\")) {\n              location.replace(articleId);\n            } else {\n              location.replace(\"articoli/\" + articleId);\n            }\n\n            _context2.next = 24;\n            break;\n\n          case 9:\n            //api of glossary\n            apiUrlGlossary = \"http://\" + context.req.headers.host + \"/api/glossaryword\";\n            _context2.next = 12;\n            return fetch(apiUrlGlossary);\n\n          case 12:\n            resGlossaryword = _context2.sent;\n            _context2.next = 15;\n            return resGlossaryword.json();\n\n          case 15:\n            glossarywords = _context2.sent;\n            //api of all articles (for the related articles)\n            apiUrlArticle = \"http://\" + context.req.headers.host + \"/api/article\";\n            _context2.next = 19;\n            return fetch(apiUrlArticle);\n\n          case 19:\n            resArticle = _context2.sent;\n            _context2.next = 22;\n            return resArticle.json();\n\n          case 22:\n            DBarticles = _context2.sent;\n            propsObj = {\n              DBarticles: DBarticles.data,\n              glossarywords: glossarywords.data\n            };\n\n          case 24:\n            return _context2.abrupt(\"return\", propsObj);\n\n          case 25:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default articoli;\n/* //Rimozione di getServerSideProps per deployare su Firebase\nexport async function getServerSideProps({ req }) {\n  //api of glossary\n  const apiUrlGlossary = \"http://\" + req.headers.host + \"/api/glossaryword\"\n  const resGlossaryword = await fetch(apiUrlGlossary)\n  const glossarywords = await resGlossaryword.json()\n  //api of all articles (for the related articles)\n  const apiUrlArticle = \"http://\" + req.headers.host + \"/api/article\"\n  const resArticle = await fetch(apiUrlArticle)\n  const DBarticles = await resArticle.json()\n  return { props: { DBarticles: DBarticles.data, glossarywords: glossarywords.data } }\n}\n*/","map":null,"metadata":{},"sourceType":"module"}