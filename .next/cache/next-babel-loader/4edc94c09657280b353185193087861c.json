{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../../styles/Home.module.css';\nimport { useLanguage } from '../../context/siteLanguageContext'; //context\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { Row, Col } from 'react-bootstrap';\nimport { Header } from '../../components/layout/Header';\nimport { Navigation } from '../../components/layout/Navbar';\nimport { Breadcrumbs } from '../../components/layout/Breadcrumbs';\nimport { Footer } from '../../components/layout/Footer';\nimport { ArticleRead } from \"../../components/articles/ArticleRead\";\nimport { RelatedArticles } from \"../../components/articles/RelatedArticles\";\nimport { getRelatedArticles, getBreadcrumbsForArticles } from '../../utils/articles';\nimport { getBreadcrumbsForErrors } from '../../utils/errors';\nimport { ErrorComponent } from '../../components/layout/ErrorComponent';\nexport default function articoli({\n  glossarywords,\n  DBarticles\n}) {\n  const siteLanguage = useLanguage(); //context\n\n  const router = useRouter();\n  const {\n    articleId\n  } = router.query;\n  const {\n    0: articles,\n    1: setArticles\n  } = useState(DBarticles);\n  const {\n    0: openedArticle,\n    1: setOpenedArticle\n  } = useState(null);\n  const {\n    0: shouldRenderComponent,\n    1: setShouldRenderComponent\n  } = useState(null);\n\n  const handleOpenedArticle = id => {\n    const fullRoute = id !== null ? '/articoli/' + id : '/articoli/';\n    router.push(fullRoute);\n    setOpenedArticle(id);\n  };\n\n  let relatedArticles = shouldRenderComponent ? getRelatedArticles(articleId, articles, siteLanguage) : [];\n  useEffect(() => {\n    if (!openedArticle) {\n      if (DBarticles.map(el => el.id).includes(articleId)) {\n        setOpenedArticle(articleId);\n      } else {\n        setShouldRenderComponent(false);\n      }\n    }\n\n    if (!shouldRenderComponent) setShouldRenderComponent(DBarticles.map(el => el.id).includes(articleId));\n  });\n  return __jsx(\"div\", {\n    className: styles.container\n  }, __jsx(Header, {\n    title: siteLanguage === \"ita\" ? \"Articoli\" : \"Articles\"\n  }), __jsx(Navigation, null), openedArticle && shouldRenderComponent && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForArticles(openedArticle, articles.find(art => art.id === openedArticle)[siteLanguage].title)\n  }), shouldRenderComponent === false && __jsx(Breadcrumbs, {\n    breadcrumbsList: getBreadcrumbsForErrors({\n      ita: \"Articolo inesistente\",\n      eng: \"No such article\"\n    }, \"/articoli\", siteLanguage)\n  }), __jsx(\"main\", {\n    className: styles.main\n  }, shouldRenderComponent === false && __jsx(ErrorComponent, null), __jsx(Row, {\n    className: \"w-100\"\n  }, __jsx(Col, {\n    md: 3,\n    className: \"\"\n  }), openedArticle && shouldRenderComponent && __jsx(React.Fragment, null, __jsx(Col, {\n    md: 6,\n    className: \"justify-content-center\"\n  }, __jsx(ArticleRead, {\n    article: articles.find(art => art.id === openedArticle),\n    allArticles: articles,\n    setOpenedArticle: handleOpenedArticle,\n    glossarywords: glossarywords\n  })), __jsx(Col, {\n    md: 3,\n    className: \"\"\n  }, __jsx(RelatedArticles, {\n    relatedArticles: relatedArticles,\n    setOpenedArticle: handleOpenedArticle\n  }))))), __jsx(Footer, null));\n}\nexport async function getServerSideProps({\n  req\n}) {\n  //api of glossary\n  const apiUrlGlossary = \"http://\" + req.headers.host + \"/api/glossaryword\";\n  const resGlossaryword = await fetch(apiUrlGlossary);\n  const glossarywords = await resGlossaryword.json(); //api of all articles (for the related articles)\n\n  const apiUrlArticle = \"http://\" + req.headers.host + \"/api/article\";\n  const resArticle = await fetch(apiUrlArticle);\n  const DBarticles = await resArticle.json();\n  return {\n    props: {\n      DBarticles: DBarticles.data,\n      glossarywords: glossarywords.data\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}