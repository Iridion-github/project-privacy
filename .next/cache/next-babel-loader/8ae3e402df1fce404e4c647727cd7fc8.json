{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../styles/Home.module.css';\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useLanguage, useLanguageUpdate } from '../context/siteLanguageContext'; //context\n\nimport { Row, Col } from 'react-bootstrap';\nimport { Header } from '../components/layout/Header';\nimport { Navigation } from '../components/layout/Navbar';\nimport { Breadcrumbs } from '../components/layout/Breadcrumbs';\nimport { Footer } from '../components/layout/Footer';\nimport { ReviewsList } from \"../components/reviews/ReviewsList\";\nimport { ReviewsLeftMenu } from \"../components/reviews/ReviewsLeftMenu\";\nimport { removeDuplicatesById, includesAll } from '../utils/arrays';\n\nfunction recensioniBibliografiche(_ref) {\n  var DBreviews = _ref.DBreviews,\n      reviewTopics = _ref.reviewTopics;\n  var siteLanguage = useLanguage(); //context\n\n  var _useState = useState(DBreviews),\n      reviews = _useState[0],\n      setReviews = _useState[1];\n\n  var _useState2 = useState(null),\n      openedReview = _useState2[0],\n      setOpenedReview = _useState2[1];\n\n  var router = useRouter();\n\n  var handleOpenedReview = function handleOpenedReview(reviewId) {\n    var fullRoute = reviewId !== null ? '/recensioniBibliografiche/' + reviewId : '/recensioniBibliografiche/';\n    router.push(fullRoute);\n  };\n\n  var searchTopic = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(topic, lang) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              handleOpenedReview(null);\n              setFilteredByTopic(true);\n              result = [];\n\n              if (topic !== \"\") {\n                DBreviews.forEach(function (art) {\n                  if (includesAll(art[lang].topic, topic, Array.isArray(art[lang].topic)).length > 0) {\n                    result.push(art);\n                  }\n                });\n              }\n\n              setReviews(result);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function searchTopic(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var removeTopicFilter = function removeTopicFilter() {\n    handleOpenedReview(null);\n    setFilteredByTopic(false);\n    setReviews(DBreviews);\n  };\n\n  var searchFilter = function searchFilter(reviews, input, lang) {\n    var searchTerms = input.toLowerCase().split(\" \");\n    var found = [];\n\n    if (input !== \"\") {\n      reviews.forEach(function (rev) {\n        if (includesAll(rev.author, searchTerms, Array.isArray(rev.author)).length > 0 || includesAll(rev[lang].topic, searchTerms, Array.isArray(rev[lang].topic)).length > 0 || includesAll(rev[lang].tags, searchTerms, Array.isArray(rev[lang].tags)).length > 0 || includesAll(rev.ita.title, searchTerms, Array.isArray(rev.ita.title)).length > 0 || includesAll(rev.ita.subtitle, searchTerms, Array.isArray(rev.ita.subtitle)).length > 0 || includesAll(rev.ita.content, searchTerms, Array.isArray(rev.ita.content)).length > 0 || includesAll(rev.eng.title, searchTerms, Array.isArray(rev.eng.title)).length > 0 || includesAll(rev.eng.subtitle, searchTerms, Array.isArray(rev.eng.subtitle)).length > 0 || includesAll(rev.eng.content, searchTerms, Array.isArray(rev.eng.content)).length > 0) {\n          found.push(art);\n        }\n      });\n    }\n\n    var result = removeDuplicatesById(found);\n    return result;\n  };\n\n  var _useState3 = useState(false),\n      filtered = _useState3[0],\n      setFiltered = _useState3[1];\n\n  var _useState4 = useState(false),\n      filteredByTopic = _useState4[0],\n      setFilteredByTopic = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      searchInput = _useState5[0],\n      setSearchInput = _useState5[1];\n\n  return __jsx(\"div\", {\n    className: styles.container\n  }, __jsx(Header, {\n    title: siteLanguage === \"ita\" ? \"Recensioni Bibliografiche\" : \"Bibliographic Reviews\"\n  }), __jsx(Navigation, null), __jsx(Breadcrumbs, null), __jsx(\"main\", {\n    className: styles.main\n  }, __jsx(Row, {\n    className: \"w-100 mb-5\"\n  }, __jsx(Col, {\n    md: 3,\n    className: \"\"\n  }, __jsx(ReviewsLeftMenu, {\n    allReviews: reviews,\n    allTopics: reviewTopics,\n    searchTopic: searchTopic,\n    searchInput: searchInput,\n    setSearchInput: setSearchInput,\n    filteredByTopic: filteredByTopic,\n    removeTopicFilter: removeTopicFilter\n  })), __jsx(Col, {\n    md: 6,\n    className: \"justify-content-center\"\n  }, openedReview === null && __jsx(ReviewsList, {\n    allReviews: reviews,\n    setOpenedReview: handleOpenedReview,\n    searchFilter: searchFilter,\n    filtered: filtered,\n    setFiltered: setFiltered,\n    searchInput: searchInput,\n    setSearchInput: setSearchInput\n  })), __jsx(Col, {\n    md: 3,\n    className: \"\"\n  }))), __jsx(Footer, null));\n}\n\nrecensioniBibliografiche.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(context) {\n    var apiUrlReview, resReview, DBreviews, apiUrlTopics, resReviewTopics, reviewTopics;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            apiUrlReview = \"http://\" + context.req.headers.host + \"/api/review\";\n            _context2.next = 3;\n            return fetch(apiUrlReview);\n\n          case 3:\n            resReview = _context2.sent;\n            _context2.next = 6;\n            return resReview.json();\n\n          case 6:\n            DBreviews = _context2.sent;\n            apiUrlTopics = \"http://\" + context.req.headers.host + \"/api/reviewTopics\";\n            _context2.next = 10;\n            return fetch(apiUrlTopics);\n\n          case 10:\n            resReviewTopics = _context2.sent;\n            _context2.next = 13;\n            return resReviewTopics.json();\n\n          case 13:\n            reviewTopics = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              DBreviews: DBreviews.data,\n              reviewTopics: reviewTopics.data\n            });\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default recensioniBibliografiche;\n/* //Rimozione di getServerSideProps per deployare su Firebase\nexport async function getServerSideProps(context) {\n  const apiUrlReview = \"http://\" + context.req.headers.host + \"/api/review\"\n  const resReview = await fetch(apiUrlReview)\n  const DBreviews = await resReview.json()\n  const apiUrlTopics = \"http://\" + context.req.headers.host + \"/api/reviewTopics\"\n  const resReviewTopics = await fetch(apiUrlTopics)\n  const reviewTopics = await resReviewTopics.json()\n  return { props: { DBreviews: DBreviews.data, reviewTopics: reviewTopics.data } }\n}\n*/","map":null,"metadata":{},"sourceType":"module"}